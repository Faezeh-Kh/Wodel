model alp
class PFSMXxxXPFSM
	attributes
		name : String
end
class PFSMXxxXAlphabetSymbol
	attributes
		symbol : String
end
class PFSMXxxXState
	attributes
		name : String
		isInitial : Boolean
		isFinal : Boolean
end
class PFSMXxxXTransition
	attributes
		probability : Real
end
class Dummy
end
composition PFSMXxxXPFSMXxxXPFSMXxxXState between
	PFSMXxxXPFSM[0..1] role pfsmxxxxpfsmxxxxstates
	PFSMXxxXState[*] role xxxxstates
end
composition PFSMXxxXPFSMXxxXPFSMXxxXTransition between
	PFSMXxxXPFSM[0..1] role pfsmxxxxpfsmxxxxtransitions
	PFSMXxxXTransition[*] role xxxxtransitions
end
composition PFSMXxxXPFSMXxxXPFSMXxxXAlphabetSymbol between
	PFSMXxxXPFSM[0..1] role pfsmxxxxpfsmxxxxalphabet
	PFSMXxxXAlphabetSymbol[*] role alphabet
end
association PFSMXxxXTransitionXxxXPFSMXxxXState between
	PFSMXxxXTransition[*] role pfsmxxxxtransitionxxxxsrc
	PFSMXxxXState[1] role src
end
association PFSMXxxXTransitionXxxXPFSMXxxXState1 between
	PFSMXxxXTransition[*] role pfsmxxxxtransitionxxxxtar
	PFSMXxxXState[1] role tar
end
association PFSMXxxXTransitionXxxXPFSMXxxXAlphabetSymbol between
	PFSMXxxXTransition[*] role pfsmxxxxtransitionxxxxinput
	PFSMXxxXAlphabetSymbol[1] role input
end
association PFSMXxxXTransitionXxxXPFSMXxxXAlphabetSymbol1 between
	PFSMXxxXTransition[*] role pfsmxxxxtransitionxxxxoutput
	PFSMXxxXAlphabetSymbol[1] role output
end
constraints
context Dummy
inv mut1 : PFSMXxxXPFSM.allInstances()->forAll(p | p.name <> null)
inv mut2 : PFSMXxxXAlphabetSymbol.allInstances()->forAll(p | p.symbol <> null)
inv mut3 : PFSMXxxXState.allInstances()->forAll(p | p.name <> null)
inv mut4 : PFSMXxxXState.allInstances()->forAll(p | p.isInitial <> null)
inv mut5 : PFSMXxxXState.allInstances()->forAll(p | p.isFinal <> null)
inv mut6 : PFSMXxxXTransition.allInstances()->forAll(p | p.probability <> null)
inv mut7 : PFSMXxxXTransition.allInstances()->size() > 2
inv mut8 : PFSMXxxXTransition.allInstances()->exists(p0, p1 |  p0 <> p1 and p0.src = p1.src)
inv mut9 : PFSMXxxXTransition.allInstances()->exists(p1 | PFSMXxxXTransition.allInstances()->exists(p0, p2 |  p0 <> p2 and p0.src = p2.src and p1 <> p2))
inv mut10 : PFSMXxxXState.allInstances()->exists(s | s.isFinal)
inv mut11 : PFSMXxxXState.allInstances()->one(s | s.isInitial)
inv mut12 : PFSMXxxXAlphabetSymbol.allInstances()->forAll(a1,a2 |a1.symbol=a2.symbol implies a1=a2)
