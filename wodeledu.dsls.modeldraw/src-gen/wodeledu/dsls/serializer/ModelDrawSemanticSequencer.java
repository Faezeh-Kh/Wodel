/*
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import java.util.Set;
import modeldraw.BooleanAttribute;
import modeldraw.Content;
import modeldraw.Edge;
import modeldraw.Enumerator;
import modeldraw.Information;
import modeldraw.Level;
import modeldraw.ModeldrawPackage;
import modeldraw.MutatorDraw;
import modeldraw.Node;
import modeldraw.NodeEnumerator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.ModelDrawGrammarAccess;

@SuppressWarnings("all")
public class ModelDrawSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelDrawGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModeldrawPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModeldrawPackage.BOOLEAN_ATTRIBUTE:
				sequence_BooleanAttribute(context, (BooleanAttribute) semanticObject); 
				return; 
			case ModeldrawPackage.CONTENT:
				sequence_Content(context, (Content) semanticObject); 
				return; 
			case ModeldrawPackage.EDGE:
				sequence_Edge(context, (Edge) semanticObject); 
				return; 
			case ModeldrawPackage.ENUMERATOR:
				sequence_Enumerator(context, (Enumerator) semanticObject); 
				return; 
			case ModeldrawPackage.INFORMATION:
				sequence_Information(context, (Information) semanticObject); 
				return; 
			case ModeldrawPackage.LEVEL:
				sequence_Level(context, (Level) semanticObject); 
				return; 
			case ModeldrawPackage.MUTATOR_DRAW:
				sequence_MutatorDraw(context, (MutatorDraw) semanticObject); 
				return; 
			case ModeldrawPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case ModeldrawPackage.NODE_ENUMERATOR:
				sequence_NodeEnumerator(context, (NodeEnumerator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BooleanAttribute returns BooleanAttribute
	 *
	 * Constraint:
	 *     (negation?='not'? att=[EAttribute|ID])
	 */
	protected void sequence_BooleanAttribute(ISerializationContext context, BooleanAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Content
	 *
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         (nodenum+=NodeEnumerator nodenum+=NodeEnumerator*)? 
	 *         (info+=Information info+=Information*)? 
	 *         attName=[EAttribute|ID]? 
	 *         symbol=EString?
	 *     )
	 */
	protected void sequence_Content(ISerializationContext context, Content semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Edge
	 *     Edge returns Edge
	 *
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         source=[EReference|ID] 
	 *         target=[EReference|ID] 
	 *         attName=[EAttribute|ID]? 
	 *         (reference=[EReference|ID]? label=[EAttribute|ID])? 
	 *         src_decoration=Decoration? 
	 *         src_label=[EAttribute|ID]? 
	 *         tar_decoration=Decoration? 
	 *         tar_label=[EAttribute|ID]?
	 *     )
	 */
	protected void sequence_Edge(ISerializationContext context, Edge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumerator returns Enumerator
	 *
	 * Constraint:
	 *     (literal=[EEnumLiteral|ID] value=EString)
	 */
	protected void sequence_Enumerator(ISerializationContext context, Enumerator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModeldrawPackage.Literals.ENUMERATOR__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModeldrawPackage.Literals.ENUMERATOR__LITERAL));
			if (transientValues.isValueTransient(semanticObject, ModeldrawPackage.Literals.ENUMERATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModeldrawPackage.Literals.ENUMERATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumeratorAccess().getLiteralEEnumLiteralIDTerminalRuleCall_1_0_1(), semanticObject.eGet(ModeldrawPackage.Literals.ENUMERATOR__LITERAL, false));
		feeder.accept(grammarAccess.getEnumeratorAccess().getValueEStringParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Information returns Information
	 *
	 * Constraint:
	 *     (type=[EReference|ID] att=[EAttribute|ID]?)
	 */
	protected void sequence_Information(ISerializationContext context, Information semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Level
	 *     Level returns Level
	 *
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         upper=[EReference|ID] 
	 *         attName=[EAttribute|ID]? 
	 *         (reference=[EReference|ID]? label=[EAttribute|ID])? 
	 *         src_decoration=Decoration? 
	 *         src_label=[EAttribute|ID]? 
	 *         tar_decoration=Decoration? 
	 *         tar_label=[EAttribute|ID]?
	 *     )
	 */
	protected void sequence_Level(ISerializationContext context, Level semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MutatorDraw returns MutatorDraw
	 *
	 * Constraint:
	 *     (
	 *         metamodel=EString 
	 *         name=[EClass|ID] 
	 *         type=DrawType 
	 *         nodes+=Node* 
	 *         relations+=Relation* 
	 *         contents+=Content*
	 *     )
	 */
	protected void sequence_MutatorDraw(ISerializationContext context, MutatorDraw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeEnumerator returns NodeEnumerator
	 *
	 * Constraint:
	 *     (att=[EAttribute|ID] enumerator+=Enumerator enumerator+=Enumerator*)
	 */
	protected void sequence_NodeEnumerator(ISerializationContext context, NodeEnumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         (attribute+=BooleanAttribute attribute+=BooleanAttribute*)? 
	 *         type=NodeType 
	 *         attName=[EAttribute|ID]? 
	 *         (reference+=[EReference|ID] reference+=[EReference|ID]*)? 
	 *         shape=NodeShape? 
	 *         color=NodeColor? 
	 *         style=NodeStyle?
	 *     )
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
