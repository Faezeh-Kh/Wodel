/**
 */
package appliedMutations.provider;

import appliedMutations.util.AppliedMutationsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AppliedMutationsItemProviderAdapterFactory extends AppliedMutationsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AppliedMutationsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.Mutations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MutationsItemProvider mutationsItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.Mutations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMutationsAdapter() {
		if (mutationsItemProvider == null) {
			mutationsItemProvider = new MutationsItemProvider(this);
		}

		return mutationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.AppMutation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppMutationItemProvider appMutationItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.AppMutation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppMutationAdapter() {
		if (appMutationItemProvider == null) {
			appMutationItemProvider = new AppMutationItemProvider(this);
		}

		return appMutationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ObjectCreated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectCreatedItemProvider objectCreatedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ObjectCreated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectCreatedAdapter() {
		if (objectCreatedItemProvider == null) {
			objectCreatedItemProvider = new ObjectCreatedItemProvider(this);
		}

		return objectCreatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ObjectRemoved} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectRemovedItemProvider objectRemovedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ObjectRemoved}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectRemovedAdapter() {
		if (objectRemovedItemProvider == null) {
			objectRemovedItemProvider = new ObjectRemovedItemProvider(this);
		}

		return objectRemovedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ReferenceChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceChangedItemProvider referenceChangedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ReferenceChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceChangedAdapter() {
		if (referenceChangedItemProvider == null) {
			referenceChangedItemProvider = new ReferenceChangedItemProvider(this);
		}

		return referenceChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.SourceReferenceChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceReferenceChangedItemProvider sourceReferenceChangedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.SourceReferenceChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceReferenceChangedAdapter() {
		if (sourceReferenceChangedItemProvider == null) {
			sourceReferenceChangedItemProvider = new SourceReferenceChangedItemProvider(this);
		}

		return sourceReferenceChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.TargetReferenceChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetReferenceChangedItemProvider targetReferenceChangedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.TargetReferenceChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetReferenceChangedAdapter() {
		if (targetReferenceChangedItemProvider == null) {
			targetReferenceChangedItemProvider = new TargetReferenceChangedItemProvider(this);
		}

		return targetReferenceChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ReferenceCreated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceCreatedItemProvider referenceCreatedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ReferenceCreated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceCreatedAdapter() {
		if (referenceCreatedItemProvider == null) {
			referenceCreatedItemProvider = new ReferenceCreatedItemProvider(this);
		}

		return referenceCreatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ReferenceRemoved} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceRemovedItemProvider referenceRemovedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ReferenceRemoved}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceRemovedAdapter() {
		if (referenceRemovedItemProvider == null) {
			referenceRemovedItemProvider = new ReferenceRemovedItemProvider(this);
		}

		return referenceRemovedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.InformationChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationChangedItemProvider informationChangedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.InformationChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationChangedAdapter() {
		if (informationChangedItemProvider == null) {
			informationChangedItemProvider = new InformationChangedItemProvider(this);
		}

		return informationChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.AttributeChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeChangedItemProvider attributeChangedItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.AttributeChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeChangedAdapter() {
		if (attributeChangedItemProvider == null) {
			attributeChangedItemProvider = new AttributeChangedItemProvider(this);
		}

		return attributeChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.ReferenceSwap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceSwapItemProvider referenceSwapItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.ReferenceSwap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceSwapAdapter() {
		if (referenceSwapItemProvider == null) {
			referenceSwapItemProvider = new ReferenceSwapItemProvider(this);
		}

		return referenceSwapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.AttributeSwap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeSwapItemProvider attributeSwapItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.AttributeSwap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeSwapAdapter() {
		if (attributeSwapItemProvider == null) {
			attributeSwapItemProvider = new AttributeSwapItemProvider(this);
		}

		return attributeSwapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link appliedMutations.CompositeMutation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeMutationItemProvider compositeMutationItemProvider;

	/**
	 * This creates an adapter for a {@link appliedMutations.CompositeMutation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeMutationAdapter() {
		if (compositeMutationItemProvider == null) {
			compositeMutationItemProvider = new CompositeMutationItemProvider(this);
		}

		return compositeMutationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mutationsItemProvider != null) mutationsItemProvider.dispose();
		if (appMutationItemProvider != null) appMutationItemProvider.dispose();
		if (objectCreatedItemProvider != null) objectCreatedItemProvider.dispose();
		if (objectRemovedItemProvider != null) objectRemovedItemProvider.dispose();
		if (referenceChangedItemProvider != null) referenceChangedItemProvider.dispose();
		if (sourceReferenceChangedItemProvider != null) sourceReferenceChangedItemProvider.dispose();
		if (targetReferenceChangedItemProvider != null) targetReferenceChangedItemProvider.dispose();
		if (referenceCreatedItemProvider != null) referenceCreatedItemProvider.dispose();
		if (referenceRemovedItemProvider != null) referenceRemovedItemProvider.dispose();
		if (informationChangedItemProvider != null) informationChangedItemProvider.dispose();
		if (attributeChangedItemProvider != null) attributeChangedItemProvider.dispose();
		if (referenceSwapItemProvider != null) referenceSwapItemProvider.dispose();
		if (attributeSwapItemProvider != null) attributeSwapItemProvider.dispose();
		if (compositeMutationItemProvider != null) compositeMutationItemProvider.dispose();
	}

}
