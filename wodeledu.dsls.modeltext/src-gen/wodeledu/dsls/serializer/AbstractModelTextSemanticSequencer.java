/*
 * generated by Xtext
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import modeltext.Attribute;
import modeltext.Constant;
import modeltext.Element;
import modeltext.IdentifyElements;
import modeltext.IdentifyelementsPackage;
import modeltext.Variable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.ModelTextGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractModelTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelTextGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == IdentifyelementsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case IdentifyelementsPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case IdentifyelementsPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case IdentifyelementsPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case IdentifyelementsPackage.IDENTIFY_ELEMENTS:
				sequence_IdentifyElements(context, (IdentifyElements) semanticObject); 
				return; 
			case IdentifyelementsPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (negation?='yes'? att=[EAttribute|ID])
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_Constant(EObject context, Constant semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, IdentifyelementsPackage.Literals.CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IdentifyelementsPackage.Literals.CONSTANT__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConstantAccess().getValueEStringParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=[EClass|EString] ref=[EReference|ID]? att=Attribute? (words+=Word words+=Word*)?)
	 */
	protected void sequence_Element(EObject context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (metamodel=EString (elements+=Element elements+=Element*)?)
	 */
	protected void sequence_IdentifyElements(EObject context, IdentifyElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ref=[EReference|ID]? id=[EAttribute|ID])
	 */
	protected void sequence_Variable(EObject context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
