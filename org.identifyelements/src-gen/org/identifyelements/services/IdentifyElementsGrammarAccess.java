/*
 * generated by Xtext
 */
package org.identifyelements.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IdentifyElementsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class IdentifyElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifyElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifyElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetamodelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelEStringParserRuleCall_2_0 = (RuleCall)cMetamodelAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		
		//IdentifyElements:
		//	{IdentifyElements} "metamodel" metamodel=EString (elements+=Element elements+=Element*)?;
		@Override public ParserRule getRule() { return rule; }

		//{IdentifyElements} "metamodel" metamodel=EString (elements+=Element elements+=Element*)?
		public Group getGroup() { return cGroup; }

		//{IdentifyElements}
		public Action getIdentifyElementsAction_0() { return cIdentifyElementsAction_0; }

		//"metamodel"
		public Keyword getMetamodelKeyword_1() { return cMetamodelKeyword_1; }

		//metamodel=EString
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//EString
		public RuleCall getMetamodelEStringParserRuleCall_2_0() { return cMetamodelEStringParserRuleCall_2_0; }

		//(elements+=Element elements+=Element*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=Element
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_0_0() { return cElementsElementParserRuleCall_3_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_1_0() { return cElementsElementParserRuleCall_3_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassEStringParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefEReferenceCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefEReferenceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefEReferenceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttAttributeParserRuleCall_4_1_0 = (RuleCall)cAttAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cWordsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cWordsWordParserRuleCall_6_0_0 = (RuleCall)cWordsAssignment_6_0.eContents().get(0);
		private final Assignment cWordsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cWordsWordParserRuleCall_6_1_0 = (RuleCall)cWordsAssignment_6_1.eContents().get(0);
		
		//Element:
		//	{Element} ">" type=[ecore::EClass|EString] ("." ref=[ecore::EReference])? ("(" att=Attribute ")")? ":" (words+=Word
		//	words+=Word*)?;
		@Override public ParserRule getRule() { return rule; }

		//{Element} ">" type=[ecore::EClass|EString] ("." ref=[ecore::EReference])? ("(" att=Attribute ")")? ":" (words+=Word
		//words+=Word*)?
		public Group getGroup() { return cGroup; }

		//{Element}
		public Action getElementAction_0() { return cElementAction_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//type=[ecore::EClass|EString]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass|EString]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//EString
		public RuleCall getTypeEClassEStringParserRuleCall_2_0_1() { return cTypeEClassEStringParserRuleCall_2_0_1; }

		//("." ref=[ecore::EReference])?
		public Group getGroup_3() { return cGroup_3; }

		//"."
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }

		//ref=[ecore::EReference]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }

		//[ecore::EReference]
		public CrossReference getRefEReferenceCrossReference_3_1_0() { return cRefEReferenceCrossReference_3_1_0; }

		//ID
		public RuleCall getRefEReferenceIDTerminalRuleCall_3_1_0_1() { return cRefEReferenceIDTerminalRuleCall_3_1_0_1; }

		//("(" att=Attribute ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//att=Attribute
		public Assignment getAttAssignment_4_1() { return cAttAssignment_4_1; }

		//Attribute
		public RuleCall getAttAttributeParserRuleCall_4_1_0() { return cAttAttributeParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//(words+=Word words+=Word*)?
		public Group getGroup_6() { return cGroup_6; }

		//words+=Word
		public Assignment getWordsAssignment_6_0() { return cWordsAssignment_6_0; }

		//Word
		public RuleCall getWordsWordParserRuleCall_6_0_0() { return cWordsWordParserRuleCall_6_0_0; }

		//words+=Word*
		public Assignment getWordsAssignment_6_1() { return cWordsAssignment_6_1; }

		//Word
		public RuleCall getWordsWordParserRuleCall_6_1_0() { return cWordsWordParserRuleCall_6_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNegationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cNegationYesKeyword_1_0_0 = (Keyword)cNegationAssignment_1_0.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cAttAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttEAttributeCrossReference_2_0 = (CrossReference)cAttAssignment_2.eContents().get(0);
		private final RuleCall cAttEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttEAttributeCrossReference_2_0.eContents().get(1);
		
		//Attribute:
		//	{Attribute} (negation?="yes" | "not")? att=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }

		//{Attribute} (negation?="yes" | "not")? att=[ecore::EAttribute]
		public Group getGroup() { return cGroup; }

		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }

		//(negation?="yes" | "not")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//negation?="yes"
		public Assignment getNegationAssignment_1_0() { return cNegationAssignment_1_0; }

		//"yes"
		public Keyword getNegationYesKeyword_1_0_0() { return cNegationYesKeyword_1_0_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//att=[ecore::EAttribute]
		public Assignment getAttAssignment_2() { return cAttAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttEAttributeCrossReference_2_0() { return cAttEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttEAttributeIDTerminalRuleCall_2_0_1() { return cAttEAttributeIDTerminalRuleCall_2_0_1; }
	}

	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Word");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Word:
		//	Constant | Variable;
		@Override public ParserRule getRule() { return rule; }

		//Constant | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Constant:
		//	{Constant} value=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Constant} value=EString
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRefEReferenceCrossReference_2_0_0 = (CrossReference)cRefAssignment_2_0.eContents().get(0);
		private final RuleCall cRefEReferenceIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRefEReferenceCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIdEAttributeCrossReference_3_0 = (CrossReference)cIdAssignment_3.eContents().get(0);
		private final RuleCall cIdEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cIdEAttributeCrossReference_3_0.eContents().get(1);
		
		//Variable:
		//	{Variable} "%" (ref=[ecore::EReference] ".")? id=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }

		//{Variable} "%" (ref=[ecore::EReference] ".")? id=[ecore::EAttribute]
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }

		//(ref=[ecore::EReference] ".")?
		public Group getGroup_2() { return cGroup_2; }

		//ref=[ecore::EReference]
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }

		//[ecore::EReference]
		public CrossReference getRefEReferenceCrossReference_2_0_0() { return cRefEReferenceCrossReference_2_0_0; }

		//ID
		public RuleCall getRefEReferenceIDTerminalRuleCall_2_0_0_1() { return cRefEReferenceIDTerminalRuleCall_2_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//id=[ecore::EAttribute]
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//[ecore::EAttribute]
		public CrossReference getIdEAttributeCrossReference_3_0() { return cIdEAttributeCrossReference_3_0; }

		//ID
		public RuleCall getIdEAttributeIDTerminalRuleCall_3_0_1() { return cIdEAttributeIDTerminalRuleCall_3_0_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final IdentifyElementsElements pIdentifyElements;
	private final ElementElements pElement;
	private final AttributeElements pAttribute;
	private final WordElements pWord;
	private final ConstantElements pConstant;
	private final VariableElements pVariable;
	private final EStringElements pEString;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IdentifyElementsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIdentifyElements = new IdentifyElementsElements();
		this.pElement = new ElementElements();
		this.pAttribute = new AttributeElements();
		this.pWord = new WordElements();
		this.pConstant = new ConstantElements();
		this.pVariable = new VariableElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.identifyelements.IdentifyElements".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IdentifyElements:
	//	{IdentifyElements} "metamodel" metamodel=EString (elements+=Element elements+=Element*)?;
	public IdentifyElementsElements getIdentifyElementsAccess() {
		return pIdentifyElements;
	}
	
	public ParserRule getIdentifyElementsRule() {
		return getIdentifyElementsAccess().getRule();
	}

	//Element:
	//	{Element} ">" type=[ecore::EClass|EString] ("." ref=[ecore::EReference])? ("(" att=Attribute ")")? ":" (words+=Word
	//	words+=Word*)?;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Attribute:
	//	{Attribute} (negation?="yes" | "not")? att=[ecore::EAttribute];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Word:
	//	Constant | Variable;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}

	//Constant:
	//	{Constant} value=EString;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Variable:
	//	{Variable} "%" (ref=[ecore::EReference] ".")? id=[ecore::EAttribute];
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
