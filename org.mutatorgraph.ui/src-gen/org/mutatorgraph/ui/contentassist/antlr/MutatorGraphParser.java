/*
 * generated by Xtext
 */
package org.mutatorgraph.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mutatorgraph.services.MutatorGraphGrammarAccess;

public class MutatorGraphParser extends AbstractContentAssistParser {
	
	@Inject
	private MutatorGraphGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mutatorgraph.ui.contentassist.antlr.internal.InternalMutatorGraphParser createParser() {
		org.mutatorgraph.ui.contentassist.antlr.internal.InternalMutatorGraphParser result = new org.mutatorgraph.ui.contentassist.antlr.internal.InternalMutatorGraphParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives_3(), "rule__Node__Alternatives_3");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getNodeShapeAccess().getAlternatives(), "rule__NodeShape__Alternatives");
					put(grammarAccess.getMutatorGraphAccess().getGroup(), "rule__MutatorGraph__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_8(), "rule__Node__Group_8__0");
					put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
					put(grammarAccess.getMutatorGraphAccess().getMetamodelAssignment_2(), "rule__MutatorGraph__MetamodelAssignment_2");
					put(grammarAccess.getMutatorGraphAccess().getNameAssignment_3(), "rule__MutatorGraph__NameAssignment_3");
					put(grammarAccess.getMutatorGraphAccess().getTypeAssignment_5(), "rule__MutatorGraph__TypeAssignment_5");
					put(grammarAccess.getMutatorGraphAccess().getNodesAssignment_7(), "rule__MutatorGraph__NodesAssignment_7");
					put(grammarAccess.getMutatorGraphAccess().getEdgesAssignment_8(), "rule__MutatorGraph__EdgesAssignment_8");
					put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
					put(grammarAccess.getNodeAccess().getNegationAssignment_3_0(), "rule__Node__NegationAssignment_3_0");
					put(grammarAccess.getNodeAccess().getAttributeAssignment_4(), "rule__Node__AttributeAssignment_4");
					put(grammarAccess.getNodeAccess().getTypeAssignment_7(), "rule__Node__TypeAssignment_7");
					put(grammarAccess.getNodeAccess().getShapeAssignment_8_3(), "rule__Node__ShapeAssignment_8_3");
					put(grammarAccess.getEdgeAccess().getNameAssignment_1(), "rule__Edge__NameAssignment_1");
					put(grammarAccess.getEdgeAccess().getSourceAssignment_3(), "rule__Edge__SourceAssignment_3");
					put(grammarAccess.getEdgeAccess().getTargetAssignment_5(), "rule__Edge__TargetAssignment_5");
					put(grammarAccess.getEdgeAccess().getLabelAssignment_12(), "rule__Edge__LabelAssignment_12");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mutatorgraph.ui.contentassist.antlr.internal.InternalMutatorGraphParser typedParser = (org.mutatorgraph.ui.contentassist.antlr.internal.InternalMutatorGraphParser) parser;
			typedParser.entryRuleMutatorGraph();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MutatorGraphGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MutatorGraphGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
