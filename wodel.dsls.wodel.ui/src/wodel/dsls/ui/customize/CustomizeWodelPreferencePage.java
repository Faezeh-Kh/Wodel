package wodel.dsls.ui.customize;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.InvalidRegistryObjectException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.preference.BooleanFieldEditor;
import org.eclipse.jface.preference.ComboFieldEditor;
import org.eclipse.jface.preference.StringFieldEditor;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IWorkbench;
import org.eclipse.xtext.ui.editor.preferences.LanguageRootPreferencePage;
import org.eclipse.xtext.ui.editor.preferences.fields.LabelFieldEditor;

import postprocessor.run.IPostprocessor;
import registry.run.IRegistryPostprocessor;

public class CustomizeWodelPreferencePage extends LanguageRootPreferencePage {
	
    @Override
    protected void createFieldEditors() {
    	Composite composite = getFieldEditorParent();
    	new LabelFieldEditor("Check this box if you want to generate a registry of the mutations", composite);
    	addField(new BooleanFieldEditor("Generate registry", "Generate registry", composite));
    	new LabelFieldEditor("Choose wich extension you would like to apply for postprocessing", composite);
    	if (Platform.getExtensionRegistry() != null) {
			IConfigurationElement[] extensions = Platform
					.getExtensionRegistry()
					.getConfigurationElementsFor(
							"wodel.postprocessor.MutPostprocessor");
			for (int j = 0; j < extensions.length; j++) {
				IPostprocessor src = null;
				try {
					src = (IPostprocessor) extensions[j]
							.createExecutableExtension("class");
				} catch (CoreException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				addField(new BooleanFieldEditor(src.getName(), src.getName(), composite));
			}
		}
    	if (Platform.getExtensionRegistry() != null) {
			IConfigurationElement[] extensions = Platform
					.getExtensionRegistry()
					.getConfigurationElementsFor(
							"wodel.registry.MutRegistryPostprocessor");
			for (int j = 0; j < extensions.length; j++) {
				IRegistryPostprocessor src = null;
				try {
					src = (IRegistryPostprocessor) extensions[j]
							.createExecutableExtension("class");
				} catch (CoreException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				addField(new BooleanFieldEditor(src.getName(), src.getName(), composite));
			}
		}
    	new LabelFieldEditor("Check this box if you want to filter concrete classes on metrics", composite);
    	addField(new BooleanFieldEditor("Filter concrete classes", "Filter concrete classes", composite));
    	new LabelFieldEditor("Check this box if you want to generate metrics of the mutations", composite);
    	addField(new BooleanFieldEditor("Generate mutant metrics", "Generate mutant metrics", composite));
    	new LabelFieldEditor("Check this box if you want to generate debug metrics of the mutations", composite);
    	addField(new BooleanFieldEditor("Generate debug mutant metrics", "Generate debug mutant metrics", composite));
    	new LabelFieldEditor("Check this box if you want to generate all the metrics related to the original seed models", composite);
    	addField(new BooleanFieldEditor("Base metrics", "Base metrics", composite));
    	new LabelFieldEditor("\n\nWrite which number of attempts will be executed until assuring mutant is unique", composite);
    	addField(new StringFieldEditor("Number of attempts", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Top number of mutants that will be generated by default", composite);
    	addField(new StringFieldEditor("Number of mutants", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Top number of seed models that will be generated by default", composite);
    	addField(new StringFieldEditor("Number of seed models", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Maximum value for integers", composite);
    	addField(new StringFieldEditor("Maximum integer value", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Minimum value for integers", composite);
    	addField(new StringFieldEditor("Minimum integer value", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Maximum value for strings", composite);
    	addField(new StringFieldEditor("Maximum string value", "", 8, composite));
    	new LabelFieldEditor("\n\n", composite);
    	new LabelFieldEditor("Maximum cardinality for objects/associations", composite);
    	addField(new StringFieldEditor("Maximum cardinality value", "", 8, composite));
    	
    	ArrayList<String> valueList = new ArrayList<String>();
    	if (Platform.getExtensionRegistry() != null) {
			IConfigurationElement[] extensions = Platform
					.getExtensionRegistry()
					.getConfigurationElementsFor(
							"wodel.comparation.MutComparation");
			for (int j = 0; j < extensions.length; j++) {
				String value = "";
				try {
					Class<?> extensionClass = Platform.getBundle(extensions[j].getDeclaringExtension().getContributor().getName()).loadClass(extensions[j].getAttribute("class"));
					Object comparation =  extensionClass.newInstance();
					Method method = extensionClass.getDeclaredMethod("getName");
					value = (String) method.invoke(comparation);
				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvalidRegistryObjectException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SecurityException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (value.length() > 0) {
					valueList.add(value);
				}
			}
			String[][] values = new String[valueList.size()][2];
			int index = 0;
			for (String value : valueList) {
				values[index][0] = value;
				values[index][1] = value;
				index++;
			}
	    	
	    	new LabelFieldEditor("\n\n", composite);
	    	new LabelFieldEditor("Mutants equivalence extension", composite);
	    	ComboFieldEditor combo = new ComboFieldEditor("Mutants equivalence extension", "", values, composite);
	    	addField(combo);
		}
    }
    @Override
    public void init(IWorkbench workbench) {
    	if (Platform.getExtensionRegistry() != null) {
			IConfigurationElement[] extensions = Platform
					.getExtensionRegistry()
					.getConfigurationElementsFor(
							"wodel.postprocessor.MutPostprocessor");
			for (int j = 0; j < extensions.length; j++) {
				IPostprocessor src = null;
				try {
					src = (IPostprocessor) extensions[j]
							.createExecutableExtension("class");
				} catch (CoreException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				getPreferenceStore().setDefault(src.getName(), false);
			}
		}
    }
}
