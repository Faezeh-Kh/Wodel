/*
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import wodeledu.dsls.ide.contentassist.antlr.internal.InternalModelDrawParser;
import wodeledu.dsls.services.ModelDrawGrammarAccess;

public class ModelDrawParser extends AbstractContentAssistParser {

	@Inject
	private ModelDrawGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalModelDrawParser createParser() {
		InternalModelDrawParser result = new InternalModelDrawParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getRelationAccess().getAlternatives(), "rule__Relation__Alternatives");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getNodeShapeAccess().getAlternatives(), "rule__NodeShape__Alternatives");
					put(grammarAccess.getNodeStyleAccess().getAlternatives(), "rule__NodeStyle__Alternatives");
					put(grammarAccess.getDecorationAccess().getAlternatives(), "rule__Decoration__Alternatives");
					put(grammarAccess.getMutatorDrawAccess().getGroup(), "rule__MutatorDraw__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_2(), "rule__Node__Group_2__0");
					put(grammarAccess.getNodeAccess().getGroup_2_2(), "rule__Node__Group_2_2__0");
					put(grammarAccess.getNodeAccess().getGroup_5(), "rule__Node__Group_5__0");
					put(grammarAccess.getNodeAccess().getGroup_6(), "rule__Node__Group_6__0");
					put(grammarAccess.getNodeAccess().getGroup_7(), "rule__Node__Group_7__0");
					put(grammarAccess.getNodeAccess().getGroup_8(), "rule__Node__Group_8__0");
					put(grammarAccess.getNodeAccess().getGroup_9(), "rule__Node__Group_9__0");
					put(grammarAccess.getBooleanAttributeAccess().getGroup(), "rule__BooleanAttribute__Group__0");
					put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
					put(grammarAccess.getEdgeAccess().getGroup_9(), "rule__Edge__Group_9__0");
					put(grammarAccess.getEdgeAccess().getGroup_10(), "rule__Edge__Group_10__0");
					put(grammarAccess.getEdgeAccess().getGroup_10_2(), "rule__Edge__Group_10_2__0");
					put(grammarAccess.getEdgeAccess().getGroup_11(), "rule__Edge__Group_11__0");
					put(grammarAccess.getEdgeAccess().getGroup_12(), "rule__Edge__Group_12__0");
					put(grammarAccess.getEdgeAccess().getGroup_13(), "rule__Edge__Group_13__0");
					put(grammarAccess.getEdgeAccess().getGroup_14(), "rule__Edge__Group_14__0");
					put(grammarAccess.getLevelAccess().getGroup(), "rule__Level__Group__0");
					put(grammarAccess.getLevelAccess().getGroup_6(), "rule__Level__Group_6__0");
					put(grammarAccess.getLevelAccess().getGroup_7(), "rule__Level__Group_7__0");
					put(grammarAccess.getLevelAccess().getGroup_7_2(), "rule__Level__Group_7_2__0");
					put(grammarAccess.getLevelAccess().getGroup_8(), "rule__Level__Group_8__0");
					put(grammarAccess.getLevelAccess().getGroup_9(), "rule__Level__Group_9__0");
					put(grammarAccess.getLevelAccess().getGroup_10(), "rule__Level__Group_10__0");
					put(grammarAccess.getLevelAccess().getGroup_11(), "rule__Level__Group_11__0");
					put(grammarAccess.getContentAccess().getGroup(), "rule__Content__Group__0");
					put(grammarAccess.getContentAccess().getGroup_3(), "rule__Content__Group_3__0");
					put(grammarAccess.getContentAccess().getGroup_4(), "rule__Content__Group_4__0");
					put(grammarAccess.getContentAccess().getGroup_5(), "rule__Content__Group_5__0");
					put(grammarAccess.getContentAccess().getGroup_6(), "rule__Content__Group_6__0");
					put(grammarAccess.getNodeEnumeratorAccess().getGroup(), "rule__NodeEnumerator__Group__0");
					put(grammarAccess.getEnumeratorAccess().getGroup(), "rule__Enumerator__Group__0");
					put(grammarAccess.getInformationAccess().getGroup(), "rule__Information__Group__0");
					put(grammarAccess.getInformationAccess().getGroup_2(), "rule__Information__Group_2__0");
					put(grammarAccess.getMutatorDrawAccess().getMetamodelAssignment_2(), "rule__MutatorDraw__MetamodelAssignment_2");
					put(grammarAccess.getMutatorDrawAccess().getNameAssignment_3(), "rule__MutatorDraw__NameAssignment_3");
					put(grammarAccess.getMutatorDrawAccess().getTypeAssignment_5(), "rule__MutatorDraw__TypeAssignment_5");
					put(grammarAccess.getMutatorDrawAccess().getNodesAssignment_7(), "rule__MutatorDraw__NodesAssignment_7");
					put(grammarAccess.getMutatorDrawAccess().getRelationsAssignment_8(), "rule__MutatorDraw__RelationsAssignment_8");
					put(grammarAccess.getMutatorDrawAccess().getContentsAssignment_9(), "rule__MutatorDraw__ContentsAssignment_9");
					put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
					put(grammarAccess.getNodeAccess().getAttributeAssignment_2_1(), "rule__Node__AttributeAssignment_2_1");
					put(grammarAccess.getNodeAccess().getAttributeAssignment_2_2_1(), "rule__Node__AttributeAssignment_2_2_1");
					put(grammarAccess.getNodeAccess().getTypeAssignment_4(), "rule__Node__TypeAssignment_4");
					put(grammarAccess.getNodeAccess().getAttNameAssignment_5_1(), "rule__Node__AttNameAssignment_5_1");
					put(grammarAccess.getNodeAccess().getReferenceAssignment_6_3(), "rule__Node__ReferenceAssignment_6_3");
					put(grammarAccess.getNodeAccess().getReferenceAssignment_6_4(), "rule__Node__ReferenceAssignment_6_4");
					put(grammarAccess.getNodeAccess().getShapeAssignment_7_2(), "rule__Node__ShapeAssignment_7_2");
					put(grammarAccess.getNodeAccess().getColorAssignment_8_2(), "rule__Node__ColorAssignment_8_2");
					put(grammarAccess.getNodeAccess().getStyleAssignment_9_2(), "rule__Node__StyleAssignment_9_2");
					put(grammarAccess.getBooleanAttributeAccess().getNegationAssignment_1(), "rule__BooleanAttribute__NegationAssignment_1");
					put(grammarAccess.getBooleanAttributeAccess().getAttAssignment_2(), "rule__BooleanAttribute__AttAssignment_2");
					put(grammarAccess.getEdgeAccess().getNameAssignment_1(), "rule__Edge__NameAssignment_1");
					put(grammarAccess.getEdgeAccess().getSourceAssignment_3(), "rule__Edge__SourceAssignment_3");
					put(grammarAccess.getEdgeAccess().getTargetAssignment_5(), "rule__Edge__TargetAssignment_5");
					put(grammarAccess.getEdgeAccess().getAttNameAssignment_9_1(), "rule__Edge__AttNameAssignment_9_1");
					put(grammarAccess.getEdgeAccess().getReferenceAssignment_10_2_0(), "rule__Edge__ReferenceAssignment_10_2_0");
					put(grammarAccess.getEdgeAccess().getLabelAssignment_10_3(), "rule__Edge__LabelAssignment_10_3");
					put(grammarAccess.getEdgeAccess().getSrc_decorationAssignment_11_2(), "rule__Edge__Src_decorationAssignment_11_2");
					put(grammarAccess.getEdgeAccess().getSrc_labelAssignment_12_2(), "rule__Edge__Src_labelAssignment_12_2");
					put(grammarAccess.getEdgeAccess().getTar_decorationAssignment_13_2(), "rule__Edge__Tar_decorationAssignment_13_2");
					put(grammarAccess.getEdgeAccess().getTar_labelAssignment_14_2(), "rule__Edge__Tar_labelAssignment_14_2");
					put(grammarAccess.getLevelAccess().getNameAssignment_1(), "rule__Level__NameAssignment_1");
					put(grammarAccess.getLevelAccess().getUpperAssignment_3(), "rule__Level__UpperAssignment_3");
					put(grammarAccess.getLevelAccess().getAttNameAssignment_6_1(), "rule__Level__AttNameAssignment_6_1");
					put(grammarAccess.getLevelAccess().getReferenceAssignment_7_2_0(), "rule__Level__ReferenceAssignment_7_2_0");
					put(grammarAccess.getLevelAccess().getLabelAssignment_7_3(), "rule__Level__LabelAssignment_7_3");
					put(grammarAccess.getLevelAccess().getSrc_decorationAssignment_8_2(), "rule__Level__Src_decorationAssignment_8_2");
					put(grammarAccess.getLevelAccess().getSrc_labelAssignment_9_2(), "rule__Level__Src_labelAssignment_9_2");
					put(grammarAccess.getLevelAccess().getTar_decorationAssignment_10_2(), "rule__Level__Tar_decorationAssignment_10_2");
					put(grammarAccess.getLevelAccess().getTar_labelAssignment_11_2(), "rule__Level__Tar_labelAssignment_11_2");
					put(grammarAccess.getContentAccess().getNameAssignment_1(), "rule__Content__NameAssignment_1");
					put(grammarAccess.getContentAccess().getNodenumAssignment_3_0(), "rule__Content__NodenumAssignment_3_0");
					put(grammarAccess.getContentAccess().getNodenumAssignment_3_1(), "rule__Content__NodenumAssignment_3_1");
					put(grammarAccess.getContentAccess().getInfoAssignment_4_0(), "rule__Content__InfoAssignment_4_0");
					put(grammarAccess.getContentAccess().getInfoAssignment_4_1(), "rule__Content__InfoAssignment_4_1");
					put(grammarAccess.getContentAccess().getAttNameAssignment_5_1(), "rule__Content__AttNameAssignment_5_1");
					put(grammarAccess.getContentAccess().getSymbolAssignment_6_2(), "rule__Content__SymbolAssignment_6_2");
					put(grammarAccess.getNodeEnumeratorAccess().getAttAssignment_1(), "rule__NodeEnumerator__AttAssignment_1");
					put(grammarAccess.getNodeEnumeratorAccess().getEnumeratorAssignment_3(), "rule__NodeEnumerator__EnumeratorAssignment_3");
					put(grammarAccess.getNodeEnumeratorAccess().getEnumeratorAssignment_4(), "rule__NodeEnumerator__EnumeratorAssignment_4");
					put(grammarAccess.getEnumeratorAccess().getLiteralAssignment_1(), "rule__Enumerator__LiteralAssignment_1");
					put(grammarAccess.getEnumeratorAccess().getValueAssignment_3(), "rule__Enumerator__ValueAssignment_3");
					put(grammarAccess.getInformationAccess().getTypeAssignment_1(), "rule__Information__TypeAssignment_1");
					put(grammarAccess.getInformationAccess().getAttAssignment_2_1(), "rule__Information__AttAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ModelDrawGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ModelDrawGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
