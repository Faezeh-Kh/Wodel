/**
 * generated by Xtext
 */
package wodeledu.dsls.scoping;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import manager.ModelManager;
import mutatext.Configuration;
import mutatext.Option;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.osgi.framework.Bundle;

/**
 * @author Pablo Gomez-Abajo
 * 
 * Scope provider for the mutaText language.
 */
@SuppressWarnings("all")
public class MutaTextScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * Option.type can refer to any EClass in the .ecore file.
   */
  public IScope scope_Option_type(final Option opt, final EReference ref) {
    try {
      IScope _xblockexpression = null;
      {
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/models/AppliedMutations.ecore");
        URL _resolve = FileLocator.resolve(fileURL);
        final String ecore = _resolve.getFile();
        List<EClass> _eClasses = this.getEClasses(ecore);
        _xblockexpression = Scopes.scopeFor(_eClasses);
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Option.object is an optional argument that can be any EClass in the metamodel.
   */
  public IScope scope_Option_object(final Option option, final EReference ref) {
    EObject _eContainer = option.eContainer();
    String _metamodel = ((Configuration) _eContainer).getMetamodel();
    List<EClass> _eClasses = this.getEClasses(_metamodel);
    return Scopes.scopeFor(_eClasses);
  }
  
  /**
   * It returns the list of classes defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EClass>
   */
  private List<EClass> getEClasses(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EPackage pck : metamodel) {
        EList<EClassifier> _eClassifiers = pck.getEClassifiers();
        for (final EClassifier cl : _eClassifiers) {
          if ((cl instanceof EClass)) {
            classes.add(((EClass) cl));
          }
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
