/*
 * generated by Xtext
 */
grammar InternalMutatorGraph;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mutatorgraph.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mutatorgraph.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mutatorgraph.services.MutatorGraphGrammarAccess;

}

@parser::members {

 	private MutatorGraphGrammarAccess grammarAccess;
 	
    public InternalMutatorGraphParser(TokenStream input, MutatorGraphGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MutatorGraph";	
   	}
   	
   	@Override
   	protected MutatorGraphGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMutatorGraph
entryRuleMutatorGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutatorGraphRule()); }
	 iv_ruleMutatorGraph=ruleMutatorGraph 
	 { $current=$iv_ruleMutatorGraph.current; } 
	 EOF 
;

// Rule MutatorGraph
ruleMutatorGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMutatorGraphAccess().getMutatorGraphAction_0(),
            $current);
    }
)	otherlv_1='metamodel' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMutatorGraphAccess().getMetamodelKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorGraphAccess().getMetamodelEStringParserRuleCall_2_0()); 
	    }
		lv_metamodel_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorGraphRule());
	        }
       		set(
       			$current, 
       			"metamodel",
        		lv_metamodel_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMutatorGraphRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMutatorGraphAccess().getNameEClassCrossReference_3_0()); 
	}

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMutatorGraphAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorGraphAccess().getTypeGraphTypeEnumRuleCall_5_0()); 
	    }
		lv_type_5_0=ruleGraphType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorGraphRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"GraphType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMutatorGraphAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorGraphAccess().getNodesNodeParserRuleCall_7_0()); 
	    }
		lv_nodes_7_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorGraphRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_7_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorGraphAccess().getEdgesEdgeParserRuleCall_8_0()); 
	    }
		lv_edges_8_0=ruleEdge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorGraphRule());
	        }
       		add(
       			$current, 
       			"edges",
        		lv_edges_8_0, 
        		"Edge");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMutatorGraphAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeAccess().getNodeAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getNameEClassCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getNegationNegationEnumRuleCall_3_0()); 
	    }
		lv_negation_3_0=ruleNegation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"negation",
        		lv_negation_3_0, 
        		"Negation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNodeAccess().getAttributeEAttributeCrossReference_4_0()); 
	}

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeAccess().getHyphenMinusGreaterThanSignKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getTypeNodeTypeEnumRuleCall_7_0()); 
	    }
		lv_type_7_0=ruleNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"NodeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeAccess().getCommaKeyword_8_0());
    }
	otherlv_9='shape' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNodeAccess().getShapeKeyword_8_1());
    }
	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNodeAccess().getEqualsSignKeyword_8_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getShapeNodeShapeEnumRuleCall_8_3_0()); 
	    }
		lv_shape_11_0=ruleNodeShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_11_0, 
        		"NodeShape");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	 iv_ruleEdge=ruleEdge 
	 { $current=$iv_ruleEdge.current; } 
	 EOF 
;

// Rule Edge
ruleEdge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEdgeAccess().getEdgeAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEdgeAccess().getNameEClassCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEdgeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getEdgeAccess().getSourceEReferenceCrossReference_3_0()); 
	}

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEdgeAccess().getCommaKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getEdgeAccess().getTargetEReferenceCrossReference_5_0()); 
	}

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEdgeAccess().getRightParenthesisKeyword_6());
    }
	otherlv_7='->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_7());
    }
	otherlv_8='edge' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEdgeAccess().getEdgeKeyword_8());
    }
	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEdgeAccess().getCommaKeyword_9());
    }
	otherlv_10='label' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEdgeAccess().getLabelKeyword_10());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getEdgeAccess().getEqualsSignKeyword_11());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getEdgeAccess().getLabelEReferenceCrossReference_12_0()); 
	}

)
))
;





// Rule GraphType
ruleGraphType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='diagram' 
	{
        $current = grammarAccess.getGraphTypeAccess().getDiagramEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGraphTypeAccess().getDiagramEnumLiteralDeclaration()); 
    }
);



// Rule Negation
ruleNegation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getNegationAccess().getNotEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNegationAccess().getNotEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='yes' 
	{
        $current = grammarAccess.getNegationAccess().getYesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNegationAccess().getYesEnumLiteralDeclaration_1()); 
    }
));



// Rule NodeType
ruleNodeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='node' 
	{
        $current = grammarAccess.getNodeTypeAccess().getNodeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNodeTypeAccess().getNodeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='markednode' 
	{
        $current = grammarAccess.getNodeTypeAccess().getMarkednodeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNodeTypeAccess().getMarkednodeEnumLiteralDeclaration_1()); 
    }
));



// Rule NodeShape
ruleNodeShape returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='circle' 
	{
        $current = grammarAccess.getNodeShapeAccess().getCircleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNodeShapeAccess().getCircleEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='doublecircle' 
	{
        $current = grammarAccess.getNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


