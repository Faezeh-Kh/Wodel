/**
 * generated by Xtext
 */
package org.mutatorgraph.scoping;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import manager.ModelManager;
import mutatorgraph.Edge;
import mutatorgraph.MutatorGraph;
import mutatorgraph.Node;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MutatorGraphScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Item_name(final MutatorGraph graph, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EClass> scope = new ArrayList<EClass>();
      String _metamodel = graph.getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      scope.addAll(_eClasses);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Item_name(final Node node, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EClass> scope = new ArrayList<EClass>();
      EObject _eContainer = node.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      scope.addAll(_eClasses);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Item_name(final Edge edge, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EClass> scope = new ArrayList<EClass>();
      EObject _eContainer = edge.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      scope.addAll(_eClasses);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Node_attribute(final Node node, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EAttribute> scope = new ArrayList<EAttribute>();
      EObject _eContainer = node.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      EClass _name = node.getName();
      String _name_1 = _name.getName();
      List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _name_1);
      scope.addAll(_eAttributes);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Edge_source(final Edge edge, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      EObject _eContainer = edge.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      EClass _name = edge.getName();
      String _name_1 = _name.getName();
      List<EReference> _eReferences = this.getEReferences(_metamodel, _name_1);
      scope.addAll(_eReferences);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Edge_target(final Edge edge, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      EObject _eContainer = edge.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      EClass _name = edge.getName();
      String _name_1 = _name.getName();
      List<EReference> _eReferences = this.getEReferences(_metamodel, _name_1);
      scope.addAll(_eReferences);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Edge_label(final Edge edge, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      EObject _eContainer = edge.eContainer();
      String _metamodel = ((MutatorGraph) _eContainer).getMetamodel();
      EClass _name = edge.getName();
      String _name_1 = _name.getName();
      List<EReference> _eReferences = this.getEReferences(_metamodel, _name_1);
      scope.addAll(_eReferences);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * It returns the list of classes defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EClass>
   */
  private List<EClass> getEClasses(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EPackage pck : metamodel) {
        EList<EClassifier> _eClassifiers = pck.getEClassifiers();
        for (final EClassifier cl : _eClassifiers) {
          if ((cl instanceof EClass)) {
            classes.add(((EClass) cl));
          }
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of attributes of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EAttribute> getEAttributes(final String metamodelFile, final String eclassName) {
    try {
      System.out.println((((("def private List<EAttribute> getEAttributes (String metamodelFile=" + metamodelFile) + ", String eclassName=") + eclassName) + ")"));
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllAttributes();
      } else {
        return new ArrayList<EAttribute>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of references of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EReference>
   */
  private List<EReference> getEReferences(final String metamodelFile, final String eclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllReferences();
      } else {
        return new ArrayList<EReference>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
