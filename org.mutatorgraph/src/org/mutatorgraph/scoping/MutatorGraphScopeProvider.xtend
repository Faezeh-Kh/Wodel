/*
 * generated by Xtext
 */
package org.mutatorgraph.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import java.util.List
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EPackage
import manager.ModelManager
import java.util.ArrayList
import org.eclipse.emf.ecore.EClassifier
import mutatorgraph.Item
import mutatorgraph.Node
import org.eclipse.emf.ecore.EAttribute
import mutatorgraph.MutatorGraph
import mutatorgraph.Edge

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class MutatorGraphScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_Item_name(MutatorGraph graph, EReference ref) {
		val scope = new ArrayList<EClass>()
		scope.addAll(getEClasses(graph.metamodel))
       	Scopes.scopeFor(scope)
	}
	
	def IScope scope_Item_name(Node node, EReference ref) {
		val scope = new ArrayList<EClass>()
		scope.addAll(getEClasses((node.eContainer as MutatorGraph).metamodel))
       	Scopes.scopeFor(scope)
	}

	def IScope scope_Item_name(Edge edge, EReference ref) {
		val scope = new ArrayList<EClass>()
		scope.addAll(getEClasses((edge.eContainer as MutatorGraph).metamodel))
       	Scopes.scopeFor(scope)
	}

	def IScope scope_Node_attribute(Node node, EReference ref) {
		val scope = new ArrayList<EAttribute>()
		scope.addAll(getEAttributes((node.eContainer as MutatorGraph).metamodel, node.name.name))
       	Scopes.scopeFor(scope)
	}
	
	def IScope scope_Edge_source(Edge edge, EReference ref) {
		val scope = new ArrayList<EReference>()
		scope.addAll(getEReferences((edge.eContainer as MutatorGraph).metamodel, edge.name.name))
       	Scopes.scopeFor(scope)
	}

	def IScope scope_Edge_target(Edge edge, EReference ref) {
		val scope = new ArrayList<EReference>()
		scope.addAll(getEReferences((edge.eContainer as MutatorGraph).metamodel, edge.name.name))
       	Scopes.scopeFor(scope)
	}

	def IScope scope_Edge_label(Edge edge, EReference ref) {
		val scope = new ArrayList<EReference>()
		scope.addAll(getEReferences((edge.eContainer as MutatorGraph).metamodel, edge.name.name))
       	Scopes.scopeFor(scope)
	}

	/** 
	 * It returns the list of classes defined in a meta-model.
	 * @param String file containing the metamodel
	 * @return List<EClass>
	 */
	 def private List<EClass> getEClasses (String metamodelFile) {
        val List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile)
        val List<EClass>   classes   = new ArrayList<EClass>()
        for (EPackage pck : metamodel)
          for (EClassifier cl : pck.EClassifiers)
            if (cl instanceof EClass)
           		classes.add(cl as EClass)
        return classes
	 }
	 
	 /**
	   * It return the list of attributes of a class.
	   * @param String file containing the metamodel
	   * @param String class name
	   * @return List<EAttribute> list of attributes
	   */ 
	 def private List<EAttribute> getEAttributes (String metamodelFile, String eclassName) {
	   	System.out.println("def private List<EAttribute> getEAttributes (String metamodelFile=" + metamodelFile + ", String eclassName=" + eclassName + ")")
	  	val List<EPackage>    metamodel  = ModelManager.loadMetaModel(metamodelFile)
	  	val EClass            eclass     = ModelManager.getObjectOfType(eclassName, metamodel) as EClass
	  	if (eclass!=null) {
	  		return eclass.EAllAttributes
		}
	  	else {
	  		return new ArrayList<EAttribute>()
	  	}
  	}

	/** 
	 * It returns the list of references of a class.
	 * @param String file containing the metamodel
	 * @param String class name
	 * @return List<EReference>
	 */
	 def private List<EReference> getEReferences (String metamodelFile, String eclassName) {
        val List<EPackage>   metamodel  = ModelManager.loadMetaModel(metamodelFile)
        val EClass            eclass     = ModelManager.getObjectOfType(eclassName, metamodel) as EClass
        if (eclass != null) {
        	return eclass.EAllReferences
        }
        else {
        	return new ArrayList<EReference>()
        }
	 }
}
