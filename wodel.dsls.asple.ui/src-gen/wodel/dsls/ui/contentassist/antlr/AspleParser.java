/*
 * generated by Xtext
 */
package wodel.dsls.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import wodel.dsls.services.AspleGrammarAccess;

public class AspleParser extends AbstractContentAssistParser {
	
	@Inject
	private AspleGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected wodel.dsls.ui.contentassist.antlr.internal.InternalAspleParser createParser() {
		wodel.dsls.ui.contentassist.antlr.internal.InternalAspleParser result = new wodel.dsls.ui.contentassist.antlr.internal.InternalAspleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getLoopAccess().getAlternatives(), "rule__Loop__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getOperatorAlternatives_2_0(), "rule__BinaryOperator__OperatorAlternatives_2_0");
					put(grammarAccess.getModeAccess().getAlternatives(), "rule__Mode__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_2(), "rule__Program__Group_2__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_4(), "rule__Declaration__Group_4__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
					put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
					put(grammarAccess.getDoubleAccess().getGroup(), "rule__Double__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup_8(), "rule__Conditional__Group_8__0");
					put(grammarAccess.getLoopAccess().getGroup_0(), "rule__Loop__Group_0__0");
					put(grammarAccess.getLoopAccess().getGroup_1(), "rule__Loop__Group_1__0");
					put(grammarAccess.getTransputAccess().getGroup(), "rule__Transput__Group__0");
					put(grammarAccess.getBinaryOperatorAccess().getGroup(), "rule__BinaryOperator__Group__0");
					put(grammarAccess.getProgramAccess().getDeclarationsAssignment_2_0(), "rule__Program__DeclarationsAssignment_2_0");
					put(grammarAccess.getProgramAccess().getStatementsAssignment_3(), "rule__Program__StatementsAssignment_3");
					put(grammarAccess.getDeclarationAccess().getRefAssignment_1(), "rule__Declaration__RefAssignment_1");
					put(grammarAccess.getDeclarationAccess().getModeAssignment_2(), "rule__Declaration__ModeAssignment_2");
					put(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_3(), "rule__Declaration__IdentifiersAssignment_3");
					put(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_4_1(), "rule__Declaration__IdentifiersAssignment_4_1");
					put(grammarAccess.getIdentifierAccess().getNameAssignment_1(), "rule__Identifier__NameAssignment_1");
					put(grammarAccess.getIntegerAccess().getValueAssignment_1(), "rule__Integer__ValueAssignment_1");
					put(grammarAccess.getBooleanAccess().getValueAssignment_1(), "rule__Boolean__ValueAssignment_1");
					put(grammarAccess.getDoubleAccess().getValueAssignment_1(), "rule__Double__ValueAssignment_1");
					put(grammarAccess.getAssignmentAccess().getVarAssignment_0(), "rule__Assignment__VarAssignment_0");
					put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
					put(grammarAccess.getConditionalAccess().getExpressionAssignment_3(), "rule__Conditional__ExpressionAssignment_3");
					put(grammarAccess.getConditionalAccess().getIfAssignment_6(), "rule__Conditional__IfAssignment_6");
					put(grammarAccess.getConditionalAccess().getElseAssignment_8_2(), "rule__Conditional__ElseAssignment_8_2");
					put(grammarAccess.getLoopAccess().getExpressionAssignment_0_3(), "rule__Loop__ExpressionAssignment_0_3");
					put(grammarAccess.getLoopAccess().getStatementsAssignment_0_6(), "rule__Loop__StatementsAssignment_0_6");
					put(grammarAccess.getLoopAccess().getStatementsAssignment_1_2(), "rule__Loop__StatementsAssignment_1_2");
					put(grammarAccess.getLoopAccess().getExpressionAssignment_1_6(), "rule__Loop__ExpressionAssignment_1_6");
					put(grammarAccess.getTransputAccess().getVarAssignment_2(), "rule__Transput__VarAssignment_2");
					put(grammarAccess.getTransputAccess().getExpressionAssignment_4(), "rule__Transput__ExpressionAssignment_4");
					put(grammarAccess.getBinaryOperatorAccess().getLeftAssignment_1(), "rule__BinaryOperator__LeftAssignment_1");
					put(grammarAccess.getBinaryOperatorAccess().getOperatorAssignment_2(), "rule__BinaryOperator__OperatorAssignment_2");
					put(grammarAccess.getBinaryOperatorAccess().getRightAssignment_3(), "rule__BinaryOperator__RightAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			wodel.dsls.ui.contentassist.antlr.internal.InternalAspleParser typedParser = (wodel.dsls.ui.contentassist.antlr.internal.InternalAspleParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AspleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AspleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
