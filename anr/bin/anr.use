model anr
class SecurityPolicy
end
class PolicyType
	attributes
		name : String
end
class RuleType
	attributes
		name : String
end
class ElementType
	attributes
		name : String
		hierarchy : Boolean
end
class Policy
	attributes
		name : String
end
class Rule
	attributes
		name : String
end
class Parameter
	attributes
		name : String
end
class Dummy
end
composition SecurityPolicyPolicyType between
	SecurityPolicy[*] role securitypolicypolicytype
	PolicyType[*] role policyTypes
end
composition SecurityPolicyPolicy between
	SecurityPolicy[*] role securitypolicypolicy
	Policy[*] role policies
end
composition PolicyTypeRuleType between
	PolicyType[*] role policytyperuletype
	RuleType[1..*] role ruleTypes
end
composition PolicyTypeElementType between
	PolicyType[*] role policytypeelementtype
	ElementType[1..*] role elementTypes
end
association RuleTypeElementType between
	RuleType[*] role ruletypeelementtype
	ElementType[1..*] role parameters
end
composition PolicyRule between
	Policy[*] role policyrule
	Rule[*] role rules
end
composition PolicyParameter between
	Policy[*] role policyparameter
	Parameter[*] role elements
end
association PolicyPolicyType between
	Policy[*] role policypolicytype
	PolicyType[1] role type
end
association RuleParameter between
	Rule[*] role ruleparameter
	Parameter[1..*] role parameters1
end
association RuleRuleType between
	Rule[*] role ruleruletype
	RuleType[1] role type1
end
composition ParameterParameter between
	Parameter[*] role parameterparameter
	Parameter[*] role children
end
association ParameterElementType between
	Parameter[*] role parameterelementtype
	ElementType[1] role type2
end
constraints
context Dummy
context Parameter inv single_container:
	Policy.allInstances()->collect(o | o.elements)->count(self) +
	Parameter.allInstances()->collect(o | o.children)->count(self) <= 1
context Parameter inv non_contains_itself_children:
not self.children->includes(self)
and
not self.children->exists(children1 |
if children1.oclIsKindOf(Parameter) then
	children1.oclAsType(Parameter).children->includes(self)
	 else false endif)
and
not self.children->exists(children2 |
if children2.oclIsKindOf(Parameter) then
	children2.oclAsType(Parameter).children->exists(children1 |
if children1.oclIsKindOf(Parameter) then
	children1.oclAsType(Parameter).children->includes(self)
	 else false endif)
	 else false endif)
and
not self.children->exists(children3 |
if children3.oclIsKindOf(Parameter) then
	children3.oclAsType(Parameter).children->exists(children2 |
if children2.oclIsKindOf(Parameter) then
	children2.oclAsType(Parameter).children->exists(children1 |
if children1.oclIsKindOf(Parameter) then
	children1.oclAsType(Parameter).children->includes(self)
	 else false endif)
	 else false endif)
	 else false endif)
and
not self.children->exists(children4 |
if children4.oclIsKindOf(Parameter) then
	children4.oclAsType(Parameter).children->exists(children3 |
if children3.oclIsKindOf(Parameter) then
	children3.oclAsType(Parameter).children->exists(children2 |
if children2.oclIsKindOf(Parameter) then
	children2.oclAsType(Parameter).children->exists(children1 |
if children1.oclIsKindOf(Parameter) then
	children1.oclAsType(Parameter).children->includes(self)
	 else false endif)
	 else false endif)
	 else false endif)
	 else false endif)
inv mut1 : PolicyType.allInstances()->forAll(p | p.name <> null)
inv mut2 : RuleType.allInstances()->forAll(r | r.name <> null)
inv mut3 : ElementType.allInstances()->forAll(e | e.name <> null)
inv mut4 : ElementType.allInstances()->forAll(e | e.hierarchy <> null)
inv mut5 : Policy.allInstances()->forAll(p | p.name <> null)
inv mut6 : Rule.allInstances()->forAll(r | r.name <> null)
inv mut7 : Parameter.allInstances()->forAll(p | p.name <> null)
inv mut8 : RuleType.allInstances()->size() > 0
inv mut9 : PolicyType.allInstances()->size() > 0
inv mut10 : Parameter.allInstances()->size() > 0
inv mut11 : Parameter.allInstances()->exists(p2 | RuleType.allInstances()->exists(r3 | r3.parameters->exists(e4 | e4 = p2.type2)))
inv mut12 : Policy.allInstances()->size() > 0
