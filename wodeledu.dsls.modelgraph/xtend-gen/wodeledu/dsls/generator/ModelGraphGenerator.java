/**
 * generated by Xtext
 */
package wodeledu.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import manager.ModelManager;
import manager.WodelContext;
import modelgraph.BooleanAttribute;
import modelgraph.Content;
import modelgraph.Decoration;
import modelgraph.Edge;
import modelgraph.Enumerator;
import modelgraph.Information;
import modelgraph.Level;
import modelgraph.MutatorGraph;
import modelgraph.Node;
import modelgraph.NodeColor;
import modelgraph.NodeEnumerator;
import modelgraph.NodeShape;
import modelgraph.NodeStyle;
import modelgraph.NodeType;
import modelgraph.Relation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ModelGraphGenerator implements IGenerator {
  private String fileName;
  
  private String className;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    int i = 0;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorGraph> _filter = Iterables.<MutatorGraph>filter(_iterable, MutatorGraph.class);
    for (final MutatorGraph e : _filter) {
      {
        if ((i == 0)) {
          URI _uRI = resource.getURI();
          String _lastSegment = _uRI.lastSegment();
          String _replace = _lastSegment.replace(".graph", "");
          String _plus = (_replace + "_Graph.java");
          this.fileName = _plus;
        } else {
          URI _uRI_1 = resource.getURI();
          String _lastSegment_1 = _uRI_1.lastSegment();
          String _replace_1 = _lastSegment_1.replace(".graph", "");
          String _plus_1 = (_replace_1 + Integer.valueOf(i));
          String _plus_2 = (_plus_1 + "_Graph.java");
          this.fileName = _plus_2;
        }
        String _replaceAll = this.fileName.replaceAll(".java", "");
        this.className = _replaceAll;
        CharSequence _compile = this.compile(e);
        fsa.generateFile(this.fileName, _compile);
        i++;
      }
    }
  }
  
  public CharSequence generate(final MutatorGraph graph, final String folder) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("HashMap<EObject, LabelStyle> dotnodes = new HashMap<EObject, LabelStyle>();");
    _builder.newLine();
    _builder.append("HashMap<String, ArrayList<HashMap<String, String>>> dotrels = new HashMap<String, ArrayList<HashMap<String, String>>>();");
    _builder.newLine();
    _builder.append("HashMap<String, ArrayList<String>> dottext = new HashMap<String, ArrayList<String>>();");
    _builder.newLine();
    _builder.append("ArrayList<String> dotcode = new ArrayList<String>();");
    _builder.newLine();
    {
      EList<Node> _nodes = graph.getNodes();
      boolean _notEquals = (!Objects.equal(_nodes, null));
      if (_notEquals) {
        {
          EList<Node> _nodes_1 = graph.getNodes();
          int _size = _nodes_1.size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("generateNodes(packages, model, dotnodes, dotrels);");
            _builder.newLine();
          }
        }
      }
    }
    {
      EList<Relation> _relations = graph.getRelations();
      boolean _notEquals_1 = (!Objects.equal(_relations, null));
      if (_notEquals_1) {
        {
          EList<Relation> _relations_1 = graph.getRelations();
          int _size_1 = _relations_1.size();
          boolean _greaterThan_1 = (_size_1 > 0);
          if (_greaterThan_1) {
            _builder.append("generateRelations(model, dotrels, dottext);");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("dotcode.add(\"digraph ");
    EClass _name = graph.getName();
    String _name_1 = _name.getName();
    _builder.append(_name_1, "");
    _builder.append(" {\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("for (EObject dotnode : dotnodes.keySet()) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (dotnodes.get(dotnode) != null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dotcode.add(dotnodes.get(dotnode).name.replaceAll(\"\'\", \"\") + \" [\" + dotnodes.get(dotnode).label.replaceAll(\"\'\", \"\") + \"];\\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("for (String dott : dottext.keySet()) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (dotrels.get(dott) == null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dotcode.add(dott + \";\\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dotrels.get(dott).size() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dotcode.add(dott + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String text : dottext.get(dott)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotcode.add(dott.replaceAll(\"\'\", \"\") + \" [\" + text.replaceAll(\"\'\", \"\") + \"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("dotcode.add(\"}\");");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Content content, final String hmname) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(content, null));
      if (_notEquals) {
        {
          boolean _and = false;
          EList<NodeEnumerator> _nodenum = content.getNodenum();
          boolean _notEquals_1 = (!Objects.equal(_nodenum, null));
          if (!_notEquals_1) {
            _and = false;
          } else {
            EList<NodeEnumerator> _nodenum_1 = content.getNodenum();
            int _size = _nodenum_1.size();
            boolean _greaterThan = (_size > 0);
            _and = _greaterThan;
          }
          if (_and) {
            {
              EList<NodeEnumerator> _nodenum_2 = content.getNodenum();
              for(final NodeEnumerator nodenum : _nodenum_2) {
                _builder.append("for (EAttribute attribute : obj.eClass().getEAllAttributes()) {");
                _builder.newLine();
                {
                  EAttribute _att = nodenum.getAtt();
                  boolean _notEquals_2 = (!Objects.equal(_att, null));
                  if (_notEquals_2) {
                    _builder.append("\t");
                    _builder.append("if (attribute.getName().equals(\"");
                    EAttribute _att_1 = nodenum.getAtt();
                    String _name = _att_1.getName();
                    _builder.append(_name, "\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t");
                    _builder.append("if (attribute.getName().equals(\"name\")) {");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("if (obj.eGet(attribute) != null) {");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("EObject o = (EObject) obj.eGet(attribute);");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("if (o instanceof EEnumLiteral) {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("EEnumLiteral lit = (EEnumLiteral) o;");
                _builder.newLine();
                {
                  boolean _and_1 = false;
                  EList<Enumerator> _enumerator = nodenum.getEnumerator();
                  boolean _notEquals_3 = (!Objects.equal(_enumerator, null));
                  if (!_notEquals_3) {
                    _and_1 = false;
                  } else {
                    EList<Enumerator> _enumerator_1 = nodenum.getEnumerator();
                    int _size_1 = _enumerator_1.size();
                    boolean _greaterThan_1 = (_size_1 > 0);
                    _and_1 = _greaterThan_1;
                  }
                  if (_and_1) {
                    {
                      EList<Enumerator> _enumerator_2 = nodenum.getEnumerator();
                      for(final Enumerator lit : _enumerator_2) {
                        _builder.append("\t\t\t\t");
                        _builder.append("if (lit.getLiteral().equals(\"");
                        EEnumLiteral _literal = lit.getLiteral();
                        String _name_1 = _literal.getName();
                        _builder.append(_name_1, "\t\t\t\t");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t");
                        _builder.append("\t");
                        _builder.append("text = ");
                        _builder.append(hmname, "\t\t\t\t\t");
                        _builder.append(".get(obj);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t");
                        _builder.append("\t");
                        _builder.append("text = text + \"");
                        String _value = lit.getValue();
                        _builder.append(_value, "\t\t\t\t\t");
                        _builder.append(" \";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t");
                        _builder.append("\t");
                        _builder.append(hmname, "\t\t\t\t\t");
                        _builder.append(".put(obj, text);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t");
                        _builder.append("break;");
                        _builder.newLine();
                        _builder.append("\t\t\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("break;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        {
          boolean _and_2 = false;
          EList<Information> _info = content.getInfo();
          boolean _notEquals_4 = (!Objects.equal(_info, null));
          if (!_notEquals_4) {
            _and_2 = false;
          } else {
            EList<Information> _info_1 = content.getInfo();
            int _size_2 = _info_1.size();
            boolean _greaterThan_2 = (_size_2 > 0);
            _and_2 = _greaterThan_2;
          }
          if (_and_2) {
            {
              EList<Information> _info_2 = content.getInfo();
              for(final Information info : _info_2) {
                _builder.append("for (EReference r : obj.eClass().getEAllReferences()) {");
                _builder.newLine();
                {
                  EReference _type = info.getType();
                  boolean _notEquals_5 = (!Objects.equal(_type, null));
                  if (_notEquals_5) {
                    _builder.append("\t");
                    _builder.append("if (r.getName().equals(\"");
                    EReference _type_1 = info.getType();
                    String _name_2 = _type_1.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t");
                    _builder.append("if (r.getName().equals(\"name\")) {");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("if (obj.eGet(r) != null) {");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("EObject o = (EObject) obj.eGet(r);");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("for (EAttribute attribute : o.eClass().getEAllAttributes()) {");
                _builder.newLine();
                {
                  EAttribute _att_2 = info.getAtt();
                  boolean _notEquals_6 = (!Objects.equal(_att_2, null));
                  if (_notEquals_6) {
                    _builder.append("\t\t\t\t");
                    _builder.append("if (attribute.getName().equals(\"");
                    EAttribute _att_3 = info.getAtt();
                    String _name_3 = _att_3.getName();
                    _builder.append(_name_3, "\t\t\t\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t\t\t");
                    _builder.append("if (attribute.getName().equals(\"name\")) {");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t\t\t");
                _builder.append("text = ");
                _builder.append(hmname, "\t\t\t\t\t");
                _builder.append(".get(obj);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t");
                _builder.append("text = text + (String) o.eGet(attribute) + \" \";");
                _builder.newLine();
                _builder.append("\t\t\t\t\t");
                _builder.append(hmname, "\t\t\t\t\t");
                _builder.append(".put(obj, text);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t");
                _builder.append("break;");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("break;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("for (EAttribute attribute : obj.eClass().getEAllAttributes()) {");
        _builder.newLine();
        {
          EAttribute _attName = content.getAttName();
          boolean _notEquals_7 = (!Objects.equal(_attName, null));
          if (_notEquals_7) {
            _builder.append("\t");
            _builder.append("if (attribute.getName().equals(\"");
            EAttribute _attName_1 = content.getAttName();
            String _name_4 = _attName_1.getName();
            _builder.append(_name_4, "\t");
            _builder.append("\")) {");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("if (attribute.getName().equals(\"name\")) {");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("text = ");
        _builder.append(hmname, "\t\t");
        _builder.append(".get(obj);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("text = text + (String) obj.eGet(attribute) + \" \";");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(hmname, "\t\t");
        _builder.append(".put(obj, text);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        {
          String _symbol = content.getSymbol();
          boolean _notEquals_8 = (!Objects.equal(_symbol, null));
          if (_notEquals_8) {
            _builder.append("text = ");
            _builder.append(hmname, "");
            _builder.append(".get(obj);");
            _builder.newLineIfNotEmpty();
            _builder.append("text = text + \"");
            String _symbol_1 = content.getSymbol();
            _builder.append(_symbol_1, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append(hmname, "");
            _builder.append(".put(obj, text);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence decorate(final Relation rel) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EAttribute _label = rel.getLabel();
      boolean _notEquals = (!Objects.equal(_label, null));
      if (_notEquals) {
        _builder.append("parameters.put(\"label\", label);");
        _builder.newLine();
      }
    }
    {
      Decoration _tar_decoration = rel.getTar_decoration();
      boolean _notEquals_1 = (!Objects.equal(_tar_decoration, Decoration.NONE));
      if (_notEquals_1) {
        _builder.append("if (parameters.containsKey(\"dir\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"dir\", \"both\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowtail\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowtail\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        {
          Decoration _tar_decoration_1 = rel.getTar_decoration();
          boolean _equals = Objects.equal(_tar_decoration_1, Decoration.TRIANGLE);
          if (_equals) {
            _builder.append("parameters.put(\"arrowhead\", \"empty\");");
            _builder.newLine();
          } else {
            {
              Decoration _tar_decoration_2 = rel.getTar_decoration();
              boolean _notEquals_2 = (!Objects.equal(_tar_decoration_2, Decoration.EMPTY));
              if (_notEquals_2) {
                _builder.append("parameters.put(\"arrowhead\", \"");
                Decoration _tar_decoration_3 = rel.getTar_decoration();
                _builder.append(_tar_decoration_3, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("parameters.put(\"arrowhead\", \"none\");");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    {
      EAttribute _tar_label = rel.getTar_label();
      boolean _notEquals_3 = (!Objects.equal(_tar_label, null));
      if (_notEquals_3) {
        _builder.append("if (parameters.containsKey(\"dir\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"dir\", \"both\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowhead\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowhead\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowtail\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowtail\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("parameters.put(\"headlabel\", tar_label);");
        _builder.newLine();
      }
    }
    {
      Decoration _src_decoration = rel.getSrc_decoration();
      boolean _notEquals_4 = (!Objects.equal(_src_decoration, Decoration.NONE));
      if (_notEquals_4) {
        _builder.append("if (parameters.containsKey(\"dir\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"dir\", \"both\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowhead\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowhead\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        {
          Decoration _src_decoration_1 = rel.getSrc_decoration();
          boolean _equals_1 = Objects.equal(_src_decoration_1, Decoration.TRIANGLE);
          if (_equals_1) {
            _builder.append("parameters.put(\"arrowtail\", \"empty\");");
            _builder.newLine();
          } else {
            {
              Decoration _src_decoration_2 = rel.getSrc_decoration();
              boolean _notEquals_5 = (!Objects.equal(_src_decoration_2, Decoration.EMPTY));
              if (_notEquals_5) {
                _builder.append("parameters.put(\"arrowtail\", \"");
                Decoration _src_decoration_3 = rel.getSrc_decoration();
                _builder.append(_src_decoration_3, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("parameters.put(\"arrowtail\", \"none\");");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    {
      EAttribute _src_label = rel.getSrc_label();
      boolean _notEquals_6 = (!Objects.equal(_src_label, null));
      if (_notEquals_6) {
        _builder.append("if (parameters.containsKey(\"dir\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"dir\", \"both\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowhead\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowhead\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("if (parameters.containsKey(\"arrowtail\") == false) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("parameters.put(\"arrowtail\", \"none\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("parameters.put(\"taillabel\", src_label);");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final MutatorGraph graph) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.lang.InterruptedException;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EEnumLiteral;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import exceptions.MetaModelNotFoundException;");
    _builder.newLine();
    _builder.append("import exceptions.ModelNotFoundException;");
    _builder.newLine();
    _builder.append("import manager.ModelManager;");
    _builder.newLine();
    _builder.append("import manager.DrawUtils.LabelStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.className, "");
    _builder.append(" implements manager.IMutatorGraph {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("   \t\t");
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _project = WodelContext.getProject();
    String folder = (_plus + _project);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Node> _nodes = graph.getNodes();
      boolean _notEquals = (!Objects.equal(_nodes, null));
      if (_notEquals) {
        {
          EList<Node> _nodes_1 = graph.getNodes();
          int _size = _nodes_1.size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("\t");
            _builder.append("private static void generateNodes(ArrayList<EPackage> packages, Resource model, HashMap<EObject, LabelStyle> dotnodes, HashMap<String, ArrayList<HashMap<String, String>>> dotrels) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("// COUNTER: ");
            int counter = 0;
            _builder.newLineIfNotEmpty();
            {
              EList<Node> _nodes_2 = graph.getNodes();
              for(final Node node : _nodes_2) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ArrayList<EObject> lnode_");
                _builder.append(counter, "\t\t");
                _builder.append(" = ModelManager.getObjectsOfType(\"");
                EClass _name = node.getName();
                String _name_1 = _name.getName();
                _builder.append(_name_1, "\t\t");
                _builder.append("\", model);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("for (EObject node : lnode_");
                _builder.append(counter, "\t\t");
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("LinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ArrayList<HashMap<String, String>> rels = new ArrayList<HashMap<String, String>>();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("String name = \"\";");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
                _builder.newLine();
                {
                  EAttribute _attName = node.getAttName();
                  boolean _notEquals_1 = (!Objects.equal(_attName, null));
                  if (_notEquals_1) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("if (att.getName().equals(\"");
                    EAttribute _attName_1 = node.getAttName();
                    String _name_2 = _attName_1.getName();
                    _builder.append(_name_2, "\t\t\t\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("if (att.getName().equals(\"name\")) {");
                    _builder.newLine();
                  }
                }
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("name = (String) node.eGet(att);");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("break;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  EList<BooleanAttribute> _attribute = node.getAttribute();
                  boolean _notEquals_2 = (!Objects.equal(_attribute, null));
                  if (_notEquals_2) {
                    {
                      EList<BooleanAttribute> _attribute_1 = node.getAttribute();
                      int _size_1 = _attribute_1.size();
                      boolean _greaterThan_1 = (_size_1 > 0);
                      if (_greaterThan_1) {
                        {
                          EList<BooleanAttribute> _attribute_2 = node.getAttribute();
                          for(final BooleanAttribute att : _attribute_2) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("if (att.getName().equals(\"");
                            EAttribute _att = att.getAtt();
                            String _name_3 = _att.getName();
                            _builder.append(_name_3, "\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("Boolean value = (Boolean) node.eGet(att);");
                            _builder.newLine();
                            {
                              boolean _isNegation = att.isNegation();
                              boolean _equals = (_isNegation == true);
                              if (_equals) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("if (value == false) {");
                                _builder.newLine();
                              } else {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("if (value == true) {");
                                _builder.newLine();
                              }
                            }
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t\t");
                            _builder.append("LabelStyle style = null;");
                            _builder.newLine();
                            {
                              NodeType _type = node.getType();
                              boolean _equals_1 = Objects.equal(_type, NodeType.MARKEDNODE);
                              if (_equals_1) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("{");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = new LabelStyle();");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style.name = \"_nil\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style.shape = \"style = invis\"; ");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("dotnodes.put(EcoreUtil.create(node.eClass()), style);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("if (dotnodes.containsKey(node) == false) {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = new LabelStyle();");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("else {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = dotnodes.get(node);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.name = name;");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.border = \"0\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.shape = \"shape = ");
                                NodeShape _shape = node.getShape();
                                _builder.append(_shape, "\t\t\t\t\t");
                                _builder.append("\";");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("dotnodes.put(node, style);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("rels.add(parameters);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("dotrels.put(\"_nil -> \" + name, rels);");
                                _builder.newLine();
                              }
                            }
                            {
                              NodeType _type_1 = node.getType();
                              boolean _equals_2 = Objects.equal(_type_1, NodeType.NODE);
                              if (_equals_2) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("if (dotnodes.containsKey(node) == false) {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = new LabelStyle();");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("else {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = dotnodes.get(node);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.name = name;");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.border = \"0\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.shape = \"shape = ");
                                NodeShape _shape_1 = node.getShape();
                                _builder.append(_shape_1, "\t\t\t\t\t");
                                _builder.append("\";");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("dotnodes.put(node, style);");
                                _builder.newLine();
                              }
                            }
                            {
                              NodeShape _shape_2 = node.getShape();
                              boolean _equals_3 = Objects.equal(_shape_2, NodeShape.RECORD);
                              if (_equals_3) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("if (dotnodes.containsKey(node) == false) {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = new LabelStyle();");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("else {");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("style = dotnodes.get(node);");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("}");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.name = name;");
                                _builder.newLine();
                                {
                                  NodeStyle _style = node.getStyle();
                                  boolean _equals_4 = Objects.equal(_style, NodeStyle.ITALIC);
                                  if (_equals_4) {
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t\t");
                                    _builder.append("style.style = \"I\";");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  NodeStyle _style_1 = node.getStyle();
                                  boolean _equals_5 = Objects.equal(_style_1, NodeStyle.UNDERLINE);
                                  if (_equals_5) {
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t\t");
                                    _builder.append("style.style = \"U\";");
                                    _builder.newLine();
                                  }
                                }
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.border = \"1\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("style.shape =\"shape = plaintext, style= filled, fillcolor=");
                                NodeColor _color = node.getColor();
                                _builder.append(_color, "\t\t\t\t\t");
                                _builder.append("\";");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t");
                                _builder.append("dotnodes.put(node, style);");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<EReference> _reference = node.getReference();
                              boolean _notEquals_3 = (!Objects.equal(_reference, null));
                              if (_notEquals_3) {
                                {
                                  EList<EReference> _reference_1 = node.getReference();
                                  int _size_2 = _reference_1.size();
                                  boolean _greaterThan_2 = (_size_2 > 0);
                                  if (_greaterThan_2) {
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t\t");
                                    _builder.append("HashMap<EObject, String> table = new HashMap<EObject, String>();");
                                    _builder.newLine();
                                    {
                                      EList<EReference> _reference_2 = node.getReference();
                                      for(final EReference ref : _reference_2) {
                                        {
                                          EList<Content> _contents = graph.getContents();
                                          boolean _notEquals_4 = (!Objects.equal(_contents, null));
                                          if (_notEquals_4) {
                                            {
                                              EList<Content> _contents_1 = graph.getContents();
                                              int _size_3 = _contents_1.size();
                                              boolean _greaterThan_3 = (_size_3 > 0);
                                              if (_greaterThan_3) {
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("for (EReference ref : node.eClass().getEAllReferences()) {");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("String label = \"\";");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("System.out.println(\"ref: \" + ref);");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("List<EClass> classes = null;");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("EClass cl = null;");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("if (ref.getName().equals(\"");
                                                String _name_4 = ref.getName();
                                                _builder.append(_name_4, "\t\t\t\t\t\t");
                                                _builder.append("\")) {");
                                                _builder.newLineIfNotEmpty();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t");
                                                _builder.append("//COUNT SET:");
                                                int count = 0;
                                                _builder.newLineIfNotEmpty();
                                                {
                                                  EList<Content> _contents_2 = graph.getContents();
                                                  for(final Content content : _contents_2) {
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("//COUNT INC: ");
                                                    int _plusPlus = count++;
                                                    _builder.append(_plusPlus, "\t\t\t\t\t\t\t");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("classes = new ArrayList<EClass>();");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("cl = ModelManager.getEClassByName(packages, \"");
                                                    EClass _name_5 = content.getName();
                                                    String _name_6 = _name_5.getName();
                                                    _builder.append(_name_6, "\t\t\t\t\t\t\t");
                                                    _builder.append("\");");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("classes.addAll(cl.getESuperTypes());");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("classes.add(cl);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("for (EClass c : classes) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t");
                                                    _builder.append("if (c.getName().equals(ref.getEType().getName())) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("String text = \"\";");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("if (ref.getUpperBound() < 0 || ref.getUpperBound() > 1) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("List<EObject> lobj = (List<EObject>) node.eGet(ref);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("if (lobj != null) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t");
                                                    _builder.append("for (EObject obj : lobj) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("if (obj != null) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("if (obj.eClass().getName().equals(\"");
                                                    EClass _name_7 = content.getName();
                                                    String _name_8 = _name_7.getName();
                                                    _builder.append(_name_8, "\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                                    _builder.append("\")) {");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("if (table.containsKey(obj) == false) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("table.put(obj, \"\");");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    CharSequence _compile = this.compile(content, "table");
                                                    _builder.append(_compile, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("if (label.length() > 0) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("if (label.endsWith(\"<TR>\") == true) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t\t");
                                                    _builder.append("label = label + \"<TD>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("else {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t\t");
                                                    _builder.append("label = label + \"<BR/>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("else {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t\t");
                                                    _builder.append("label = \"<TD>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("else {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("EObject obj = (EObject) node.eGet(ref);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("if (obj != null) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t");
                                                    _builder.append("if (obj.eClass().getName().equals(\"");
                                                    EClass _name_9 = content.getName();
                                                    String _name_10 = _name_9.getName();
                                                    _builder.append(_name_10, "\t\t\t\t\t\t\t\t\t\t\t");
                                                    _builder.append("\")) {");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("if (table.containsKey(obj) == false) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("table.put(obj, \"\");");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    CharSequence _compile_1 = this.compile(content, "table");
                                                    _builder.append(_compile_1, "\t\t\t\t\t\t\t\t\t\t\t\t");
                                                    _builder.newLineIfNotEmpty();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("if (label.length() > 0) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("if (label.endsWith(\"<TR>\") == true) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("label = label + \"<TD>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("else {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t\t");
                                                    _builder.append("label = label + \"<BR/>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("else {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t\t");
                                                    _builder.append("label = \"<TD>\" + table.get(obj);");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("if (label.length() > 0) {");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t");
                                                    _builder.append("label = label + \"</TD></TR><TR>\";");
                                                    _builder.newLine();
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("\t\t");
                                                    _builder.append("}");
                                                    _builder.newLine();
                                                  }
                                                }
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t");
                                                _builder.append("if (dotnodes.containsKey(node) == true) {");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t\t");
                                                _builder.append("if (dotnodes.get(node) != null) {");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t\t\t");
                                                _builder.append("style = dotnodes.get(node);");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t\t\t");
                                                _builder.append("style.label = style.label + label;");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t\t\t");
                                                _builder.append("dotnodes.put(node, style);");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t\t");
                                                _builder.append("}");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t\t");
                                                _builder.append("}");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("\t");
                                                _builder.append("}");
                                                _builder.newLine();
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t");
                                                _builder.append("\t\t");
                                                _builder.append("}");
                                                _builder.newLine();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("// INC COUNTER: ");
                _builder.append(counter = (counter + 1), "\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (EObject dotnode : dotnodes.keySet()) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("if (dotnodes.get(dotnode) != null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("LabelStyle style = dotnodes.get(dotnode);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("if (style.style.length() == 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("if (style.label.length() == 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("style.label = style.shape + \", label=<<TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"\" + style.border + \"\\\" CELLSPACING=\\\"0\\\"><TR><TD>\" + style.name + \"</TD></TR></TABLE>>\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (style.label.endsWith(\"<TR>\")) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("style.label = style.label.substring(0, style.label.length() - 4);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (style.label.endsWith(\"<TR></TD></TR>\")) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("style.label = style.label.substring(0, style.label.length() - 14);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("style.label = style.shape + \", label=<<TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"\" + style.border + \"\\\" CELLSPACING=\\\"0\\\"><TR><TD>\" + style.name + \"</TD></TR><TR>\" + style.label + \"</TABLE>>\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("if (style.label.length() == 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("style.label = style.shape + \", label=<<TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"\" + style.border + \"\\\" CELLSPACING=\\\"0\\\"><TR><TD><\" + style.style + \">\" + style.name + \"</\" + style.style + \"></TD></TR></TABLE>>\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (style.label.endsWith(\"<TR>\")) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("style.label = style.label.substring(0, style.label.length() - 4);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (style.label.endsWith(\"<TR></TD></TR>\")) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("style.label = style.label.substring(0, style.label.length() - 14);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("style.label = style.shape + \", label=<<TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"\" + style.border + \"\\\" CELLSPACING=\\\"0\\\"><TR><TD><\" + style.style + \">\" + style.name + \"</\" + style.style + \"></TD></TR><TR>\" + style.label + \"</TABLE>>\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("dotnodes.put(dotnode, style);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Relation> _relations = graph.getRelations();
      boolean _notEquals_5 = (!Objects.equal(_relations, null));
      if (_notEquals_5) {
        {
          EList<Relation> _relations_1 = graph.getRelations();
          int _size_4 = _relations_1.size();
          boolean _greaterThan_4 = (_size_4 > 0);
          if (_greaterThan_4) {
            _builder.append("\t");
            _builder.append("private static void generateRelations(Resource model, HashMap<String, ArrayList<HashMap<String, String>>> dotrels, HashMap<String, ArrayList<String>> dottext) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("// COUNTER: ");
            int counter_1 = 0;
            _builder.newLineIfNotEmpty();
            {
              EList<Relation> _relations_2 = graph.getRelations();
              for(final Relation rel : _relations_2) {
                {
                  if ((rel instanceof Edge)) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("//");
                    Edge edge = ((Edge) rel);
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ArrayList<EObject> ledge_");
                    _builder.append(counter_1, "\t\t");
                    _builder.append(" = ModelManager.getObjectsOfType(\"");
                    EClass _name_11 = edge.getName();
                    String _name_12 = _name_11.getName();
                    _builder.append(_name_12, "\t\t");
                    _builder.append("\", model);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (EObject edge : ledge_");
                    _builder.append(counter_1, "\t\t");
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("LinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ArrayList<HashMap<String, String>> rels = new ArrayList<HashMap<String, String>>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String source = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String target = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String label = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String src_label = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String tar_label = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (EReference ref : edge.eClass().getEAllReferences()) {");
                    _builder.newLine();
                    {
                      EReference _source = edge.getSource();
                      boolean _notEquals_6 = (!Objects.equal(_source, null));
                      if (_notEquals_6) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("if (ref.getName().equals(\"");
                        EReference _source_1 = edge.getSource();
                        String _name_13 = _source_1.getName();
                        _builder.append(_name_13, "\t\t\t\t");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("EObject src = (EObject) edge.eGet(ref);");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("if (src != null) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("for (EAttribute att : src.eClass().getEAllAttributes()) {");
                        _builder.newLine();
                        {
                          EAttribute _attName_2 = edge.getAttName();
                          boolean _notEquals_7 = (!Objects.equal(_attName_2, null));
                          if (_notEquals_7) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("if (att.getName().equals(\"");
                            EAttribute _attName_3 = edge.getAttName();
                            String _name_14 = _attName_3.getName();
                            _builder.append(_name_14, "\t\t\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("if (att.getName().equals(\"name\")) {");
                            _builder.newLine();
                          }
                        }
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t");
                        _builder.append("source = (String) src.eGet(att);");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t");
                        _builder.append("break;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                    {
                      EReference _target = edge.getTarget();
                      boolean _notEquals_8 = (!Objects.equal(_target, null));
                      if (_notEquals_8) {
                        _builder.append("\t");
                        _builder.append("if (ref.getName().equals(\"");
                        EReference _target_1 = edge.getTarget();
                        String _name_15 = _target_1.getName();
                        _builder.append(_name_15, "\t");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("EObject tar = (EObject) edge.eGet(ref);");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("if (tar != null) {");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("for (EAttribute att : tar.eClass().getEAllAttributes()) {");
                        _builder.newLine();
                        {
                          EAttribute _attName_4 = edge.getAttName();
                          boolean _notEquals_9 = (!Objects.equal(_attName_4, null));
                          if (_notEquals_9) {
                            _builder.append("\t\t\t\t");
                            _builder.append("if (att.getName().equals(\"");
                            EAttribute _attName_5 = edge.getAttName();
                            String _name_16 = _attName_5.getName();
                            _builder.append(_name_16, "\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t\t\t\t");
                            _builder.append("if (att.getName().equals(\"name\")) {");
                            _builder.newLine();
                          }
                        }
                        _builder.append("\t\t\t\t\t");
                        _builder.append("target = (String) tar.eGet(att);");
                        _builder.newLine();
                        _builder.append("\t\t\t\t\t");
                        _builder.append("break;");
                        _builder.newLine();
                        _builder.append("\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                    {
                      EReference _reference_3 = edge.getReference();
                      boolean _notEquals_10 = (!Objects.equal(_reference_3, null));
                      if (_notEquals_10) {
                        {
                          boolean _or = false;
                          boolean _or_1 = false;
                          EAttribute _label = edge.getLabel();
                          boolean _notEquals_11 = (!Objects.equal(_label, null));
                          if (_notEquals_11) {
                            _or_1 = true;
                          } else {
                            EAttribute _src_label = edge.getSrc_label();
                            boolean _notEquals_12 = (!Objects.equal(_src_label, null));
                            _or_1 = _notEquals_12;
                          }
                          if (_or_1) {
                            _or = true;
                          } else {
                            EAttribute _tar_label = edge.getTar_label();
                            boolean _notEquals_13 = (!Objects.equal(_tar_label, null));
                            _or = _notEquals_13;
                          }
                          if (_or) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("for (EReference ref : edge.eClass().getEAllReferences()) {");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("if (ref.getName().equals(\"");
                            EReference _reference_4 = edge.getReference();
                            String _name_17 = _reference_4.getName();
                            _builder.append(_name_17, "\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("EObject obj = (EObject) edge.eGet(ref);");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("if (obj != null) {");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t\t");
                            _builder.append("for (EAttribute att : obj.eClass().getEAllAttributes()) {");
                            _builder.newLine();
                            {
                              EAttribute _label_1 = edge.getLabel();
                              boolean _notEquals_14 = (!Objects.equal(_label_1, null));
                              if (_notEquals_14) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _label_2 = edge.getLabel();
                                String _name_18 = _label_2.getName();
                                _builder.append(_name_18, "\t\t\t\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("\t");
                                _builder.append("label = \"\\\"\" + (String) obj.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            {
                              EAttribute _src_label_1 = edge.getSrc_label();
                              boolean _notEquals_15 = (!Objects.equal(_src_label_1, null));
                              if (_notEquals_15) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _src_label_2 = edge.getSrc_label();
                                String _name_19 = _src_label_2.getName();
                                _builder.append(_name_19, "\t\t\t\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("\t");
                                _builder.append("src_label = \"\\\"\" + (String) obj.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            {
                              EAttribute _tar_label_1 = edge.getTar_label();
                              boolean _notEquals_16 = (!Objects.equal(_tar_label_1, null));
                              if (_notEquals_16) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _tar_label_2 = edge.getTar_label();
                                String _name_20 = _tar_label_2.getName();
                                _builder.append(_name_20, "\t\t\t\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("\t");
                                _builder.append("tar_label = \"\\\"\" + (String) obj.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t\t\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      } else {
                        {
                          boolean _or_2 = false;
                          boolean _or_3 = false;
                          EAttribute _label_3 = edge.getLabel();
                          boolean _notEquals_17 = (!Objects.equal(_label_3, null));
                          if (_notEquals_17) {
                            _or_3 = true;
                          } else {
                            EAttribute _src_label_3 = edge.getSrc_label();
                            boolean _notEquals_18 = (!Objects.equal(_src_label_3, null));
                            _or_3 = _notEquals_18;
                          }
                          if (_or_3) {
                            _or_2 = true;
                          } else {
                            EAttribute _tar_label_3 = edge.getTar_label();
                            boolean _notEquals_19 = (!Objects.equal(_tar_label_3, null));
                            _or_2 = _notEquals_19;
                          }
                          if (_or_2) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("for (EAttribute att : edge.eClass().getEAllAttributes()) {");
                            _builder.newLine();
                            {
                              EAttribute _label_4 = edge.getLabel();
                              boolean _notEquals_20 = (!Objects.equal(_label_4, null));
                              if (_notEquals_20) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _label_5 = edge.getLabel();
                                String _name_21 = _label_5.getName();
                                _builder.append(_name_21, "\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("label = \"\\\"\" + (String) edge.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            {
                              EAttribute _src_label_4 = edge.getSrc_label();
                              boolean _notEquals_21 = (!Objects.equal(_src_label_4, null));
                              if (_notEquals_21) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _src_label_5 = edge.getSrc_label();
                                String _name_22 = _src_label_5.getName();
                                _builder.append(_name_22, "\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("src_label = \"\\\"\" + (String) edge.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            {
                              EAttribute _tar_label_4 = edge.getTar_label();
                              boolean _notEquals_22 = (!Objects.equal(_tar_label_4, null));
                              if (_notEquals_22) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("if (att.getName().equals(\"");
                                EAttribute _tar_label_5 = edge.getTar_label();
                                String _name_23 = _tar_label_5.getName();
                                _builder.append(_name_23, "\t\t\t");
                                _builder.append("\")) {");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("tar_label = \"\\\"\" + (String) edge.eGet(att) + \"\\\"\";");
                                _builder.newLine();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    CharSequence _decorate = this.decorate(edge);
                    _builder.append(_decorate, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("if (dotrels.containsKey(source + \"->\" + target) == true) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("rels = dotrels.get(source + \"->\" + target);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("rels = new ArrayList<HashMap<String, String>>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("if (source.length() > 0 && target.length() > 0) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("rels.add(parameters);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("dotrels.put(source + \"->\" + target, rels);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                {
                  if ((rel instanceof Level)) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("//");
                    Level level = ((Level) rel);
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ArrayList<EObject> llevel_");
                    _builder.append(counter_1, "\t\t");
                    _builder.append(" = ModelManager.getObjectsOfType(\"");
                    EClass _name_24 = level.getName();
                    String _name_25 = _name_24.getName();
                    _builder.append(_name_25, "\t\t");
                    _builder.append("\", model);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (EObject level : llevel_");
                    _builder.append(counter_1, "\t\t");
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("LinkedHashMap<String, String> parameters = new LinkedHashMap<String, String>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ArrayList<HashMap<String, String>> rels = new ArrayList<HashMap<String, String>>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String source = \"\";");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ArrayList<String> target = new ArrayList<String>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (EAttribute att : level.eClass().getEAllAttributes()) {");
                    _builder.newLine();
                    {
                      EAttribute _attName_6 = level.getAttName();
                      boolean _notEquals_23 = (!Objects.equal(_attName_6, null));
                      if (_notEquals_23) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("if (att.getName().equals(\"");
                        EAttribute _attName_7 = level.getAttName();
                        String _name_26 = _attName_7.getName();
                        _builder.append(_name_26, "\t\t\t\t");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("if (att.getName().equals(\"name\")) {");
                        _builder.newLine();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("source = (String) level.eGet(att);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("break;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (EReference ref : level.eClass().getEAllReferences()) {");
                    _builder.newLine();
                    {
                      EReference _upper = level.getUpper();
                      boolean _notEquals_24 = (!Objects.equal(_upper, null));
                      if (_notEquals_24) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("if (ref.getName().equals(\"");
                        EReference _upper_1 = level.getUpper();
                        String _name_27 = _upper_1.getName();
                        _builder.append(_name_27, "\t\t\t\t");
                        _builder.append("\")) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("if (ref.getUpperBound() < 0 || ref.getUpperBound() > 1) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("List<EObject> ltar = (List<EObject>) level.eGet(ref);");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("if (ltar != null) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t");
                        _builder.append("for (EObject otar : ltar) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t");
                        _builder.append("if (otar != null) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t");
                        _builder.append("for (EAttribute att : otar.eClass().getEAllAttributes()) {");
                        _builder.newLine();
                        {
                          EAttribute _attName_8 = level.getAttName();
                          boolean _notEquals_25 = (!Objects.equal(_attName_8, null));
                          if (_notEquals_25) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t\t\t\t\t");
                            _builder.append("if (att.getName().equals(\"");
                            EAttribute _attName_9 = level.getAttName();
                            String _name_28 = _attName_9.getName();
                            _builder.append(_name_28, "\t\t\t\t\t\t\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t\t\t\t\t");
                            _builder.append("if (att.getName().equals(\"name\")) {");
                            _builder.newLine();
                          }
                        }
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t\t\t");
                        _builder.append("target.add((String) otar.eGet(att));");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t\t\t");
                        _builder.append("break;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("else {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("EObject tar = (EObject) level.eGet(ref);");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("if (tar != null) {");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t");
                        _builder.append("for (EAttribute att : tar.eClass().getEAllAttributes()) {");
                        _builder.newLine();
                        {
                          EAttribute _attName_10 = level.getAttName();
                          boolean _notEquals_26 = (!Objects.equal(_attName_10, null));
                          if (_notEquals_26) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t\t");
                            _builder.append("if (att.getName().equals(\"");
                            EAttribute _attName_11 = level.getAttName();
                            String _name_29 = _attName_11.getName();
                            _builder.append(_name_29, "\t\t\t\t\t\t\t");
                            _builder.append("\")) {");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\t\t\t");
                            _builder.append("if (att.getName().equals(\"name\")) {");
                            _builder.newLine();
                          }
                        }
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t");
                        _builder.append("target.add((String) tar.eGet(att));");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t\t");
                        _builder.append("break;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    CharSequence _decorate_1 = this.decorate(level);
                    _builder.append(_decorate_1, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("for (String tar : target) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("if ((source != null) && (tar != null)) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("if (source.length() > 0 && tar.length() > 0) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("if (dotrels.containsKey(source + \"->\" + tar) == true) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.append("rels = dotrels.get(source + \"->\" + tar);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.append("rels = new ArrayList<HashMap<String, String>>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("if (source.length() > 0 && tar.length() > 0) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.append("if (rels.contains(parameters) == false) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t\t");
                    _builder.append("rels.add(parameters);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t\t");
                    _builder.append("dotrels.put(source + \"->\" + tar, rels);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("// COUNTER: ");
                _builder.append(counter_1 = (counter_1 + 1), "\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (String relname : dotrels.keySet()) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("ArrayList<HashMap<String, String>> rels = dotrels.get(relname);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("for (HashMap<String, String> params : rels) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("int i = 0;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("String config = \"\";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("for (String key : params.keySet()) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("if (i == 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (params.get(key) != null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("if (params.get(key).length() > 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("config = key + \"=\" + params.get(key);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("i++;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (params.get(key) != null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("if (params.get(key).length() > 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("config = config + \", \" + key + \"=\" + params.get(key);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("i++;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("ArrayList<String> lconf = null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("if (dottext.containsKey(relname) == true) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("lconf = dottext.get(relname);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("lconf = new ArrayList<String>();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("lconf.add(config);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("dottext.put(relname, lconf);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void generateGraphs(File file, String folder, ArrayList<EPackage> packages, File exercise) throws ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("List<String> folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    CharSequence _generate = this.generate(graph, folder);
    _builder.append(_generate, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + path);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"path: \" + path);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, folder + \"/\" + file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void generate() throws MetaModelNotFoundException, ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String metamodel = \"");
    String _metaModel = ModelManager.getMetaModel();
    String _replace = _metaModel.replace("\\", "/");
    _builder.append(_replace, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("ArrayList<EPackage> packages = ModelManager.loadMetaModel(metamodel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES PNG FILES FROM SOURCE MODELS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("File folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/model\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File file : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    CharSequence _generate_1 = this.generate(graph, folder);
    _builder.append(_generate_1, "\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("File dotfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (dotfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES PNG FILES FROM MUTANTS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/out\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File exercise : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (exercise.isDirectory()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (File file : exercise.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    CharSequence _generate_2 = this.generate(graph, folder);
    _builder.append(_generate_2, "\t\t\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File dotfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (dotfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t    \t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
