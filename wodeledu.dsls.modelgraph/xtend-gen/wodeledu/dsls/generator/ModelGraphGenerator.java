/**
 * generated by Xtext
 */
package wodeledu.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import manager.ModelManager;
import manager.WodelContext;
import modelgraph.Edge;
import modelgraph.MutatorGraph;
import modelgraph.Node;
import modelgraph.NodeShape;
import modelgraph.NodeType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ModelGraphGenerator implements IGenerator {
  private String fileName;
  
  private String className;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    int i = 0;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorGraph> _filter = Iterables.<MutatorGraph>filter(_iterable, MutatorGraph.class);
    for (final MutatorGraph e : _filter) {
      {
        if ((i == 0)) {
          String _project = WodelContext.getProject();
          String _plus = (_project + "_Graph.java");
          this.fileName = _plus;
        } else {
          String _project_1 = WodelContext.getProject();
          String _plus_1 = (_project_1 + Integer.valueOf(i));
          String _plus_2 = (_plus_1 + "_Graph.java");
          this.fileName = _plus_2;
        }
        String _replaceAll = this.fileName.replaceAll(".java", "");
        this.className = _replaceAll;
        CharSequence _compile = this.compile(e);
        fsa.generateFile(this.fileName, _compile);
        i++;
      }
    }
  }
  
  public CharSequence compile(final MutatorGraph graph) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.lang.InterruptedException;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import exceptions.MetaModelNotFoundException;");
    _builder.newLine();
    _builder.append("import exceptions.ModelNotFoundException;");
    _builder.newLine();
    _builder.append("import manager.ModelManager;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.className, "");
    _builder.append(" implements manager.IMutatorGraph {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("   \t\t");
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _project = WodelContext.getProject();
    String folder = (_plus + _project);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void generateGraphs(File file, String folder, ArrayList<EPackage> packages, File exercise) throws ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("List<String> folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("HashMap<String, String> dotnodes = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("HashMap<String, String> dotedges = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// COUNTER: ");
    int counter = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Node> _nodes = graph.getNodes();
      for(final Node node : _nodes) {
        _builder.append("\t");
        _builder.append("ArrayList<EObject> lnode_");
        _builder.append(counter, "\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name = node.getName();
        String _name_1 = _name.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for (EObject node : lnode_");
        _builder.append(counter, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("String name = \"\";");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("name = (String) node.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (att.getName().equals(\"");
        EAttribute _attribute = node.getAttribute();
        String _name_2 = _attribute.getName();
        _builder.append(_name_2, "\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("Boolean value = (Boolean) node.eGet(att);");
        _builder.newLine();
        {
          boolean _isNegation = node.isNegation();
          boolean _equals = (_isNegation == true);
          if (_equals) {
            _builder.append("\t\t\t\t");
            _builder.append("if (value == false) {");
            _builder.newLine();
            {
              NodeType _type = node.getType();
              boolean _equals_1 = Objects.equal(_type, NodeType.MARKEDNODE);
              if (_equals_1) {
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape = node.getShape();
                  boolean _equals_2 = Objects.equal(_shape, NodeShape.DOUBLECIRCLE);
                  if (_equals_2) {
                    _builder.append("\t\t\t\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_1 = node.getShape();
                    _builder.append(_shape_1, "\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_2 = node.getShape();
                  boolean _equals_3 = Objects.equal(_shape_2, NodeShape.CIRCLE);
                  if (_equals_3) {
                    _builder.append("\t\t\t\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_3 = node.getShape();
                    _builder.append(_shape_3, "\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_1 = node.getType();
              boolean _equals_4 = Objects.equal(_type_1, NodeType.NODE);
              if (_equals_4) {
                {
                  NodeShape _shape_4 = node.getShape();
                  boolean _equals_5 = Objects.equal(_shape_4, NodeShape.DOUBLECIRCLE);
                  if (_equals_5) {
                    _builder.append("\t\t\t\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_5 = node.getShape();
                    _builder.append(_shape_5, "\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_6 = node.getShape();
                  boolean _equals_6 = Objects.equal(_shape_6, NodeShape.CIRCLE);
                  if (_equals_6) {
                    _builder.append("\t\t\t\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_7 = node.getShape();
                    _builder.append(_shape_7, "\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("\t");
            _builder.append("if (value == true) {");
            _builder.newLine();
            {
              NodeType _type_2 = node.getType();
              boolean _equals_7 = Objects.equal(_type_2, NodeType.MARKEDNODE);
              if (_equals_7) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape_8 = node.getShape();
                  boolean _equals_8 = Objects.equal(_shape_8, NodeShape.DOUBLECIRCLE);
                  if (_equals_8) {
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_9 = node.getShape();
                    _builder.append(_shape_9, "\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_10 = node.getShape();
                  boolean _equals_9 = Objects.equal(_shape_10, NodeShape.CIRCLE);
                  if (_equals_9) {
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_11 = node.getShape();
                    _builder.append(_shape_11, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_3 = node.getType();
              boolean _equals_10 = Objects.equal(_type_3, NodeType.NODE);
              if (_equals_10) {
                {
                  NodeShape _shape_12 = node.getShape();
                  boolean _equals_11 = Objects.equal(_shape_12, NodeShape.DOUBLECIRCLE);
                  if (_equals_11) {
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_13 = node.getShape();
                    _builder.append(_shape_13, "\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_14 = node.getShape();
                  boolean _equals_12 = Objects.equal(_shape_14, NodeShape.CIRCLE);
                  if (_equals_12) {
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_15 = node.getShape();
                    _builder.append(_shape_15, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("// COUNTER: ");
    _builder.append(counter = 0, "\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Edge> _edges = graph.getEdges();
      for(final Edge edge : _edges) {
        _builder.append("\t\t\t");
        _builder.append("ArrayList<EObject> ledge_");
        _builder.append(counter, "\t\t\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name_3 = edge.getName();
        String _name_4 = _name_3.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("for (EObject edge : ledge_");
        _builder.append(counter, "\t\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("String source = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("String target = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("String label = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("for (EReference ref : edge.eClass().getEAllReferences()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _source = edge.getSource();
        String _name_5 = _source.getName();
        _builder.append(_name_5, "\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject src = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : src.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("source = (String) src.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _target = edge.getTarget();
        String _name_6 = _target.getName();
        _builder.append(_name_6, "\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject tar = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : tar.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("target = (String) tar.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _label = edge.getLabel();
        String _name_7 = _label.getName();
        _builder.append(_name_7, "\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject lbl = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : lbl.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"");
        EReference _label_1 = edge.getLabel();
        String _name_8 = _label_1.getName();
        _builder.append(_name_8, "\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("label = (String) lbl.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("if (dotedges.containsKey(source + \" -> \" + target) == true) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("String prevlbl = dotedges.get(source + \" -> \" + target);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("label = prevlbl + \", \" + label;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("dotedges.put(source + \" -> \" + target, label);");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("ArrayList<String> dotcode = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dotcode.add(\"digraph ");
    EClass _name_9 = graph.getName();
    String _name_10 = _name_9.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append(" {\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("for (String dotnode : dotnodes.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (dotnodes.get(dotnode).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \" [\" + dotnodes.get(dotnode) + \"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String dotedge : dotedges.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (dotedges.get(dotedge).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \" [label = \\\"\" + dotedges.get(dotedge) + \"\\\"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dotcode.add(\"}\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("File exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + path);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"path: \" + path);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, folder + \"/\" + file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public void generate() throws MetaModelNotFoundException, ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String metamodel = \"");
    String _metaModel = ModelManager.getMetaModel();
    String _replace = _metaModel.replace("\\", "/");
    _builder.append(_replace, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ArrayList<EPackage> packages = ModelManager.loadMetaModel(metamodel);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// GENERATES PNG FILES FROM SOURCE MODELS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("File folder = new File(\"");
    _builder.append(folder, "\t");
    _builder.append("/model\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for (File file : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("HashMap<String, String> dotnodes = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("HashMap<String, String> dotedges = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// COUNTER: ");
    _builder.append(counter = 0, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Node> _nodes_1 = graph.getNodes();
      for(final Node node_1 : _nodes_1) {
        _builder.append("\t\t\t\t");
        _builder.append("ArrayList<EObject> lnode_");
        _builder.append(counter, "\t\t\t\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name_11 = node_1.getName();
        String _name_12 = _name_11.getName();
        _builder.append(_name_12, "\t\t\t\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("for (EObject node : lnode_");
        _builder.append(counter, "\t\t\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String name = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("name = (String) node.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (att.getName().equals(\"");
        EAttribute _attribute_1 = node_1.getAttribute();
        String _name_13 = _attribute_1.getName();
        _builder.append(_name_13, "\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("Boolean value = (Boolean) node.eGet(att);");
        _builder.newLine();
        {
          boolean _isNegation_1 = node_1.isNegation();
          boolean _equals_13 = (_isNegation_1 == true);
          if (_equals_13) {
            _builder.append("\t\t\t\t");
            _builder.append("\t\t\t");
            _builder.append("if (value == false) {");
            _builder.newLine();
            {
              NodeType _type_4 = node_1.getType();
              boolean _equals_14 = Objects.equal(_type_4, NodeType.MARKEDNODE);
              if (_equals_14) {
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape_16 = node_1.getShape();
                  boolean _equals_15 = Objects.equal(_shape_16, NodeShape.DOUBLECIRCLE);
                  if (_equals_15) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_17 = node_1.getShape();
                    _builder.append(_shape_17, "\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_18 = node_1.getShape();
                  boolean _equals_16 = Objects.equal(_shape_18, NodeShape.CIRCLE);
                  if (_equals_16) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_19 = node_1.getShape();
                    _builder.append(_shape_19, "\t\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_5 = node_1.getType();
              boolean _equals_17 = Objects.equal(_type_5, NodeType.NODE);
              if (_equals_17) {
                {
                  NodeShape _shape_20 = node_1.getShape();
                  boolean _equals_18 = Objects.equal(_shape_20, NodeShape.DOUBLECIRCLE);
                  if (_equals_18) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_21 = node_1.getShape();
                    _builder.append(_shape_21, "\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_22 = node_1.getShape();
                  boolean _equals_19 = Objects.equal(_shape_22, NodeShape.CIRCLE);
                  if (_equals_19) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_23 = node_1.getShape();
                    _builder.append(_shape_23, "\t\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t\t\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("\t\t\t\t");
            _builder.append("\t\t\t");
            _builder.append("if (value == true) {");
            _builder.newLine();
            {
              NodeType _type_6 = node_1.getType();
              boolean _equals_20 = Objects.equal(_type_6, NodeType.MARKEDNODE);
              if (_equals_20) {
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape_24 = node_1.getShape();
                  boolean _equals_21 = Objects.equal(_shape_24, NodeShape.DOUBLECIRCLE);
                  if (_equals_21) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_25 = node_1.getShape();
                    _builder.append(_shape_25, "\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_26 = node_1.getShape();
                  boolean _equals_22 = Objects.equal(_shape_26, NodeShape.CIRCLE);
                  if (_equals_22) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_27 = node_1.getShape();
                    _builder.append(_shape_27, "\t\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t\t");
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_7 = node_1.getType();
              boolean _equals_23 = Objects.equal(_type_7, NodeType.NODE);
              if (_equals_23) {
                {
                  NodeShape _shape_28 = node_1.getShape();
                  boolean _equals_24 = Objects.equal(_shape_28, NodeShape.DOUBLECIRCLE);
                  if (_equals_24) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_29 = node_1.getShape();
                    _builder.append(_shape_29, "\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_30 = node_1.getShape();
                  boolean _equals_25 = Objects.equal(_shape_30, NodeShape.CIRCLE);
                  if (_equals_25) {
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_31 = node_1.getShape();
                    _builder.append(_shape_31, "\t\t\t\t\t\t\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t");
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t\t\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("// COUNTER: ");
    _builder.append(counter = 0, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Edge> _edges_1 = graph.getEdges();
      for(final Edge edge_1 : _edges_1) {
        _builder.append("\t\t\t\t");
        _builder.append("ArrayList<EObject> ledge_");
        _builder.append(counter, "\t\t\t\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name_14 = edge_1.getName();
        String _name_15 = _name_14.getName();
        _builder.append(_name_15, "\t\t\t\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("for (EObject edge : ledge_");
        _builder.append(counter, "\t\t\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String source = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String target = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String label = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EReference ref : edge.eClass().getEAllReferences()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _source_1 = edge_1.getSource();
        String _name_16 = _source_1.getName();
        _builder.append(_name_16, "\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject src = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : src.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("source = (String) src.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _target_1 = edge_1.getTarget();
        String _name_17 = _target_1.getName();
        _builder.append(_name_17, "\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject tar = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : tar.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("target = (String) tar.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _label_2 = edge_1.getLabel();
        String _name_18 = _label_2.getName();
        _builder.append(_name_18, "\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject lbl = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : lbl.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"");
        EReference _label_3 = edge_1.getLabel();
        String _name_19 = _label_3.getName();
        _builder.append(_name_19, "\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("label = (String) lbl.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("if (dotedges.containsKey(source + \" -> \" + target) == true) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("String prevlbl = dotedges.get(source + \" -> \" + target);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("label = prevlbl + \", \" + label;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("dotedges.put(source + \" -> \" + target, label);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("ArrayList<String> dotcode = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotcode.add(\"digraph ");
    EClass _name_20 = graph.getName();
    String _name_21 = _name_20.getName();
    _builder.append(_name_21, "\t\t\t\t");
    _builder.append(" {\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("for (String dotnode : dotnodes.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (dotnodes.get(dotnode).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \" [\" + dotnodes.get(dotnode) + \"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (String dotedge : dotedges.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (dotedges.get(dotedge).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \" [label = \\\"\" + dotedges.get(dotedge) + \"\\\"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotcode.add(\"}\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File dotfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (dotfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// GENERATES PNG FILES FROM MUTANTS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("folder = new File(\"");
    _builder.append(folder, "\t");
    _builder.append("/out\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for (File exercise : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (exercise.isDirectory()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (File file : exercise.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String dotfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".dot\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("HashMap<String, String> dotnodes = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("HashMap<String, String> dotedges = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// COUNTER: ");
    _builder.append(counter = 0, "\t\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Node> _nodes_2 = graph.getNodes();
      for(final Node node_2 : _nodes_2) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("ArrayList<EObject> lnode_");
        _builder.append(counter, "\t\t\t\t\t\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name_22 = node_2.getName();
        String _name_23 = _name_22.getName();
        _builder.append(_name_23, "\t\t\t\t\t\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("for (EObject node : lnode_");
        _builder.append(counter, "\t\t\t\t\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("String name = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("name = (String) node.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EAttribute att : node.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (att.getName().equals(\"");
        EAttribute _attribute_2 = node_2.getAttribute();
        String _name_24 = _attribute_2.getName();
        _builder.append(_name_24, "\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("Boolean value = (Boolean) node.eGet(att);");
        _builder.newLine();
        {
          boolean _isNegation_2 = node_2.isNegation();
          boolean _equals_26 = (_isNegation_2 == true);
          if (_equals_26) {
            _builder.append("\t");
            _builder.append("if (value == false) {");
            _builder.newLine();
            {
              NodeType _type_8 = node_2.getType();
              boolean _equals_27 = Objects.equal(_type_8, NodeType.MARKEDNODE);
              if (_equals_27) {
                _builder.append("\t\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape_32 = node_2.getShape();
                  boolean _equals_28 = Objects.equal(_shape_32, NodeShape.DOUBLECIRCLE);
                  if (_equals_28) {
                    _builder.append("\t\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_33 = node_2.getShape();
                    _builder.append(_shape_33, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_34 = node_2.getShape();
                  boolean _equals_29 = Objects.equal(_shape_34, NodeShape.CIRCLE);
                  if (_equals_29) {
                    _builder.append("\t\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_35 = node_2.getShape();
                    _builder.append(_shape_35, "\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_9 = node_2.getType();
              boolean _equals_30 = Objects.equal(_type_9, NodeType.NODE);
              if (_equals_30) {
                {
                  NodeShape _shape_36 = node_2.getShape();
                  boolean _equals_31 = Objects.equal(_shape_36, NodeShape.DOUBLECIRCLE);
                  if (_equals_31) {
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_37 = node_2.getShape();
                    _builder.append(_shape_37, "\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_38 = node_2.getShape();
                  boolean _equals_32 = Objects.equal(_shape_38, NodeShape.CIRCLE);
                  if (_equals_32) {
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_39 = node_2.getShape();
                    _builder.append(_shape_39, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("if (value == true) {");
            _builder.newLine();
            {
              NodeType _type_10 = node_2.getType();
              boolean _equals_33 = Objects.equal(_type_10, NodeType.MARKEDNODE);
              if (_equals_33) {
                _builder.append("\t");
                _builder.append("if (dotnodes.containsKey(\"_nil\") == false) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("dotnodes.put(\"_nil\", \"style = invis\");");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                {
                  NodeShape _shape_40 = node_2.getShape();
                  boolean _equals_34 = Objects.equal(_shape_40, NodeShape.DOUBLECIRCLE);
                  if (_equals_34) {
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_41 = node_2.getShape();
                    _builder.append(_shape_41, "\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_42 = node_2.getShape();
                  boolean _equals_35 = Objects.equal(_shape_42, NodeShape.CIRCLE);
                  if (_equals_35) {
                    _builder.append("\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_43 = node_2.getShape();
                    _builder.append(_shape_43, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t");
                _builder.append("dotedges.put(\"_nil -> \" + name, \"\");");
                _builder.newLine();
              }
            }
            {
              NodeType _type_11 = node_2.getType();
              boolean _equals_36 = Objects.equal(_type_11, NodeType.NODE);
              if (_equals_36) {
                {
                  NodeShape _shape_44 = node_2.getShape();
                  boolean _equals_37 = Objects.equal(_shape_44, NodeShape.DOUBLECIRCLE);
                  if (_equals_37) {
                    _builder.append("\t\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_45 = node_2.getShape();
                    _builder.append(_shape_45, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  NodeShape _shape_46 = node_2.getShape();
                  boolean _equals_38 = Objects.equal(_shape_46, NodeShape.CIRCLE);
                  if (_equals_38) {
                    _builder.append("\t\t");
                    _builder.append("if (dotnodes.containsKey(name) == false) {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("dotnodes.put(name, \"shape = ");
                    NodeShape _shape_47 = node_2.getShape();
                    _builder.append(_shape_47, "\t\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// COUNTER: ");
    _builder.append(counter = 0, "\t\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Edge> _edges_2 = graph.getEdges();
      for(final Edge edge_2 : _edges_2) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("ArrayList<EObject> ledge_");
        _builder.append(counter, "\t\t\t\t\t\t");
        _builder.append(" = ModelManager.getObjectsOfType(\"");
        EClass _name_25 = edge_2.getName();
        String _name_26 = _name_25.getName();
        _builder.append(_name_26, "\t\t\t\t\t\t");
        _builder.append("\", model);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("for (EObject edge : ledge_");
        _builder.append(counter, "\t\t\t\t\t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("String source = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("String target = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("String label = \"\";");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("for (EReference ref : edge.eClass().getEAllReferences()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _source_2 = edge_2.getSource();
        String _name_27 = _source_2.getName();
        _builder.append(_name_27, "\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject src = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : src.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("source = (String) src.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _target_2 = edge_2.getTarget();
        String _name_28 = _target_2.getName();
        _builder.append(_name_28, "\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject tar = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : tar.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"name\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("target = (String) tar.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (ref.getName().equals(\"");
        EReference _label_4 = edge_2.getLabel();
        String _name_29 = _label_4.getName();
        _builder.append(_name_29, "\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("EObject lbl = (EObject) edge.eGet(ref);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (EAttribute att : lbl.eClass().getEAllAttributes()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("if (att.getName().equals(\"");
        EReference _label_5 = edge_2.getLabel();
        String _name_30 = _label_5.getName();
        _builder.append(_name_30, "\t\t\t\t\t\t\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("label = (String) lbl.eGet(att);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("if (dotedges.containsKey(source + \" -> \" + target) == true) {");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("String prevlbl = dotedges.get(source + \" -> \" + target);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("label = prevlbl + \", \" + label;");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("dotedges.put(source + \" -> \" + target, label);");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("// COUNTER: ");
        _builder.append(counter = (counter + 1), "\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t");
    _builder.append("ArrayList<String> dotcode = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(\"digraph ");
    EClass _name_31 = graph.getName();
    String _name_32 = _name_31.getName();
    _builder.append(_name_32, "\t\t\t\t\t\t");
    _builder.append(" {\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (String dotnode : dotnodes.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (dotnodes.get(dotnode).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotnode + \" [\" + dotnodes.get(dotnode) + \"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (String dotedge : dotedges.keySet()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (dotedges.get(dotedge).equals(\"\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \";\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("dotcode.add(dotedge + \" [label = \\\"\" + dotedges.get(dotedge) + \"\\\"];\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotcode.add(\"}\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("System.out.println(dotcode);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("System.out.println(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("File dotfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (dotfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("dotfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("PrintWriter dotwriter = new PrintWriter(dotfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (String dotline : dotcode) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("dotwriter.println(dotline);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("dotwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String[] command = {\"dot\", \"-Tpng\", dotfile, \"-o\", pngfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
