/**
 * generated by Xtext
 */
package wodeledu.dsls.validation;

import exceptions.MetaModelNotFoundException;
import java.util.List;
import manager.ModelManager;
import modelgraph.MutatorGraph;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Exceptions;
import wodeledu.dsls.validation.AbstractModelGraphValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ModelGraphValidator extends AbstractModelGraphValidator {
  public final static String INVALID_METAMODEL = "invalidMetamodel";
  
  private List<EPackage> packages;
  
  private String lastMetamodel = "";
  
  @Check
  public List<EPackage> checkMutatorGraphMetaModel(final MutatorGraph mutatorgraph) {
    List<EPackage> _xblockexpression = null;
    {
      String path = mutatorgraph.getMetamodel();
      List<EPackage> _xtrycatchfinallyexpression = null;
      try {
        List<EPackage> _xifexpression = null;
        boolean _equals = this.lastMetamodel.equals(path);
        boolean _not = (!_equals);
        if (_not) {
          List<EPackage> _xblockexpression_1 = null;
          {
            this.lastMetamodel = path;
            List<EPackage> _loadMetaModel = ModelManager.loadMetaModel(path);
            _xblockexpression_1 = this.packages = _loadMetaModel;
          }
          _xifexpression = _xblockexpression_1;
        }
        _xtrycatchfinallyexpression = _xifexpression;
      } catch (final Throwable _t) {
        if (_t instanceof MetaModelNotFoundException) {
          final MetaModelNotFoundException e = (MetaModelNotFoundException)_t;
          String _string = e.toString();
          this.error(_string, null, ModelGraphValidator.INVALID_METAMODEL);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xblockexpression = _xtrycatchfinallyexpression;
    }
    return _xblockexpression;
  }
}
