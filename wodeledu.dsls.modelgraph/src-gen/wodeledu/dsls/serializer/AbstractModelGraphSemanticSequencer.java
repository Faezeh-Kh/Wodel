/*
 * generated by Xtext
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import modelgraph.BooleanAttribute;
import modelgraph.Content;
import modelgraph.Edge;
import modelgraph.Enumerator;
import modelgraph.Information;
import modelgraph.Level;
import modelgraph.ModelgraphPackage;
import modelgraph.MutatorGraph;
import modelgraph.Node;
import modelgraph.NodeEnumerator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.ModelGraphGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractModelGraphSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelGraphGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ModelgraphPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ModelgraphPackage.BOOLEAN_ATTRIBUTE:
				sequence_BooleanAttribute(context, (BooleanAttribute) semanticObject); 
				return; 
			case ModelgraphPackage.CONTENT:
				sequence_Content(context, (Content) semanticObject); 
				return; 
			case ModelgraphPackage.EDGE:
				sequence_Edge(context, (Edge) semanticObject); 
				return; 
			case ModelgraphPackage.ENUMERATOR:
				sequence_Enumerator(context, (Enumerator) semanticObject); 
				return; 
			case ModelgraphPackage.INFORMATION:
				sequence_Information(context, (Information) semanticObject); 
				return; 
			case ModelgraphPackage.LEVEL:
				sequence_Level(context, (Level) semanticObject); 
				return; 
			case ModelgraphPackage.MUTATOR_GRAPH:
				sequence_MutatorGraph(context, (MutatorGraph) semanticObject); 
				return; 
			case ModelgraphPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case ModelgraphPackage.NODE_ENUMERATOR:
				sequence_NodeEnumerator(context, (NodeEnumerator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (negation?='not'? att=[EAttribute|ID])
	 */
	protected void sequence_BooleanAttribute(EObject context, BooleanAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         (nodenum+=NodeEnumerator nodenum+=NodeEnumerator*)? 
	 *         (info+=Information info+=Information*)? 
	 *         attName=[EAttribute|ID]? 
	 *         symbol=EString?
	 *     )
	 */
	protected void sequence_Content(EObject context, Content semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         source=[EReference|ID] 
	 *         target=[EReference|ID] 
	 *         attName=[EAttribute|ID]? 
	 *         (reference=[EReference|ID]? label=[EAttribute|ID])? 
	 *         src_decoration=Decoration? 
	 *         src_label=[EAttribute|ID]? 
	 *         tar_decoration=Decoration? 
	 *         tar_label=[EAttribute|ID]?
	 *     )
	 */
	protected void sequence_Edge(EObject context, Edge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (literal=[EEnumLiteral|ID] value=EString)
	 */
	protected void sequence_Enumerator(EObject context, Enumerator semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.ENUMERATOR__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.ENUMERATOR__LITERAL));
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.ENUMERATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.ENUMERATOR__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEnumeratorAccess().getLiteralEEnumLiteralIDTerminalRuleCall_1_0_1(), semanticObject.getLiteral());
		feeder.accept(grammarAccess.getEnumeratorAccess().getValueEStringParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=[EReference|ID] att=[EAttribute|ID]?)
	 */
	protected void sequence_Information(EObject context, Information semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         upper=[EReference|ID] 
	 *         attName=[EAttribute|ID]? 
	 *         (reference=[EReference|ID]? label=[EAttribute|ID])? 
	 *         src_decoration=Decoration? 
	 *         src_label=[EAttribute|ID]? 
	 *         tar_decoration=Decoration? 
	 *         tar_label=[EAttribute|ID]?
	 *     )
	 */
	protected void sequence_Level(EObject context, Level semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         metamodel=EString 
	 *         name=[EClass|ID] 
	 *         type=GraphType 
	 *         nodes+=Node* 
	 *         relations+=Relation* 
	 *         contents+=Content*
	 *     )
	 */
	protected void sequence_MutatorGraph(EObject context, MutatorGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (att=[EAttribute|ID] enumerator+=Enumerator enumerator+=Enumerator*)
	 */
	protected void sequence_NodeEnumerator(EObject context, NodeEnumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=[EClass|ID] 
	 *         (attribute+=BooleanAttribute attribute+=BooleanAttribute*)? 
	 *         type=NodeType 
	 *         attName=[EAttribute|ID]? 
	 *         (reference+=[EReference|ID] reference+=[EReference|ID]*)? 
	 *         shape=NodeShape? 
	 *         color=NodeColor? 
	 *         style=NodeStyle?
	 *     )
	 */
	protected void sequence_Node(EObject context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
