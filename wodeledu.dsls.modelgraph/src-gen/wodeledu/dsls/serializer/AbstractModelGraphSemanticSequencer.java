/*
 * generated by Xtext
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import modelgraph.Edge;
import modelgraph.ModelgraphPackage;
import modelgraph.MutatorGraph;
import modelgraph.Node;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.ModelGraphGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractModelGraphSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelGraphGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ModelgraphPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ModelgraphPackage.EDGE:
				sequence_Edge(context, (Edge) semanticObject); 
				return; 
			case ModelgraphPackage.MUTATOR_GRAPH:
				sequence_MutatorGraph(context, (MutatorGraph) semanticObject); 
				return; 
			case ModelgraphPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=[EClass|ID] source=[EReference|ID] target=[EReference|ID] label=[EReference|ID])
	 */
	protected void sequence_Edge(EObject context, Edge semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.ITEM__NAME));
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.EDGE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.EDGE__SOURCE));
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.EDGE__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.EDGE__TARGET));
			if(transientValues.isValueTransient(semanticObject, ModelgraphPackage.Literals.EDGE__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelgraphPackage.Literals.EDGE__LABEL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEdgeAccess().getNameEClassIDTerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.accept(grammarAccess.getEdgeAccess().getSourceEReferenceIDTerminalRuleCall_3_0_1(), semanticObject.getSource());
		feeder.accept(grammarAccess.getEdgeAccess().getTargetEReferenceIDTerminalRuleCall_5_0_1(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getEdgeAccess().getLabelEReferenceIDTerminalRuleCall_12_0_1(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (metamodel=EString name=[EClass|ID] type=GraphType nodes+=Node* edges+=Edge*)
	 */
	protected void sequence_MutatorGraph(EObject context, MutatorGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=[EClass|ID] negation?='not'? attribute=[EAttribute|ID] type=NodeType shape=NodeShape?)
	 */
	protected void sequence_Node(EObject context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
