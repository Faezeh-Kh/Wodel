/*
 * generated by Xtext
 */
package org.mutatortests.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mutatortests.services.TestsGrammarAccess;

public class TestsParser extends AbstractContentAssistParser {
	
	@Inject
	private TestsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mutatortests.ui.contentassist.antlr.internal.InternalTestsParser createParser() {
		org.mutatortests.ui.contentassist.antlr.internal.InternalTestsParser result = new org.mutatortests.ui.contentassist.antlr.internal.InternalTestsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
					put(grammarAccess.getMutatorTestsAccess().getGroup(), "rule__MutatorTests__Group__0");
					put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
					put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
					put(grammarAccess.getMutatorTestsAccess().getConfigAssignment_0(), "rule__MutatorTests__ConfigAssignment_0");
					put(grammarAccess.getMutatorTestsAccess().getTestsAssignment_1(), "rule__MutatorTests__TestsAssignment_1");
					put(grammarAccess.getConfigurationAccess().getRetryAssignment_2(), "rule__Configuration__RetryAssignment_2");
					put(grammarAccess.getConfigurationAccess().getShowallAssignment_6(), "rule__Configuration__ShowallAssignment_6");
					put(grammarAccess.getTestAccess().getSourceAssignment_2(), "rule__Test__SourceAssignment_2");
					put(grammarAccess.getTestAccess().getQuestionAssignment_4(), "rule__Test__QuestionAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mutatortests.ui.contentassist.antlr.internal.InternalTestsParser typedParser = (org.mutatortests.ui.contentassist.antlr.internal.InternalTestsParser) parser;
			typedParser.entryRuleMutatorTests();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TestsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TestsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
