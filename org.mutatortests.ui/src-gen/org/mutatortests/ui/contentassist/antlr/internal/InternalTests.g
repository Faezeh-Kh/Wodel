/*
 * generated by Xtext
 */
grammar InternalTests;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.mutatortests.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mutatortests.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.mutatortests.services.TestsGrammarAccess;

}

@parser::members {
 
 	private TestsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TestsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMutatorTests
entryRuleMutatorTests 
:
{ before(grammarAccess.getMutatorTestsRule()); }
	 ruleMutatorTests
{ after(grammarAccess.getMutatorTestsRule()); } 
	 EOF 
;

// Rule MutatorTests
ruleMutatorTests
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMutatorTestsAccess().getGroup()); }
(rule__MutatorTests__Group__0)
{ after(grammarAccess.getMutatorTestsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfiguration
entryRuleConfiguration 
:
{ before(grammarAccess.getConfigurationRule()); }
	 ruleConfiguration
{ after(grammarAccess.getConfigurationRule()); } 
	 EOF 
;

// Rule Configuration
ruleConfiguration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConfigurationAccess().getGroup()); }
(rule__Configuration__Group__0)
{ after(grammarAccess.getConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNoEnumLiteralDeclaration_0()); }
(	'no' 
)
{ after(grammarAccess.getParameterAccess().getNoEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getYesEnumLiteralDeclaration_1()); }
(	'yes' 
)
{ after(grammarAccess.getParameterAccess().getYesEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MutatorTests__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MutatorTests__Group__0__Impl
	rule__MutatorTests__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MutatorTests__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorTestsAccess().getConfigAssignment_0()); }
(rule__MutatorTests__ConfigAssignment_0)
{ after(grammarAccess.getMutatorTestsAccess().getConfigAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MutatorTests__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MutatorTests__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MutatorTests__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorTestsAccess().getTestsAssignment_1()); }
(rule__MutatorTests__TestsAssignment_1)*
{ after(grammarAccess.getMutatorTestsAccess().getTestsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Configuration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__0__Impl
	rule__Configuration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getRetryKeyword_0()); }

	'retry' 

{ after(grammarAccess.getConfigurationAccess().getRetryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__1__Impl
	rule__Configuration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getConfigurationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__2__Impl
	rule__Configuration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getRetryAssignment_2()); }
(rule__Configuration__RetryAssignment_2)
{ after(grammarAccess.getConfigurationAccess().getRetryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__3__Impl
	rule__Configuration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getConfigurationAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__4__Impl
	rule__Configuration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getShowallKeyword_4()); }

	'showall' 

{ after(grammarAccess.getConfigurationAccess().getShowallKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__5__Impl
	rule__Configuration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getEqualsSignKeyword_5()); }

	'=' 

{ after(grammarAccess.getConfigurationAccess().getEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getShowallAssignment_6()); }
(rule__Configuration__ShowallAssignment_6)
{ after(grammarAccess.getConfigurationAccess().getShowallAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getDescriptionKeyword_0()); }

	'description' 

{ after(grammarAccess.getTestAccess().getDescriptionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getForKeyword_1()); }

	'for' 

{ after(grammarAccess.getTestAccess().getForKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getSourceAssignment_2()); }
(rule__Test__SourceAssignment_2)
{ after(grammarAccess.getTestAccess().getSourceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getTestAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getQuestionAssignment_4()); }
(rule__Test__QuestionAssignment_4)
{ after(grammarAccess.getTestAccess().getQuestionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__MutatorTests__ConfigAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorTestsAccess().getConfigConfigurationParserRuleCall_0_0()); }
	ruleConfiguration{ after(grammarAccess.getMutatorTestsAccess().getConfigConfigurationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MutatorTests__TestsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutatorTestsAccess().getTestsTestParserRuleCall_1_0()); }
	ruleTest{ after(grammarAccess.getMutatorTestsAccess().getTestsTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__RetryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getRetryParameterEnumRuleCall_2_0()); }
	ruleParameter{ after(grammarAccess.getConfigurationAccess().getRetryParameterEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__ShowallAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getShowallParameterEnumRuleCall_6_0()); }
	ruleParameter{ after(grammarAccess.getConfigurationAccess().getShowallParameterEnumRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__SourceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getSourceEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getTestAccess().getSourceEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__QuestionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getQuestionEStringParserRuleCall_4_0()); }
	ruleEString{ after(grammarAccess.getTestAccess().getQuestionEStringParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


