/**
 * generated by Xtext
 */
package org.mutator.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import manager.ModelManager;
import manager.WodelContext;
import mutatorenvironment.AttributeCopy;
import mutatorenvironment.AttributeEvaluation;
import mutatorenvironment.AttributeInit;
import mutatorenvironment.AttributeReverse;
import mutatorenvironment.AttributeSet;
import mutatorenvironment.AttributeSwap;
import mutatorenvironment.AttributeType;
import mutatorenvironment.AttributeUnset;
import mutatorenvironment.BinaryOperator;
import mutatorenvironment.BooleanType;
import mutatorenvironment.CatEndStringType;
import mutatorenvironment.CatStartStringType;
import mutatorenvironment.CompleteTypeSelection;
import mutatorenvironment.CompositeMutator;
import mutatorenvironment.CreateObjectMutator;
import mutatorenvironment.CreateReferenceMutator;
import mutatorenvironment.Definition;
import mutatorenvironment.DoubleType;
import mutatorenvironment.Evaluation;
import mutatorenvironment.Expression;
import mutatorenvironment.IntegerType;
import mutatorenvironment.ListStringType;
import mutatorenvironment.LogicOperator;
import mutatorenvironment.LowerStringType;
import mutatorenvironment.ModifyInformationMutator;
import mutatorenvironment.ModifySourceReferenceMutator;
import mutatorenvironment.ModifyTargetReferenceMutator;
import mutatorenvironment.Mutator;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.ObSelectionStrategy;
import mutatorenvironment.ObjectEmitter;
import mutatorenvironment.Operator;
import mutatorenvironment.OtherTypeSelection;
import mutatorenvironment.Program;
import mutatorenvironment.RandomBooleanType;
import mutatorenvironment.RandomDoubleType;
import mutatorenvironment.RandomIntegerType;
import mutatorenvironment.RandomStringType;
import mutatorenvironment.RandomTypeSelection;
import mutatorenvironment.ReferenceEvaluation;
import mutatorenvironment.ReferenceInit;
import mutatorenvironment.ReferenceSet;
import mutatorenvironment.ReferenceSwap;
import mutatorenvironment.RemoveCompleteReferenceMutator;
import mutatorenvironment.RemoveObjectMutator;
import mutatorenvironment.RemoveRandomReferenceMutator;
import mutatorenvironment.RemoveSpecificReferenceMutator;
import mutatorenvironment.ReplaceStringType;
import mutatorenvironment.SelectObjectMutator;
import mutatorenvironment.Source;
import mutatorenvironment.SpecificBooleanType;
import mutatorenvironment.SpecificDoubleType;
import mutatorenvironment.SpecificIntegerType;
import mutatorenvironment.SpecificObjectSelection;
import mutatorenvironment.SpecificStringType;
import mutatorenvironment.StringType;
import mutatorenvironment.UpperStringType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.mutator.WodelUtils;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MutatorGenerator implements IGenerator {
  private int nMethod = 0;
  
  private int nCompositeMethod = 0;
  
  private int nRegistryMethod = 0;
  
  private int nCompositeRegistryMethod = 0;
  
  private ArrayList<String> compositeCommands;
  
  private ArrayList<String> compositeRegistryCommands;
  
  private int nCommands = 0;
  
  private int nMutation = 0;
  
  private int nRegistryMutation = 0;
  
  private int nCompositeCommands = 0;
  
  private int nExpression = 0;
  
  private ArrayList<Integer> expressionList;
  
  private int nReference = 0;
  
  private String methodName;
  
  private String registryMethodName;
  
  private String commandName;
  
  private String attributeName;
  
  private String referenceName;
  
  private String compositeMethodName;
  
  private String compositeRegistryMethodName;
  
  private String compositeCommandName;
  
  private boolean executeMutation = true;
  
  private String fileName;
  
  private String className;
  
  private String path;
  
  private String xmiFileName;
  
  private ArrayList<String> listNMuts;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _project = WodelContext.getProject();
    String _plus_1 = (_plus + _project);
    this.path = _plus_1;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorEnvironment> _filter = Iterables.<MutatorEnvironment>filter(_iterable, MutatorEnvironment.class);
    for (final MutatorEnvironment e : _filter) {
      {
        URI _uRI = resource.getURI();
        String _lastSegment = _uRI.lastSegment();
        this.fileName = _lastSegment;
        String _workspaceAbsolutePath_1 = ModelManager.getWorkspaceAbsolutePath();
        String _plus_2 = ("file:/" + _workspaceAbsolutePath_1);
        String _plus_3 = (_plus_2 + "/");
        String _project_1 = WodelContext.getProject();
        String _plus_4 = (_plus_3 + _project_1);
        String _plus_5 = (_plus_4 + "/src/");
        String xTextFileName = (_plus_5 + this.fileName);
        String _workspaceAbsolutePath_2 = ModelManager.getWorkspaceAbsolutePath();
        String _plus_6 = ("file:/" + _workspaceAbsolutePath_2);
        String _plus_7 = (_plus_6 + "/");
        String _project_2 = WodelContext.getProject();
        String _plus_8 = (_plus_7 + _project_2);
        String _plus_9 = (_plus_8 + "/");
        Definition _definition = ((MutatorEnvironment) e).getDefinition();
        String _output = ((Program) _definition).getOutput();
        String _plus_10 = (_plus_9 + _output);
        String _replaceAll = this.fileName.replaceAll("mutator", "model");
        String _plus_11 = (_plus_10 + _replaceAll);
        this.xmiFileName = _plus_11;
        WodelUtils.serialize(xTextFileName, this.xmiFileName);
        String _replaceAll_1 = this.fileName.replaceAll("mutator", "java");
        this.fileName = _replaceAll_1;
        String _replaceAll_2 = this.fileName.replaceAll(".java", "");
        this.className = _replaceAll_2;
        CharSequence _compile = this.compile(e);
        fsa.generateFile(this.fileName, _compile);
      }
    }
  }
  
  public CharSequence method(final Mutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private ArrayList<Mutator> ");
    _builder.append(this.methodName, "");
    _builder.append("(ArrayList<EPackage> packages, Resource model, HashMap<String, EObject> hmObjects, HashMap<String, List<EObject>> hmList) throws ReferenceNonExistingException {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ArrayList<Mutator> mutations = new ArrayList<Mutator>();");
    _builder.newLine();
    {
      if ((mut instanceof ModifyInformationMutator)) {
        _builder.append("//MODIFY INFORMATION ");
        _builder.append(this.methodName, "");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _object = ((ModifyInformationMutator)mut).getObject();
          if ((_object instanceof RandomTypeSelection)) {
            _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _object_1 = ((ModifyInformationMutator)mut).getObject();
            EClass _type = ((RandomTypeSelection) _object_1).getType();
            String _name = _type.getName();
            _builder.append(_name, "");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            {
              ObSelectionStrategy _object_2 = ((ModifyInformationMutator)mut).getObject();
              Expression _expression = _object_2.getExpression();
              boolean _equals = Objects.equal(_expression, null);
              if (_equals) {
                _builder.append("EObject object = rts.getObject();");
                _builder.newLine();
              } else {
                _builder.append("List<EObject> objects = rts.getObjects();");
                _builder.newLine();
                _builder.append("\t\t\t\t   \t");
                _builder.append("//EXPRESSION LIST: ");
                ArrayList<Integer> _arrayList = new ArrayList<Integer>();
                _builder.append(this.expressionList = _arrayList, "\t\t\t\t   \t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t   \t");
                _builder.append("//EXPRESSION LEVEL: ");
                _builder.append(this.nExpression = 0, "\t\t\t\t   \t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t   \t");
                _builder.append("//EXPRESSION LEVEL: ");
                boolean _add = this.expressionList.add(Integer.valueOf(0));
                _builder.append(_add, "\t\t\t\t   \t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t   \t");
                _builder.append("Expression exp");
                Integer _get = this.expressionList.get(0);
                _builder.append(_get, "\t\t\t\t   \t");
                _builder.append(" = new Expression();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t   \t");
                ObSelectionStrategy _object_3 = ((ModifyInformationMutator)mut).getObject();
                Expression _expression_1 = _object_3.getExpression();
                CharSequence _method = this.method(_expression_1);
                _builder.append(_method, "\t\t\t\t   \t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t   \t\t");
                _builder.append("List<EObject> selectedObjects = evaluate(objects, exp");
                Integer _get_1 = this.expressionList.get(0);
                _builder.append(_get_1, "\t\t\t   \t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("EObject object = null;");
                _builder.newLine();
                _builder.append("if (selectedObjects.size() > 0) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("ObSelectionStrategy objectSelection = null; ");
            _builder.newLine();
            _builder.append("if (object != null) {");
            _builder.newLine();
            {
              String _name_1 = ((ModifyInformationMutator)mut).getName();
              boolean _notEquals = (!Objects.equal(_name_1, null));
              if (_notEquals) {
                _builder.append("hmObjects.put(\"");
                String _name_2 = ((ModifyInformationMutator)mut).getName();
                _builder.append(_name_2, "");
                _builder.append("\", object);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("objectSelection = new SpecificObjectSelection(packages, model, object);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          } else {
            ObSelectionStrategy _object_4 = ((ModifyInformationMutator)mut).getObject();
            if ((_object_4 instanceof CompleteTypeSelection)) {
              _builder.append("CompleteTypeSelection cts = new CompleteTypeSelection(packages, model, \"");
              ObSelectionStrategy _object_5 = ((ModifyInformationMutator)mut).getObject();
              EClass _type_1 = ((CompleteTypeSelection) _object_5).getType();
              String _name_3 = _type_1.getName();
              _builder.append(_name_3, "");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("List<EObject> objects = cts.getObjects();");
              _builder.newLine();
              {
                String _name_4 = ((ModifyInformationMutator)mut).getName();
                boolean _notEquals_1 = (!Objects.equal(_name_4, null));
                if (_notEquals_1) {
                  _builder.append("hmList.put(\"");
                  String _name_5 = ((ModifyInformationMutator)mut).getName();
                  _builder.append(_name_5, "");
                  _builder.append("\", objects);");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("List<ObSelectionStrategy> listSelection = new ArrayList<ObSelectionStrategy>();");
              _builder.newLine();
              _builder.append("for (EObject obj : objects) {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("listSelection.add(objectSelection);");
              _builder.newLine();
              _builder.append("}");
              _builder.newLine();
            } else {
              ObSelectionStrategy _object_6 = ((ModifyInformationMutator)mut).getObject();
              if ((_object_6 instanceof SpecificObjectSelection)) {
                _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _object_7 = ((ModifyInformationMutator)mut).getObject();
                ObjectEmitter _objSel = ((SpecificObjectSelection) _object_7).getObjSel();
                String _name_6 = _objSel.getName();
                _builder.append(_name_6, "");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("HashMap<String, AttributeConfigurationStrategy> atts = new HashMap<String, AttributeConfigurationStrategy>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//COUNTER:");
        int counter = 0;
        _builder.newLineIfNotEmpty();
        {
          EList<AttributeSet> _attributes = ((ModifyInformationMutator)mut).getAttributes();
          for(final AttributeSet c : _attributes) {
            _builder.append("\t");
            _builder.append("//COUNTER:");
            int _plusPlus = counter++;
            _builder.append(_plusPlus, "\t");
            _builder.newLineIfNotEmpty();
            {
              EList<EAttribute> _attribute = c.getAttribute();
              EAttribute _get_2 = _attribute.get(0);
              boolean _notEquals_2 = (!Objects.equal(_get_2, null));
              if (_notEquals_2) {
                _builder.append("\t");
                EList<EAttribute> _attribute_1 = c.getAttribute();
                final EAttribute attribute = _attribute_1.get(0);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//NAME:");
                String _name_7 = attribute.getName();
                _builder.append(this.attributeName = _name_7, "\t");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("//NAME:");
                _builder.append(this.attributeName = "", "\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((c instanceof AttributeSwap)) {
                _builder.append("\t\t\t\t   \t");
                final AttributeSwap attributeSwap = ((AttributeSwap) c);
                _builder.newLineIfNotEmpty();
                {
                  ObSelectionStrategy _object_8 = attributeSwap.getObject();
                  boolean _notEquals_3 = (!Objects.equal(_object_8, null));
                  if (_notEquals_3) {
                    {
                      ObSelectionStrategy _object_9 = attributeSwap.getObject();
                      if ((_object_9 instanceof RandomTypeSelection)) {
                        _builder.append("atts.put(\"");
                        _builder.append(this.attributeName, "");
                        _builder.append("\", new SwapAttributeConfigurationStrategy(hmObjects.get(\"");
                        ObSelectionStrategy _object_10 = attributeSwap.getObject();
                        String _name_8 = ((RandomTypeSelection) _object_10).getName();
                        _builder.append(_name_8, "");
                        _builder.append("\"), \"");
                        ObSelectionStrategy _object_11 = attributeSwap.getObject();
                        EClass _type_2 = ((RandomTypeSelection) _object_11).getType();
                        String _name_9 = _type_2.getName();
                        _builder.append(_name_9, "");
                        _builder.append("\", \"");
                        EList<EAttribute> _attribute_2 = ((AttributeSwap)c).getAttribute();
                        EAttribute _get_3 = _attribute_2.get(0);
                        String _name_10 = _get_3.getName();
                        _builder.append(_name_10, "");
                        _builder.append("\", \"");
                        EList<EAttribute> _attribute_3 = ((AttributeSwap)c).getAttribute();
                        EAttribute _get_4 = _attribute_3.get(1);
                        String _name_11 = _get_4.getName();
                        _builder.append(_name_11, "");
                        _builder.append("\", model));");
                        _builder.newLineIfNotEmpty();
                      } else {
                        ObSelectionStrategy _object_12 = attributeSwap.getObject();
                        if ((_object_12 instanceof SpecificObjectSelection)) {
                          _builder.append("\t\t\t\t   \t");
                          _builder.append("if (objectSelection != null) {");
                          _builder.newLine();
                          _builder.append("\t\t\t\t   \t");
                          _builder.append("\t");
                          _builder.append("atts.put(\"");
                          _builder.append(this.attributeName, "\t\t\t\t   \t\t");
                          _builder.append("\", new SwapAttributeConfigurationStrategy(objectSelection.getObject(), hmObjects.get(\"");
                          ObSelectionStrategy _object_13 = attributeSwap.getObject();
                          ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _object_13).getObjSel();
                          String _name_12 = _objSel_1.getName();
                          _builder.append(_name_12, "\t\t\t\t   \t\t");
                          _builder.append("\"), \"");
                          EList<EAttribute> _attribute_4 = ((AttributeSwap)c).getAttribute();
                          EAttribute _get_5 = _attribute_4.get(0);
                          String _name_13 = _get_5.getName();
                          _builder.append(_name_13, "\t\t\t\t   \t\t");
                          _builder.append("\", \"");
                          EList<EAttribute> _attribute_5 = ((AttributeSwap)c).getAttribute();
                          EAttribute _get_6 = _attribute_5.get(1);
                          String _name_14 = _get_6.getName();
                          _builder.append(_name_14, "\t\t\t\t   \t\t");
                          _builder.append("\"));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t   \t\t\t\t");
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                    }
                  } else {
                    _builder.append("if (objectSelection != null) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("atts.put(\"");
                    _builder.append(this.attributeName, "\t");
                    _builder.append("\", new SwapAttributeConfigurationStrategy(objectSelection.getObject(), \"");
                    EList<EAttribute> _attribute_6 = ((AttributeSwap)c).getAttribute();
                    EAttribute _get_7 = _attribute_6.get(0);
                    String _name_15 = _get_7.getName();
                    _builder.append(_name_15, "\t");
                    _builder.append("\", \"");
                    EList<EAttribute> _attribute_7 = ((AttributeSwap)c).getAttribute();
                    EAttribute _get_8 = _attribute_7.get(1);
                    String _name_16 = _get_8.getName();
                    _builder.append(_name_16, "\t");
                    _builder.append("\"));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              } else {
                if ((c instanceof AttributeCopy)) {
                  final AttributeCopy attributeCopy = ((AttributeCopy) c);
                  _builder.newLineIfNotEmpty();
                  {
                    ObSelectionStrategy _object_14 = attributeCopy.getObject();
                    boolean _notEquals_4 = (!Objects.equal(_object_14, null));
                    if (_notEquals_4) {
                      {
                        ObSelectionStrategy _object_15 = attributeCopy.getObject();
                        if ((_object_15 instanceof RandomTypeSelection)) {
                          _builder.append("if (objectSelection != null) {");
                          _builder.newLine();
                          _builder.append("\t\t\t   \t\t\t\t\t");
                          _builder.append("atts.put(\"");
                          _builder.append(this.attributeName, "\t\t\t   \t\t\t\t\t");
                          _builder.append("\", new CopyAttributeConfigurationStrategy(objectSelection.getObject(), \"");
                          ObSelectionStrategy _object_16 = attributeCopy.getObject();
                          EClass _type_3 = ((RandomTypeSelection) _object_16).getType();
                          String _name_17 = _type_3.getName();
                          _builder.append(_name_17, "\t\t\t   \t\t\t\t\t");
                          _builder.append("\", \"");
                          EList<EAttribute> _attribute_8 = c.getAttribute();
                          EAttribute _get_9 = _attribute_8.get(0);
                          String _name_18 = _get_9.getName();
                          _builder.append(_name_18, "\t\t\t   \t\t\t\t\t");
                          _builder.append("\", \"");
                          EList<EAttribute> _attribute_9 = c.getAttribute();
                          EAttribute _get_10 = _attribute_9.get(1);
                          String _name_19 = _get_10.getName();
                          _builder.append(_name_19, "\t\t\t   \t\t\t\t\t");
                          _builder.append("\", model));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t   \t\t\t\t");
                          _builder.append("}");
                          _builder.newLine();
                        } else {
                          ObSelectionStrategy _object_17 = attributeCopy.getObject();
                          if ((_object_17 instanceof SpecificObjectSelection)) {
                            _builder.append("if (objectSelection != null) {");
                            _builder.newLine();
                            _builder.append("\t\t\t   \t\t\t\t\t");
                            _builder.append("atts.put(\"");
                            _builder.append(this.attributeName, "\t\t\t   \t\t\t\t\t");
                            _builder.append("\", new CopyAttributeConfigurationStrategy(objectSelection.getObject(), hmObjects.get(\"");
                            ObSelectionStrategy _object_18 = attributeCopy.getObject();
                            ObjectEmitter _objSel_2 = ((SpecificObjectSelection) _object_18).getObjSel();
                            String _name_20 = _objSel_2.getName();
                            _builder.append(_name_20, "\t\t\t   \t\t\t\t\t");
                            _builder.append("\"), \"");
                            EList<EAttribute> _attribute_10 = c.getAttribute();
                            EAttribute _get_11 = _attribute_10.get(0);
                            String _name_21 = _get_11.getName();
                            _builder.append(_name_21, "\t\t\t   \t\t\t\t\t");
                            _builder.append("\", \"");
                            EList<EAttribute> _attribute_11 = c.getAttribute();
                            EAttribute _get_12 = _attribute_11.get(1);
                            String _name_22 = _get_12.getName();
                            _builder.append(_name_22, "\t\t\t   \t\t\t\t\t");
                            _builder.append("\"));");
                            _builder.newLineIfNotEmpty();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    } else {
                      _builder.append("if (objectSelection != null) {");
                      _builder.newLine();
                      _builder.append("\t\t\t   \t\t\t\t\t");
                      _builder.append("atts.put(\"");
                      _builder.append(this.attributeName, "\t\t\t   \t\t\t\t\t");
                      _builder.append("\", new CopyAttributeConfigurationStrategy(objectSelection.getObject(), \"");
                      EList<EAttribute> _attribute_12 = c.getAttribute();
                      EAttribute _get_13 = _attribute_12.get(0);
                      String _name_23 = _get_13.getName();
                      _builder.append(_name_23, "\t\t\t   \t\t\t\t\t");
                      _builder.append("\", \"");
                      EList<EAttribute> _attribute_13 = c.getAttribute();
                      EAttribute _get_14 = _attribute_13.get(1);
                      String _name_24 = _get_14.getName();
                      _builder.append(_name_24, "\t\t\t   \t\t\t\t\t");
                      _builder.append("\"));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t   \t\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                } else {
                  CharSequence _method_1 = this.method(c);
                  _builder.append(_method_1, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.append("   \t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("HashMap<String, ReferenceConfigurationStrategy> refs = new HashMap<String, ReferenceConfigurationStrategy>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//COUNTER:");
        _builder.append(counter = 0, "\t");
        _builder.newLineIfNotEmpty();
        {
          EList<ReferenceSet> _references = ((ModifyInformationMutator)mut).getReferences();
          for(final ReferenceSet c_1 : _references) {
            _builder.append("\t");
            _builder.append("//COUNTER:");
            int _plusPlus_1 = counter++;
            _builder.append(_plusPlus_1, "\t");
            _builder.newLineIfNotEmpty();
            {
              EList<EReference> _reference = c_1.getReference();
              EReference _get_15 = _reference.get(0);
              boolean _notEquals_5 = (!Objects.equal(_get_15, null));
              if (_notEquals_5) {
                _builder.append("\t");
                EList<EReference> _reference_1 = c_1.getReference();
                final EReference reference = _reference_1.get(0);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//NAME:");
                String _name_25 = reference.getName();
                _builder.append(this.referenceName = _name_25, "\t");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("//NAME:");
                _builder.append(this.referenceName = "", "\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((c_1 instanceof ReferenceSwap)) {
                final ReferenceSwap referenceSwap = ((ReferenceSwap) c_1);
                _builder.newLineIfNotEmpty();
                {
                  ObSelectionStrategy _object_19 = referenceSwap.getObject();
                  boolean _notEquals_6 = (!Objects.equal(_object_19, null));
                  if (_notEquals_6) {
                    {
                      ObSelectionStrategy _object_20 = referenceSwap.getObject();
                      if ((_object_20 instanceof RandomTypeSelection)) {
                        _builder.append("refs.put(\"");
                        _builder.append(this.referenceName, "");
                        _builder.append("\", new SwapReferenceConfigurationStrategy(hmObjects.get(\"");
                        ObSelectionStrategy _object_21 = referenceSwap.getObject();
                        String _name_26 = ((RandomTypeSelection) _object_21).getName();
                        _builder.append(_name_26, "");
                        _builder.append("\"), \"");
                        ObSelectionStrategy _object_22 = referenceSwap.getObject();
                        EClass _type_4 = ((RandomTypeSelection) _object_22).getType();
                        String _name_27 = _type_4.getName();
                        _builder.append(_name_27, "");
                        _builder.append("\", \"");
                        EList<EReference> _reference_2 = ((ReferenceSwap)c_1).getReference();
                        EReference _get_16 = _reference_2.get(0);
                        String _name_28 = _get_16.getName();
                        _builder.append(_name_28, "");
                        _builder.append("\", \"");
                        EList<EReference> _reference_3 = ((ReferenceSwap)c_1).getReference();
                        EReference _get_17 = _reference_3.get(1);
                        String _name_29 = _get_17.getName();
                        _builder.append(_name_29, "");
                        _builder.append("\", model));");
                        _builder.newLineIfNotEmpty();
                      } else {
                        ObSelectionStrategy _object_23 = referenceSwap.getObject();
                        if ((_object_23 instanceof SpecificObjectSelection)) {
                          _builder.append("if (objectSelection != null) {");
                          _builder.newLine();
                          _builder.append("\t\t\t\t   \t\t\t\t");
                          _builder.append("refs.put(\"");
                          _builder.append(this.referenceName, "\t\t\t\t   \t\t\t\t");
                          _builder.append("\", new SwapReferenceConfigurationStrategy(objectSelection.getObject(), hmObjects.get(\"");
                          ObSelectionStrategy _object_24 = referenceSwap.getObject();
                          ObjectEmitter _objSel_3 = ((SpecificObjectSelection) _object_24).getObjSel();
                          String _name_30 = _objSel_3.getName();
                          _builder.append(_name_30, "\t\t\t\t   \t\t\t\t");
                          _builder.append("\"), \"");
                          EList<EReference> _reference_4 = ((ReferenceSwap)c_1).getReference();
                          EReference _get_18 = _reference_4.get(0);
                          String _name_31 = _get_18.getName();
                          _builder.append(_name_31, "\t\t\t\t   \t\t\t\t");
                          _builder.append("\", \"");
                          EList<EReference> _reference_5 = ((ReferenceSwap)c_1).getReference();
                          EReference _get_19 = _reference_5.get(1);
                          String _name_32 = _get_19.getName();
                          _builder.append(_name_32, "\t\t\t\t   \t\t\t\t");
                          _builder.append("\"));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                    }
                  } else {
                    _builder.append("if (objectSelection != null) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("refs.put(\"");
                    _builder.append(this.referenceName, "\t");
                    _builder.append("\", new SwapReferenceConfigurationStrategy(objectSelection.getObject(), \"");
                    EList<EReference> _reference_6 = ((ReferenceSwap)c_1).getReference();
                    EReference _get_20 = _reference_6.get(0);
                    String _name_33 = _get_20.getName();
                    _builder.append(_name_33, "\t");
                    _builder.append("\", \"");
                    EList<EReference> _reference_7 = ((ReferenceSwap)c_1).getReference();
                    EReference _get_21 = _reference_7.get(1);
                    String _name_34 = _get_21.getName();
                    _builder.append(_name_34, "\t");
                    _builder.append("\"));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t   \t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t   \t\t\t");
                _builder.newLine();
              }
            }
          }
        }
        {
          ObSelectionStrategy _object_25 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_25 instanceof CompleteTypeSelection)) {
            _builder.append("for (ObSelectionStrategy objectSelection : listSelection) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("ModifyInformationMutator mut = new ModifyInformationMutator(model, packages, objectSelection, atts, refs);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_2 = this.nMutation++;
            _builder.append(_plusPlus_2, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("if (objectSelection != null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("ModifyInformationMutator mut = new ModifyInformationMutator(model, packages, objectSelection, atts, refs);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_3 = this.nMutation++;
            _builder.append(_plusPlus_3, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("//END MODIFY INFORMATION ");
        _builder.append(this.methodName, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof CreateObjectMutator)) {
        _builder.append("\t");
        _builder.append("//CREATE OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _container = ((CreateObjectMutator)mut).getContainer();
          boolean _equals_1 = Objects.equal(_container, null);
          if (_equals_1) {
            _builder.append("\t");
            _builder.append("ArrayList<EObject> containers = ModelManager.getParentObjects(model, \"");
            EClass _type_5 = ((CreateObjectMutator)mut).getType();
            String _name_35 = _type_5.getName();
            _builder.append(_name_35, "\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("EObject container = containers.get(ModelManager.getRandomIndex(containers));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
            _builder.newLine();
          } else {
            {
              ObSelectionStrategy _container_1 = ((CreateObjectMutator)mut).getContainer();
              if ((_container_1 instanceof RandomTypeSelection)) {
                _builder.append("\t");
                _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
                ObSelectionStrategy _container_2 = ((CreateObjectMutator)mut).getContainer();
                EClass _type_6 = ((RandomTypeSelection) _container_2).getType();
                String _name_36 = _type_6.getName();
                _builder.append(_name_36, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("EObject container = rts.getObject();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
                _builder.newLine();
              }
            }
            {
              ObSelectionStrategy _container_3 = ((CreateObjectMutator)mut).getContainer();
              if ((_container_3 instanceof CompleteTypeSelection)) {
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
                ObSelectionStrategy _container_4 = ((CreateObjectMutator)mut).getContainer();
                EClass _type_7 = ((CompleteTypeSelection) _container_4).getType();
                String _name_37 = _type_7.getName();
                _builder.append(_name_37, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("EObject container = rts.getObject();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
                _builder.newLine();
              }
            }
            {
              ObSelectionStrategy _container_5 = ((CreateObjectMutator)mut).getContainer();
              if ((_container_5 instanceof SpecificObjectSelection)) {
                _builder.append("\t");
                _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _container_6 = ((CreateObjectMutator)mut).getContainer();
                ObjectEmitter _objSel_4 = ((SpecificObjectSelection) _container_6).getObjSel();
                String _name_38 = _objSel_4.getName();
                _builder.append(_name_38, "\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EReference _refType = ((CreateObjectMutator)mut).getRefType();
          boolean _notEquals_7 = (!Objects.equal(_refType, null));
          if (_notEquals_7) {
            _builder.append("\t");
            _builder.append("SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, \"");
            EReference _refType_1 = ((CreateObjectMutator)mut).getRefType();
            String _name_39 = _refType_1.getName();
            _builder.append(_name_39, "\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            {
              ObSelectionStrategy _container_7 = ((CreateObjectMutator)mut).getContainer();
              if ((_container_7 instanceof SpecificObjectSelection)) {
                _builder.append(" hmObjects.get(\"");
                ObSelectionStrategy _container_8 = ((CreateObjectMutator)mut).getContainer();
                ObjectEmitter _objSel_5 = ((SpecificObjectSelection) _container_8).getObjSel();
                String _name_40 = _objSel_5.getName();
                _builder.append(_name_40, "\t");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
              } else {
                _builder.append(" containerSelection");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("HashMap<String, AttributeConfigurationStrategy> atts = new HashMap<String, AttributeConfigurationStrategy>();");
        _builder.newLine();
        {
          EList<AttributeSet> _attributes_1 = ((CreateObjectMutator)mut).getAttributes();
          for(final AttributeSet c_2 : _attributes_1) {
            _builder.append("\t");
            CharSequence _method_2 = this.method(c_2);
            _builder.append(_method_2, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("HashMap<String, ObSelectionStrategy> refs = new HashMap<String, ObSelectionStrategy>();");
        _builder.newLine();
        {
          EList<ReferenceSet> _references_1 = ((CreateObjectMutator)mut).getReferences();
          for(final ReferenceSet c_3 : _references_1) {
            _builder.append("\t");
            CharSequence _method_3 = this.method(c_3);
            _builder.append(_method_3, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("CreateObjectMutator mut = new CreateObjectMutator(model, packages, referenceSelection, containerSelection, atts, refs, \"");
        EClass _type_8 = ((CreateObjectMutator)mut).getType();
        String _name_41 = _type_8.getName();
        _builder.append(_name_41, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_4 = this.nMutation++;
        _builder.append(_plusPlus_4, "\t\t\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t\t\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//END CREATE OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof SelectObjectMutator)) {
        _builder.append("\t");
        _builder.append("//SELECT OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _object_26 = ((SelectObjectMutator)mut).getObject();
          if ((_object_26 instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _object_27 = ((SelectObjectMutator)mut).getObject();
            EClass _type_9 = ((RandomTypeSelection) _object_27).getType();
            String _name_42 = _type_9.getName();
            _builder.append(_name_42, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            {
              ObSelectionStrategy _object_28 = ((SelectObjectMutator)mut).getObject();
              Expression _expression_2 = _object_28.getExpression();
              boolean _equals_2 = Objects.equal(_expression_2, null);
              if (_equals_2) {
                _builder.append("\t\t");
                _builder.append("EObject object = rts.getObject();");
                _builder.newLine();
              } else {
                _builder.append("\t\t");
                _builder.append("List<EObject> objects = rts.getObjects();");
                _builder.newLine();
                _builder.append("\t   \t\t\t\t\t");
                _builder.append("//EXPRESSION LIST: ");
                ArrayList<Integer> _arrayList_1 = new ArrayList<Integer>();
                _builder.append(this.expressionList = _arrayList_1, "\t   \t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t   \t\t\t\t\t");
                _builder.append("//EXPRESSION LEVEL: ");
                _builder.append(this.nExpression = 0, "\t   \t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t   \t\t\t\t\t");
                _builder.append("//EXPRESSION LEVEL: ");
                boolean _add_1 = this.expressionList.add(Integer.valueOf(0));
                _builder.append(_add_1, "\t   \t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t   \t\t\t\t\t");
                _builder.append("Expression exp");
                Integer _get_22 = this.expressionList.get(0);
                _builder.append(_get_22, "\t   \t\t\t\t\t");
                _builder.append(" = new Expression();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t   \t\t\t\t\t");
                ObSelectionStrategy _object_29 = ((SelectObjectMutator)mut).getObject();
                Expression _expression_3 = _object_29.getExpression();
                CharSequence _method_4 = this.method(_expression_3);
                _builder.append(_method_4, "\t   \t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t\t\t");
                _builder.append("List<EObject> selectedObjects = evaluate(objects, exp");
                Integer _get_23 = this.expressionList.get(0);
                _builder.append(_get_23, "   \t\t\t\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("EObject object = null;");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("if (selectedObjects.size() > 0) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("ObSelectionStrategy objectSelection = null; ");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if (object != null) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("objectSelection = new SpecificObjectSelection(packages, model, object);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            ObSelectionStrategy _object_30 = ((SelectObjectMutator)mut).getObject();
            if ((_object_30 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
              ObSelectionStrategy _object_31 = ((SelectObjectMutator)mut).getObject();
              EClass _type_10 = ((RandomTypeSelection) _object_31).getType();
              String _name_43 = _type_10.getName();
              _builder.append(_name_43, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("EObject object = rts.getObject();");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object»);");
              _builder.newLine();
            } else {
              ObSelectionStrategy _object_32 = ((SelectObjectMutator)mut).getObject();
              if ((_object_32 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _object_33 = ((SelectObjectMutator)mut).getObject();
                ObjectEmitter _objSel_6 = ((SpecificObjectSelection) _object_33).getObjSel();
                String _name_44 = _objSel_6.getName();
                _builder.append(_name_44, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ArrayList<EObject> objects = ModelManager.getParentObjects(model, \"");
                EClass _type_11 = ((SelectObjectMutator)mut).getType();
                String _name_45 = _type_11.getName();
                _builder.append(_name_45, "\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("EObject container = containers.get(ModelManager.getRandomIndex(objects));");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        {
          ObSelectionStrategy _container_9 = ((SelectObjectMutator)mut).getContainer();
          if ((_container_9 instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _container_10 = ((SelectObjectMutator)mut).getContainer();
            EClass _type_12 = ((RandomTypeSelection) _container_10).getType();
            String _name_46 = _type_12.getName();
            _builder.append(_name_46, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("EObject container = rts.getObject();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
            _builder.newLine();
          } else {
            ObSelectionStrategy _container_11 = ((SelectObjectMutator)mut).getContainer();
            if ((_container_11 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("RandomTypeSelection rts = new RandomTypeSelection(packages, model, \"");
              ObSelectionStrategy _container_12 = ((SelectObjectMutator)mut).getContainer();
              EClass _type_13 = ((RandomTypeSelection) _container_12).getType();
              String _name_47 = _type_13.getName();
              _builder.append(_name_47, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("EObject container = rts.getObject();");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
              _builder.newLine();
            } else {
              ObSelectionStrategy _container_13 = ((SelectObjectMutator)mut).getContainer();
              if ((_container_13 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _container_14 = ((SelectObjectMutator)mut).getContainer();
                EClass _type_14 = ((SpecificObjectSelection) _container_14).getType();
                String _name_48 = _type_14.getName();
                _builder.append(_name_48, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ArrayList<EObject> containers = ModelManager.getParentObjects(model, \"");
                ObSelectionStrategy _object_34 = ((SelectObjectMutator)mut).getObject();
                EClass _type_15 = _object_34.getType();
                String _name_49 = _type_15.getName();
                _builder.append(_name_49, "\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("EObject container = containers.get(ModelManager.getRandomIndex(containers));");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        {
          EReference _refType_2 = ((SelectObjectMutator)mut).getRefType();
          boolean _notEquals_8 = (!Objects.equal(_refType_2, null));
          if (_notEquals_8) {
            _builder.append("\t\t");
            _builder.append("SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, \"");
            EReference _refType_3 = ((SelectObjectMutator)mut).getRefType();
            String _name_50 = _refType_3.getName();
            _builder.append(_name_50, "\t\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            {
              ObSelectionStrategy _container_15 = ((SelectObjectMutator)mut).getContainer();
              if ((_container_15 instanceof SpecificObjectSelection)) {
                _builder.append(" hmObjects.get(\"");
                ObSelectionStrategy _container_16 = ((SelectObjectMutator)mut).getContainer();
                ObjectEmitter _objSel_7 = ((SpecificObjectSelection) _container_16).getObjSel();
                String _name_51 = _objSel_7.getName();
                _builder.append(_name_51, "\t\t\t");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("\t");
              } else {
                _builder.append(" containerSelection");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("SelectObjectMutator mut = new SelectObjectMutator(model, packages, referenceSelection, containerSelection, objectSelection);");
        _builder.newLine();
        _builder.append("\t   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_5 = this.nMutation++;
        _builder.append(_plusPlus_5, "\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//END SELECT OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof ModifySourceReferenceMutator)) {
        _builder.append("\t");
        _builder.append("//MODIFY SOURCE REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _source = ((ModifySourceReferenceMutator)mut).getSource();
          if ((_source instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _source_1 = ((ModifySourceReferenceMutator)mut).getSource();
            EClass _type_16 = ((RandomTypeSelection) _source_1).getType();
            String _name_52 = _type_16.getName();
            _builder.append(_name_52, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _source_2 = ((ModifySourceReferenceMutator)mut).getSource();
            if ((_source_2 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("List<EObject> objects = hmList.get(\"");
              ObSelectionStrategy _source_3 = ((ModifySourceReferenceMutator)mut).getSource();
              EClass _type_17 = ((CompleteTypeSelection) _source_3).getType();
              String _name_53 = _type_17.getName();
              _builder.append(_name_53, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("List<ObSelectionStrategy> listSourceSelection = new ArrayList<ObSelectionStrategy>();");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("for (EObject obj : objects) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("listSourceSelection.add(objectSelection);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
            } else {
              ObSelectionStrategy _source_4 = ((ModifySourceReferenceMutator)mut).getSource();
              if ((_source_4 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _source_5 = ((ModifySourceReferenceMutator)mut).getSource();
                ObjectEmitter _objSel_8 = ((SpecificObjectSelection) _source_5).getObjSel();
                String _name_54 = _objSel_8.getName();
                _builder.append(_name_54, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        {
          ObSelectionStrategy _newSource = ((ModifySourceReferenceMutator)mut).getNewSource();
          if ((_newSource instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection newSourceSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _newSource_1 = ((ModifySourceReferenceMutator)mut).getNewSource();
            EClass _type_18 = ((RandomTypeSelection) _newSource_1).getType();
            String _name_55 = _type_18.getName();
            _builder.append(_name_55, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _newSource_2 = ((ModifySourceReferenceMutator)mut).getNewSource();
            if ((_newSource_2 instanceof OtherTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("EObject otherSourceSelection = null; ");
              _builder.newLine();
              {
                ObSelectionStrategy _source_6 = ((ModifySourceReferenceMutator)mut).getSource();
                if ((_source_6 instanceof CompleteTypeSelection)) {
                  _builder.append("\t\t");
                  _builder.append("otherSourceSelection = sourceSelection.get(0).getObject();");
                  _builder.newLine();
                } else {
                  _builder.append("\t\t");
                  _builder.append("otherSourceSelection = sourceSelection.getObject();");
                  _builder.newLine();
                }
              }
              _builder.append("\t\t");
              _builder.append("Object otherRef = null;");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("if (otherSourceSelection != null) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("for (EReference ref : otherSourceSelection.eClass().getEAllReferences()) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("if (ref.getName().equals(\"");
              EReference _refType_4 = ((ModifySourceReferenceMutator)mut).getRefType();
              String _name_56 = _refType_4.getName();
              _builder.append(_name_56, "\t\t\t\t");
              _builder.append("\")) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t\t");
              _builder.append("otherRef = otherSourceSelection.eGet(ref);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t\t");
              _builder.append("break;");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("OtherTypeSelection newSourceSelection = new OtherTypeSelection(packages, model, \"");
              ObSelectionStrategy _newSource_3 = ((ModifySourceReferenceMutator)mut).getNewSource();
              EClass _type_19 = ((OtherTypeSelection) _newSource_3).getType();
              String _name_57 = _type_19.getName();
              _builder.append(_name_57, "\t\t");
              _builder.append("\", otherRef);");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _newSource_4 = ((ModifySourceReferenceMutator)mut).getNewSource();
              if ((_newSource_4 instanceof CompleteTypeSelection)) {
                _builder.append("\t\t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("RandomTypeSelection newSourceSelection = new RandomTypeSelection(packages, model, \"");
                ObSelectionStrategy _newSource_5 = ((ModifySourceReferenceMutator)mut).getNewSource();
                EClass _type_20 = ((CompleteTypeSelection) _newSource_5).getType();
                String _name_58 = _type_20.getName();
                _builder.append(_name_58, "\t\t");
                _builder.append("\");\t\t\t");
                _builder.newLineIfNotEmpty();
              } else {
                ObSelectionStrategy _newSource_6 = ((ModifySourceReferenceMutator)mut).getNewSource();
                if ((_newSource_6 instanceof SpecificObjectSelection)) {
                  _builder.append("\t\t");
                  _builder.append("ObSelectionStrategy newSourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                  ObSelectionStrategy _newSource_7 = ((ModifySourceReferenceMutator)mut).getNewSource();
                  ObjectEmitter _objSel_9 = ((SpecificObjectSelection) _newSource_7).getObjSel();
                  String _name_59 = _objSel_9.getName();
                  _builder.append(_name_59, "\t\t");
                  _builder.append("\"));");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t\t");
                  _builder.append("ObSelectionStrategy newSourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                  _builder.newLine();
                }
              }
            }
          }
        }
        {
          ObSelectionStrategy _source_7 = ((ModifySourceReferenceMutator)mut).getSource();
          if ((_source_7 instanceof CompleteTypeSelection)) {
            _builder.append("   \t\t\t\t\t");
            _builder.append("for (ObSelectionStrategy sourceSelection : listSourceSelection) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("ModifySourceReferenceMutator mut = new ModifySourceReferenceMutator(model, packages, sourceSelection, newSourceSelection, \"");
            EReference _refType_5 = ((ModifySourceReferenceMutator)mut).getRefType();
            String _name_60 = _refType_5.getName();
            _builder.append(_name_60, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t   \t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_6 = this.nMutation++;
            _builder.append(_plusPlus_6, "\t\t\t\t\t   \t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t   \t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t\t\t\t\t   \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("\t\t");
            _builder.append("ModifySourceReferenceMutator mut = new ModifySourceReferenceMutator(model, packages, sourceSelection, newSourceSelection, \"");
            EReference _refType_6 = ((ModifySourceReferenceMutator)mut).getRefType();
            String _name_61 = _refType_6.getName();
            _builder.append(_name_61, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   \t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_7 = this.nMutation++;
            _builder.append(_plusPlus_7, "\t\t\t\t   \t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   \t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t\t\t\t   \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("//END MODIFY SOURCE REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof ModifyTargetReferenceMutator)) {
        _builder.append("\t");
        _builder.append("//MODIFY TARGET REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _source_8 = ((ModifyTargetReferenceMutator)mut).getSource();
          if ((_source_8 instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _source_9 = ((ModifyTargetReferenceMutator)mut).getSource();
            EClass _type_21 = ((RandomTypeSelection) _source_9).getType();
            String _name_62 = _type_21.getName();
            _builder.append(_name_62, "\t\t");
            _builder.append("\");\t\t\t");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _source_10 = ((ModifyTargetReferenceMutator)mut).getSource();
            if ((_source_10 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("List<EObject> objects = hmList.get(\"");
              ObSelectionStrategy _source_11 = ((ModifyTargetReferenceMutator)mut).getSource();
              EClass _type_22 = ((CompleteTypeSelection) _source_11).getType();
              String _name_63 = _type_22.getName();
              _builder.append(_name_63, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("List<ObSelectionStrategy> listSourceSelection = new ArrayList<ObSelectionStrategy>();");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("for (EObject obj : objects) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("listSourceSelection.add(objectSelection);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
            } else {
              ObSelectionStrategy _source_12 = ((ModifyTargetReferenceMutator)mut).getSource();
              if ((_source_12 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _source_13 = ((ModifyTargetReferenceMutator)mut).getSource();
                ObjectEmitter _objSel_10 = ((SpecificObjectSelection) _source_13).getObjSel();
                String _name_64 = _objSel_10.getName();
                _builder.append(_name_64, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        {
          ObSelectionStrategy _newTarget = ((ModifyTargetReferenceMutator)mut).getNewTarget();
          if ((_newTarget instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection newTargetSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _newTarget_1 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
            EClass _type_23 = ((RandomTypeSelection) _newTarget_1).getType();
            String _name_65 = _type_23.getName();
            _builder.append(_name_65, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _newTarget_2 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
            if ((_newTarget_2 instanceof OtherTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("EObject otherSourceSelection = null; ");
              _builder.newLine();
              {
                ObSelectionStrategy _source_14 = ((ModifyTargetReferenceMutator)mut).getSource();
                if ((_source_14 instanceof CompleteTypeSelection)) {
                  _builder.append("\t\t");
                  _builder.append("otherSourceSelection = sourceSelection.get(0).getObject();");
                  _builder.newLine();
                } else {
                  _builder.append("\t\t");
                  _builder.append("otherSourceSelection = sourceSelection.getObject();");
                  _builder.newLine();
                }
              }
              _builder.append("\t\t");
              _builder.append("Object otherRef = null;");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("if (otherSourceSelection != null) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("for (EReference ref : otherSourceSelection.eClass().getEAllReferences()) {");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("if (ref.getName().equals(\"");
              EReference _refType_7 = ((ModifyTargetReferenceMutator)mut).getRefType();
              String _name_66 = _refType_7.getName();
              _builder.append(_name_66, "\t\t\t\t");
              _builder.append("\")) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t\t");
              _builder.append("otherRef = otherSourceSelection.eGet(ref);");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t\t");
              _builder.append("break;");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("OtherTypeSelection newTargetSelection = new OtherTypeSelection(packages, model, \"");
              ObSelectionStrategy _newTarget_3 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
              EClass _type_24 = ((OtherTypeSelection) _newTarget_3).getType();
              String _name_67 = _type_24.getName();
              _builder.append(_name_67, "\t\t");
              _builder.append("\", otherRef);");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _newTarget_4 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
              if ((_newTarget_4 instanceof CompleteTypeSelection)) {
                _builder.append("\t\t");
                _builder.append("RandomTypeSelection newTargetSelection = new RandomTypeSelection(packages, model, \"");
                ObSelectionStrategy _newTarget_5 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
                EClass _type_25 = ((CompleteTypeSelection) _newTarget_5).getType();
                String _name_68 = _type_25.getName();
                _builder.append(_name_68, "\t\t");
                _builder.append("\");\t\t\t");
                _builder.newLineIfNotEmpty();
              } else {
                ObSelectionStrategy _newTarget_6 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
                if ((_newTarget_6 instanceof SpecificObjectSelection)) {
                  _builder.append("\t\t");
                  _builder.append("ObSelectionStrategy newTargetSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                  ObSelectionStrategy _newTarget_7 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
                  ObjectEmitter _objSel_11 = ((SpecificObjectSelection) _newTarget_7).getObjSel();
                  String _name_69 = _objSel_11.getName();
                  _builder.append(_name_69, "\t\t");
                  _builder.append("\"));");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t\t");
                  _builder.append("ObSelectionStrategy newTargetSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                  _builder.newLine();
                }
              }
            }
          }
        }
        _builder.newLine();
        {
          ObSelectionStrategy _source_15 = ((ModifyTargetReferenceMutator)mut).getSource();
          if ((_source_15 instanceof CompleteTypeSelection)) {
            _builder.append("for (ObSelectionStrategy sourceSelection : listSourceSelection) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("mutations.add(ModifyTargetReferenceMutator(model, packages, sourceSelection, newTargetSelection, \"");
            EReference _refType_8 = ((ModifyTargetReferenceMutator)mut).getRefType();
            String _name_70 = _refType_8.getName();
            _builder.append(_name_70, "\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t   \t\t\t\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("\t\t");
            _builder.append("ModifyTargetReferenceMutator mut = new ModifyTargetReferenceMutator(model, packages, sourceSelection, newTargetSelection, \"");
            EReference _refType_9 = ((ModifyTargetReferenceMutator)mut).getRefType();
            String _name_71 = _refType_9.getName();
            _builder.append(_name_71, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   \t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_8 = this.nMutation++;
            _builder.append(_plusPlus_8, "\t\t\t\t   \t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   \t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t\t\t\t   \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("//END MODIFY TARGET REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof CreateReferenceMutator)) {
        _builder.append("\t");
        _builder.append("//CREATE REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _source_16 = ((CreateReferenceMutator)mut).getSource();
          if ((_source_16 instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _source_17 = ((CreateReferenceMutator)mut).getSource();
            EClass _type_26 = ((RandomTypeSelection) _source_17).getType();
            String _name_72 = _type_26.getName();
            _builder.append(_name_72, "\t\t");
            _builder.append("\");\t\t\t");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _source_18 = ((CreateReferenceMutator)mut).getSource();
            if ((_source_18 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, \"");
              ObSelectionStrategy _source_19 = ((CreateReferenceMutator)mut).getSource();
              EClass _type_27 = ((CompleteTypeSelection) _source_19).getType();
              String _name_73 = _type_27.getName();
              _builder.append(_name_73, "\t\t");
              _builder.append("\");\t");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _source_20 = ((CreateReferenceMutator)mut).getSource();
              if ((_source_20 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _source_21 = ((CreateReferenceMutator)mut).getSource();
                ObjectEmitter _objSel_12 = ((SpecificObjectSelection) _source_21).getObjSel();
                String _name_74 = _objSel_12.getName();
                _builder.append(_name_74, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        {
          ObSelectionStrategy _target = ((CreateReferenceMutator)mut).getTarget();
          if ((_target instanceof RandomTypeSelection)) {
            _builder.append("\t\t");
            _builder.append("RandomTypeSelection targetSelection = new RandomTypeSelection(packages, model, \"");
            ObSelectionStrategy _target_1 = ((CreateReferenceMutator)mut).getTarget();
            EClass _type_28 = ((RandomTypeSelection) _target_1).getType();
            String _name_75 = _type_28.getName();
            _builder.append(_name_75, "\t\t");
            _builder.append("\");\t\t\t");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _target_2 = ((CreateReferenceMutator)mut).getTarget();
            if ((_target_2 instanceof CompleteTypeSelection)) {
              _builder.append("\t\t");
              _builder.append("RandomTypeSelection targetSelection = new RandomTypeSelection(packages, model, \"");
              ObSelectionStrategy _target_3 = ((CreateReferenceMutator)mut).getTarget();
              EClass _type_29 = ((CompleteTypeSelection) _target_3).getType();
              String _name_76 = _type_29.getName();
              _builder.append(_name_76, "\t\t");
              _builder.append("\");\t\t\t");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _target_4 = ((CreateReferenceMutator)mut).getTarget();
              if ((_target_4 instanceof SpecificObjectSelection)) {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy targetSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _target_5 = ((CreateReferenceMutator)mut).getTarget();
                ObjectEmitter _objSel_13 = ((SpecificObjectSelection) _target_5).getObjSel();
                String _name_77 = _objSel_13.getName();
                _builder.append(_name_77, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("ObSelectionStrategy targetSelection = new SpecificObjectSelection(packages, model, (EObject) null);");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("CreateReferenceMutator mut = new CreateReferenceMutator(model, packages, sourceSelection, targetSelection, \"");
        EReference _refType_10 = ((CreateReferenceMutator)mut).getRefType();
        String _name_78 = _refType_10.getName();
        _builder.append(_name_78, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_9 = this.nMutation++;
        _builder.append(_plusPlus_9, "\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//END CREATE REFERENCE ");
        _builder.append(this.methodName, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof RemoveObjectMutator)) {
        _builder.append("\t");
        _builder.append("// REMOVE OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _object_35 = ((RemoveObjectMutator)mut).getObject();
          if ((_object_35 instanceof RandomTypeSelection)) {
            {
              ObSelectionStrategy _object_36 = ((RemoveObjectMutator)mut).getObject();
              Expression _expression_4 = _object_36.getExpression();
              boolean _equals_3 = Objects.equal(_expression_4, null);
              if (_equals_3) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ObSelectionStrategy objectSelection = new RandomTypeSelection(packages, model, \"");
                ObSelectionStrategy _object_37 = ((RemoveObjectMutator)mut).getObject();
                EClass _type_30 = ((RandomTypeSelection) _object_37).getType();
                String _name_79 = _type_30.getName();
                _builder.append(_name_79, "\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("ObSelectionStrategy rts = new CompleteTypeSelection(packages, model, \"");
                ObSelectionStrategy _object_38 = ((RemoveObjectMutator)mut).getObject();
                EClass _type_31 = ((RandomTypeSelection) _object_38).getType();
                String _name_80 = _type_31.getName();
                _builder.append(_name_80, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("List<EObject> objects = rts.getObjects();");
                _builder.newLine();
                _builder.append("//EXPRESSION LIST: ");
                ArrayList<Integer> _arrayList_2 = new ArrayList<Integer>();
                _builder.append(this.expressionList = _arrayList_2, "");
                _builder.newLineIfNotEmpty();
                _builder.append("//EXPRESSION LEVEL: ");
                _builder.append(this.nExpression = 0, "");
                _builder.newLineIfNotEmpty();
                _builder.append("//EXPRESSION LEVEL: ");
                boolean _add_2 = this.expressionList.add(Integer.valueOf(0));
                _builder.append(_add_2, "");
                _builder.newLineIfNotEmpty();
                _builder.append("Expression exp");
                Integer _get_24 = this.expressionList.get(0);
                _builder.append(_get_24, "");
                _builder.append(" = new Expression();");
                _builder.newLineIfNotEmpty();
                ObSelectionStrategy _object_39 = ((RemoveObjectMutator)mut).getObject();
                Expression _expression_5 = _object_39.getExpression();
                CharSequence _method_5 = this.method(_expression_5);
                _builder.append(_method_5, "");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t\t\t");
                _builder.append("List<EObject> selectedObjects = evaluate(objects, exp");
                Integer _get_25 = this.expressionList.get(0);
                _builder.append(_get_25, "   \t\t\t\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("EObject object = null;");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("if (selectedObjects.size() > 0) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t");
                _builder.append("object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("ObSelectionStrategy objectSelection = null; ");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("if (object != null) {");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t\t");
                _builder.append("objectSelection = new SpecificObjectSelection(packages, model, object);");
                _builder.newLine();
                _builder.append("\t\t\t\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          } else {
            ObSelectionStrategy _object_40 = ((RemoveObjectMutator)mut).getObject();
            if ((_object_40 instanceof SpecificObjectSelection)) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
              ObSelectionStrategy _object_41 = ((RemoveObjectMutator)mut).getObject();
              ObjectEmitter _objSel_14 = ((SpecificObjectSelection) _object_41).getObjSel();
              String _name_81 = _objSel_14.getName();
              _builder.append(_name_81, "\t\t");
              _builder.append("\"));");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _object_42 = ((RemoveObjectMutator)mut).getObject();
              if ((_object_42 instanceof CompleteTypeSelection)) {
                {
                  ObSelectionStrategy _object_43 = ((RemoveObjectMutator)mut).getObject();
                  Expression _expression_6 = _object_43.getExpression();
                  boolean _equals_4 = Objects.equal(_expression_6, null);
                  if (_equals_4) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("CompleteTypeSelection objectsSelection = new CompleteTypeSelection(packages, model, \"");
                    ObSelectionStrategy _object_44 = ((RemoveObjectMutator)mut).getObject();
                    EClass _type_32 = ((CompleteTypeSelection) _object_44).getType();
                    String _name_82 = _type_32.getName();
                    _builder.append(_name_82, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("List<EObject> objects = objectsSelection.getObjects();");
                    _builder.newLine();
                  }
                }
                {
                  ObSelectionStrategy _object_45 = ((RemoveObjectMutator)mut).getObject();
                  Expression _expression_7 = _object_45.getExpression();
                  boolean _notEquals_9 = (!Objects.equal(_expression_7, null));
                  if (_notEquals_9) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("ObSelectionStrategy rts = new CompleteTypeSelection(packages, model, \"");
                    ObSelectionStrategy _object_46 = ((RemoveObjectMutator)mut).getObject();
                    EClass _type_33 = ((CompleteTypeSelection) _object_46).getType();
                    String _name_83 = _type_33.getName();
                    _builder.append(_name_83, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("List<EObject> objects = rts.getObjects();");
                    _builder.newLine();
                    _builder.append("\t   \t\t\t\t\t");
                    _builder.append("//EXPRESSION LIST: ");
                    ArrayList<Integer> _arrayList_3 = new ArrayList<Integer>();
                    _builder.append(this.expressionList = _arrayList_3, "\t   \t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t   \t\t\t\t\t");
                    _builder.append("//EXPRESSION LEVEL: ");
                    _builder.append(this.nExpression = 0, "\t   \t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t   \t\t\t\t\t");
                    _builder.append("//EXPRESSION LEVEL: ");
                    boolean _add_3 = this.expressionList.add(Integer.valueOf(0));
                    _builder.append(_add_3, "\t   \t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t   \t\t\t\t\t");
                    _builder.append("Expression exp");
                    Integer _get_26 = this.expressionList.get(0);
                    _builder.append(_get_26, "\t   \t\t\t\t\t");
                    _builder.append(" = new Expression();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t   \t\t\t\t\t");
                    ObSelectionStrategy _object_47 = ((RemoveObjectMutator)mut).getObject();
                    Expression _expression_8 = _object_47.getExpression();
                    CharSequence _method_6 = this.method(_expression_8);
                    _builder.append(_method_6, "\t   \t\t\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("   \t\t\t\t\t\t");
                    _builder.append("objects = evaluate(objects, exp");
                    Integer _get_27 = this.expressionList.get(0);
                    _builder.append(_get_27, "   \t\t\t\t\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        {
          ObSelectionStrategy _object_48 = ((RemoveObjectMutator)mut).getObject();
          if ((_object_48 instanceof CompleteTypeSelection)) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (EObject obj : objects) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("RemoveObjectMutator mut = new RemoveObjectMutator(model, packages, obj);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("   \t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_10 = this.nMutation++;
            _builder.append(_plusPlus_10, "\t\t   \t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("   \t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t\t   \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("RemoveObjectMutator mut = new RemoveObjectMutator(model, packages, objectSelection);");
            _builder.newLine();
            _builder.append("\t\t\t\t   \t");
            _builder.append("//INC COUNTER: ");
            int _plusPlus_11 = this.nMutation++;
            _builder.append(_plusPlus_11, "\t\t\t\t   \t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   \t");
            _builder.append("mut.setId(\"m");
            _builder.append(this.nMutation, "\t\t\t\t   \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("mutations.add(mut);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("//END REMOVE OBJECT ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof RemoveRandomReferenceMutator)) {
        _builder.append("\t");
        _builder.append("// REMOVE RANDOM REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("RandomTypeSelection containerSelection = new RandomTypeSelection(packages, model, \"");
        EClass _type_34 = ((RemoveRandomReferenceMutator)mut).getType();
        String _name_84 = _type_34.getName();
        _builder.append(_name_84, "\t\t");
        _builder.append("\");\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, containerSelection, \"");
        EReference _refType_11 = ((RemoveRandomReferenceMutator)mut).getRefType();
        String _name_85 = _refType_11.getName();
        _builder.append(_name_85, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_12 = this.nMutation++;
        _builder.append(_plusPlus_12, "\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//END REMOVE RANDOM REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof RemoveSpecificReferenceMutator)) {
        _builder.append("\t");
        _builder.append("// REMOVE SPECIFIC REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _container_17 = ((RemoveSpecificReferenceMutator)mut).getContainer();
          if ((_container_17 instanceof RandomTypeSelection)) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("ObSelectionStrategy containerSelection = new RandomTypeSelection(packages, model, hmObjects.get(\"");
            ObSelectionStrategy _container_18 = ((RemoveSpecificReferenceMutator)mut).getContainer();
            EClass _type_35 = ((RandomTypeSelection) _container_18).getType();
            String _name_86 = _type_35.getName();
            _builder.append(_name_86, "\t\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _container_19 = ((RemoveSpecificReferenceMutator)mut).getContainer();
            if ((_container_19 instanceof SpecificObjectSelection)) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
              ObSelectionStrategy _container_20 = ((RemoveSpecificReferenceMutator)mut).getContainer();
              ObjectEmitter _objSel_15 = ((SpecificObjectSelection) _container_20).getObjSel();
              String _name_87 = _objSel_15.getName();
              _builder.append(_name_87, "\t\t");
              _builder.append("\"));");
              _builder.newLineIfNotEmpty();
            } else {
              ObSelectionStrategy _container_21 = ((RemoveSpecificReferenceMutator)mut).getContainer();
              if ((_container_21 instanceof CompleteTypeSelection)) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ObSelectionStrategy containerSelection = new CompleteTypeSelection(packages, model, hmObjects.get(\"");
                ObSelectionStrategy _container_22 = ((RemoveSpecificReferenceMutator)mut).getContainer();
                EClass _type_36 = ((CompleteTypeSelection) _container_22).getType();
                String _name_88 = _type_36.getName();
                _builder.append(_name_88, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, containerSelection, \"");
        EReference _refType_12 = ((RemoveSpecificReferenceMutator)mut).getRefType();
        String _name_89 = _refType_12.getName();
        _builder.append(_name_89, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_13 = this.nMutation++;
        _builder.append(_plusPlus_13, "\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//END REMOVE SPECIFIC REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((mut instanceof RemoveCompleteReferenceMutator)) {
        _builder.append("\t");
        _builder.append("// REMOVE COMPLETE REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("CompleteTypeSelection containersSelection = new CompleteTypeSelection(packages, model, \"");
        EClass _type_37 = ((RemoveCompleteReferenceMutator)mut).getType();
        String _name_90 = _type_37.getName();
        _builder.append(_name_90, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("List<EObject> objects = containersSelection.getObjects();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("for (EObject obj : objects) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, obj, \"");
        EReference _refType_13 = ((RemoveCompleteReferenceMutator)mut).getRefType();
        String _name_91 = _refType_13.getName();
        _builder.append(_name_91, "\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t   \t");
        _builder.append("//INC COUNTER: ");
        int _plusPlus_14 = this.nMutation++;
        _builder.append(_plusPlus_14, "\t\t   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t   \t");
        _builder.append("mut.setId(\"m");
        _builder.append(this.nMutation, "\t\t   \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("mutations.add(mut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//END REMOVE COMPLETE REFERENCE ");
        _builder.append(this.methodName, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return mutations;\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compositeMethod(final CompositeMutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = mut.eContainer();
      if ((_eContainer instanceof MutatorEnvironment)) {
        _builder.append("//INC COUNTER: ");
        int _plusPlus = this.nMutation++;
        _builder.append(_plusPlus, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("private ArrayList<Mutator> ");
    _builder.append(this.compositeMethodName, "");
    _builder.append("(ArrayList<EPackage> packages, Resource model, HashMap<String, EObject> hmObjects, HashMap<String, List<EObject>> hmList) throws ReferenceNonExistingException {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ArrayList<Mutator> mutations = new ArrayList<Mutator>();");
    _builder.newLine();
    _builder.append("\t");
    int localNCompositeMethod = (this.nCompositeMethod + 1);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    int localNMethod = (this.nMethod + 1);
    _builder.newLineIfNotEmpty();
    {
      EList<Mutator> _commands = mut.getCommands();
      for(final Mutator c : _commands) {
        {
          if ((c instanceof CompositeMutator)) {
            _builder.append("\t");
            _builder.append("//COMMAND: ");
            _builder.append(this.nCompositeCommands = (this.nCompositeCommands + 1), "\t");
            _builder.newLineIfNotEmpty();
            {
              int _max = ((CompositeMutator)c).getMax();
              int _min = ((CompositeMutator)c).getMin();
              int _minus = (_max - _min);
              boolean _greaterThan = (_minus > 0);
              if (_greaterThan) {
                _builder.append("\t");
                _builder.append("int cmax");
                _builder.append(this.nCompositeCommands, "\t");
                _builder.append(" = getRandom(");
                int _max_1 = ((CompositeMutator)c).getMax();
                int _min_1 = ((CompositeMutator)c).getMin();
                int _minus_1 = (_max_1 - _min_1);
                _builder.append(_minus_1, "\t");
                _builder.append(") + ");
                int _min_2 = ((CompositeMutator)c).getMin();
                _builder.append(_min_2, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _and = false;
              int _min_3 = ((CompositeMutator)c).getMin();
              boolean _equals = (_min_3 == 0);
              if (!_equals) {
                _and = false;
              } else {
                int _max_2 = ((CompositeMutator)c).getMax();
                boolean _equals_1 = (_max_2 == 0);
                _and = _equals_1;
              }
              if (_and) {
                _builder.append("\t");
                _builder.append("int cmax");
                _builder.append(this.nCompositeCommands, "\t");
                _builder.append(" = 1;");
                _builder.newLineIfNotEmpty();
              } else {
                int _min_4 = ((CompositeMutator)c).getMin();
                int _max_3 = ((CompositeMutator)c).getMax();
                boolean _equals_2 = (_min_4 == _max_3);
                if (_equals_2) {
                  _builder.append("\t");
                  _builder.append("int cmax");
                  _builder.append(this.nCompositeCommands, "\t");
                  _builder.append(" = ");
                  int _min_5 = ((CompositeMutator)c).getMin();
                  _builder.append(_min_5, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t");
            _builder.append("for (int j");
            _builder.append(this.nCompositeCommands, "\t");
            _builder.append(" = 0; j");
            _builder.append(this.nCompositeCommands, "\t");
            _builder.append(" < cmax");
            _builder.append(this.nCompositeCommands, "\t");
            _builder.append("; j");
            _builder.append(this.nCompositeCommands, "\t");
            _builder.append("++) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("//COMPOSITE METHOD NAME:");
            String _string = Integer.valueOf(localNCompositeMethod).toString();
            String _plus = ("compositeMutation" + _string);
            _builder.append(this.compositeMethodName = _plus, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("ArrayList<Mutator> l");
            _builder.append(this.compositeMethodName, "\t\t");
            _builder.append(" = ");
            _builder.append(this.compositeMethodName, "\t\t");
            _builder.append("(packages, model, hmObjects, hmList);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("//COMPOSITE METHOD INC: ");
            int _plusPlus_1 = localNCompositeMethod++;
            _builder.append(_plusPlus_1, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (l");
            _builder.append(this.compositeMethodName, "\t\t");
            _builder.append(" != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("if (l");
            _builder.append(this.compositeMethodName, "\t\t\t");
            _builder.append(".size() > 0) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("mutations.addAll(l");
            _builder.append(this.compositeMethodName, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//COMPOSITE METHOD INC: ");
            int _localNCompositeMethod = localNCompositeMethod;
            int _compositeMutatorSize = ModelManager.compositeMutatorSize(((CompositeMutator)c));
            int _minus_2 = (_compositeMutatorSize - 1);
            int _plus_1 = localNCompositeMethod = (_localNCompositeMethod + _minus_2);
            _builder.append(_plus_1, "\t");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("//COMMAND: ");
            _builder.append(this.nCommands = (this.nCommands + 1), "\t");
            _builder.newLineIfNotEmpty();
            {
              int _max_4 = c.getMax();
              int _min_6 = c.getMin();
              int _minus_3 = (_max_4 - _min_6);
              boolean _greaterThan_1 = (_minus_3 > 0);
              if (_greaterThan_1) {
                _builder.append("\t");
                _builder.append("int max");
                _builder.append(this.nCommands, "\t");
                _builder.append(" = getRandom(");
                int _max_5 = c.getMax();
                int _min_7 = c.getMin();
                int _minus_4 = (_max_5 - _min_7);
                _builder.append(_minus_4, "\t");
                _builder.append(") + ");
                int _min_8 = c.getMin();
                _builder.append(_min_8, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _and_1 = false;
              int _max_6 = c.getMax();
              boolean _equals_3 = (_max_6 == 0);
              if (!_equals_3) {
                _and_1 = false;
              } else {
                int _min_9 = c.getMin();
                boolean _equals_4 = (_min_9 == 0);
                _and_1 = _equals_4;
              }
              if (_and_1) {
                _builder.append("\t");
                _builder.append("int max");
                _builder.append(this.nCommands, "\t");
                _builder.append(" = 1;");
                _builder.newLineIfNotEmpty();
              } else {
                int _min_10 = c.getMin();
                int _max_7 = c.getMax();
                boolean _equals_5 = (_min_10 == _max_7);
                if (_equals_5) {
                  _builder.append("\t");
                  _builder.append("int max");
                  _builder.append(this.nCommands, "\t");
                  _builder.append(" = ");
                  int _min_11 = c.getMin();
                  _builder.append(_min_11, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t");
            _builder.append("for (int j = 0; j < max");
            _builder.append(this.nCommands, "\t");
            _builder.append("; j++) {");
            _builder.newLineIfNotEmpty();
            {
              String _name = c.getName();
              boolean _notEquals = (!Objects.equal(_name, null));
              if (_notEquals) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("//NAME:");
                String _name_1 = c.getName();
                String _string_1 = Integer.valueOf(this.nCommands).toString();
                String _plus_2 = (_name_1 + _string_1);
                _builder.append(this.commandName = _plus_2, "\t\t");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("//NAME:");
                String _string_2 = Integer.valueOf(this.nCommands).toString();
                _builder.append(this.commandName = _string_2, "\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("//METHOD NAME:");
            String _string_3 = Integer.valueOf(localNMethod).toString();
            String _plus_3 = ("mutation" + _string_3);
            _builder.append(this.methodName = _plus_3, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("ArrayList<Mutator> l");
            _builder.append(this.commandName, "\t\t");
            _builder.append(" = ");
            _builder.append(this.methodName, "\t\t");
            _builder.append("(packages, model, hmObjects, hmList);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (l");
            _builder.append(this.commandName, "\t\t");
            _builder.append(" != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("if (l");
            _builder.append(this.commandName, "\t\t\t");
            _builder.append(".size() > 0) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("mutations.addAll(l");
            _builder.append(this.commandName, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//METHOD INC: ");
            int _plusPlus_2 = localNMethod++;
            _builder.append(_plusPlus_2, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("return mutations;\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMethods(final Mutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((mut instanceof CompositeMutator)) {
        _builder.append("//COUNTER COMPOSITE: ");
        _builder.append(this.nCompositeMethod = (this.nCompositeMethod + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//COMPOSITE METHOD NAME:");
        String _string = Integer.valueOf(this.nCompositeMethod).toString();
        String _plus = ("compositeMutation" + _string);
        _builder.append(this.compositeMethodName = _plus, "");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = Objects.equal(this.compositeCommands, null);
          if (_equals) {
            _builder.append("//CREATION ARRAYLIST NUM COMMANDS: ");
            ArrayList<String> _arrayList = new ArrayList<String>();
            _builder.append(this.compositeCommands = _arrayList, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("//ADDING NUM COMMANDS: ");
        boolean _add = this.compositeCommands.add(this.compositeMethodName);
        _builder.append(_add, "");
        _builder.newLineIfNotEmpty();
        CharSequence _compositeMethod = this.compositeMethod(((CompositeMutator)mut));
        _builder.append(_compositeMethod, "");
        _builder.newLineIfNotEmpty();
        {
          EList<Mutator> _commands = ((CompositeMutator)mut).getCommands();
          for(final Mutator c : _commands) {
            Object _generateMethods = this.generateMethods(c);
            _builder.append(_generateMethods, "");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("//COUNTER: ");
        _builder.append(this.nMethod = (this.nMethod + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//METHOD NAME:");
        String _string_1 = Integer.valueOf(this.nMethod).toString();
        String _plus_1 = ("mutation" + _string_1);
        _builder.append(this.methodName = _plus_1, "");
        _builder.newLineIfNotEmpty();
        CharSequence _method = this.method(mut);
        _builder.append(_method, "");
        _builder.append("\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence registryMethod(final Mutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//REGISTRY COUNTER: ");
    int _plusPlus = this.nRegistryMutation++;
    _builder.append(_plusPlus, "");
    _builder.newLineIfNotEmpty();
    _builder.append("private AppMutation ");
    _builder.append(this.registryMethodName, "");
    _builder.append("(Mutator mut, HashMap<String, EObject> hmMutator, Resource seed) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("AppMutation appMut = null;");
    _builder.newLine();
    {
      if ((mut instanceof CreateObjectMutator)) {
        _builder.append("ObjectCreated cMut = AppliedMutationsFactory.eINSTANCE.createObjectCreated();");
        _builder.newLine();
        _builder.append("cMut.getObject().add(mut.getObject());");
        _builder.newLine();
        _builder.append("cMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = cMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof RemoveObjectMutator)) {
        _builder.append("ObjectRemoved rMut = AppliedMutationsFactory.eINSTANCE.createObjectRemoved();");
        _builder.newLine();
        _builder.append("rMut.getObject().add(ModelManager.getObject(seed, mut.getObject()));");
        _builder.newLine();
        _builder.append("rMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = rMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof CreateReferenceMutator)) {
        _builder.append("ReferenceCreated rMut = AppliedMutationsFactory.eINSTANCE.createReferenceCreated();");
        _builder.newLine();
        _builder.append("rMut.getObject().add(mut.getObject());");
        _builder.newLine();
        _builder.append("rMut.getRef().add(((CreateReferenceMutator) mut).getReference());");
        _builder.newLine();
        _builder.append("rMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = rMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof RemoveRandomReferenceMutator)) {
        _builder.append("ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();");
        _builder.newLine();
        _builder.append("List<EObject> objects = new ArrayList<EObject>();");
        _builder.newLine();
        _builder.append("for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("objects.add(ModelManager.getObject(seed, obj));");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("rMut.getObject().addAll(objects);");
        _builder.newLine();
        _builder.append("rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());");
        _builder.newLine();
        _builder.append("rMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = rMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof RemoveSpecificReferenceMutator)) {
        _builder.append("ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();");
        _builder.newLine();
        _builder.append("List<EObject> objects = new ArrayList<EObject>();");
        _builder.newLine();
        _builder.append("for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("objects.add(ModelManager.getObject(seed, obj));");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("rMut.getObject().addAll(objects);");
        _builder.newLine();
        _builder.append("rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());");
        _builder.newLine();
        _builder.append("rMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = rMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof RemoveCompleteReferenceMutator)) {
        _builder.append("ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();");
        _builder.newLine();
        _builder.append("List<EObject> objects = new ArrayList<EObject>();");
        _builder.newLine();
        _builder.append("for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("objects.add(ModelManager.getObject(seed, obj));");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("rMut.getObject().addAll(objects);");
        _builder.newLine();
        _builder.append("rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());");
        _builder.newLine();
        _builder.append("rMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = rMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof ModifyInformationMutator)) {
        _builder.append("\t");
        _builder.append("InformationChanged icMut = AppliedMutationsFactory.eINSTANCE.createInformationChanged();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("icMut.setObject(mut.getObject());");
        _builder.newLine();
        {
          EList<AttributeSet> _attributes = ((ModifyInformationMutator) mut).getAttributes();
          int _size = _attributes.size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("\t");
            _builder.append("EList<AttributeChanged> attsMut = icMut.getAttChanges();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Object oldAttVal = null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("Object newAttVal = null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//ATTRIBUTE COUNTER: ");
            int attCounter = 0;
            _builder.newLineIfNotEmpty();
            {
              EList<AttributeSet> _attributes_1 = ((ModifyInformationMutator) mut).getAttributes();
              for(final AttributeSet att : _attributes_1) {
                _builder.append("//");
                EList<EAttribute> _attribute = att.getAttribute();
                EAttribute eattfirst = _attribute.get(0);
                _builder.newLineIfNotEmpty();
                _builder.append("//");
                EAttribute eattsec = eattfirst;
                _builder.newLineIfNotEmpty();
                {
                  if ((att instanceof AttributeInit)) {
                    _builder.append("AttributeChanged attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = null;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(".setAttName(\"");
                    String _name = eattfirst.getName();
                    _builder.append(_name, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if ((att instanceof AttributeSwap)) {
                    _builder.append("//");
                    EList<EAttribute> _attribute_1 = ((AttributeSwap)att).getAttribute();
                    EAttribute _get = _attribute_1.get(1);
                    _builder.append(eattsec = _get, "");
                    _builder.newLineIfNotEmpty();
                    _builder.append("appliedMutations.AttributeSwap attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = null;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = AppliedMutationsFactory.eINSTANCE.createAttributeSwap();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(".setFirstName(\"");
                    String _name_1 = eattfirst.getName();
                    _builder.append(_name_1, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(".setAttObject(((ModifyInformationMutator) mut).getAttObject());");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(".setAttName(\"");
                    String _name_2 = eattsec.getName();
                    _builder.append(_name_2, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if ((att instanceof AttributeCopy)) {
                    _builder.append("//");
                    EList<EAttribute> _attribute_2 = ((AttributeCopy)att).getAttribute();
                    EAttribute _get_1 = _attribute_2.get(1);
                    _builder.append(eattsec = _get_1, "");
                    _builder.newLineIfNotEmpty();
                    _builder.append("AttributeChanged attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = null;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(" = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("attMut");
                    _builder.append(attCounter, "");
                    _builder.append(".setAttName(\"");
                    String _name_3 = eattsec.getName();
                    _builder.append(_name_3, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("oldAttVal = ((ModifyInformationMutator) mut).getOldAttValue(\"");
                String _name_4 = eattfirst.getName();
                _builder.append(_name_4, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("newAttVal = ((ModifyInformationMutator) mut).getNewAttValue(\"");
                String _name_5 = eattsec.getName();
                _builder.append(_name_5, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("if (oldAttVal != null) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("attMut");
                _builder.append(attCounter, "\t");
                _builder.append(".setOldVal(oldAttVal.toString());");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _builder.append("if (newAttVal != null) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("attMut");
                _builder.append(attCounter, "\t");
                _builder.append(".setNewVal(newAttVal.toString());");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _builder.append("attMut");
                _builder.append(attCounter, "");
                _builder.append(".setDef(hmMutator.get(\"m");
                _builder.append(this.nRegistryMutation, "");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("attsMut.add(attMut");
                _builder.append(attCounter, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("icMut.setDef(hmMutator.get(\"m");
                _builder.append(this.nRegistryMutation, "");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("//ATTRIBUTE COUNTER INC: ");
                int _plusPlus_1 = attCounter++;
                _builder.append(_plusPlus_1, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EList<ReferenceSet> _references = ((ModifyInformationMutator) mut).getReferences();
          int _size_1 = _references.size();
          boolean _greaterThan_1 = (_size_1 > 0);
          if (_greaterThan_1) {
            _builder.append("\t");
            _builder.append("EList<ReferenceChanged> refsMut = icMut.getRefChanges();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("EObject previous = null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("EObject next = null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//REFERENCE COUNTER: ");
            int refCounter = 0;
            _builder.newLineIfNotEmpty();
            {
              EList<ReferenceSet> _references_1 = ((ModifyInformationMutator) mut).getReferences();
              for(final ReferenceSet ref : _references_1) {
                {
                  if ((ref instanceof ReferenceInit)) {
                    _builder.append("//");
                    EList<EReference> _reference = ((ReferenceInit)ref).getReference();
                    EReference eref = _reference.get(0);
                    _builder.newLineIfNotEmpty();
                    _builder.append("ReferenceChanged refMut");
                    _builder.append(refCounter, "");
                    _builder.append(" = null;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(" = AppliedMutationsFactory.eINSTANCE.createReferenceChanged();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(".setRefName(\"");
                    String _name_6 = eref.getName();
                    _builder.append(_name_6, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if ((ref instanceof ReferenceSwap)) {
                    _builder.append("//");
                    EList<EReference> _reference_1 = ((ReferenceSwap)ref).getReference();
                    EReference ereffirst = _reference_1.get(0);
                    _builder.newLineIfNotEmpty();
                    _builder.append("//");
                    EList<EReference> _reference_2 = ((ReferenceSwap)ref).getReference();
                    EReference erefsec = _reference_2.get(1);
                    _builder.newLineIfNotEmpty();
                    _builder.append("appliedMutations.ReferenceSwap refMut");
                    _builder.append(refCounter, "");
                    _builder.append(" = null;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(" = AppliedMutationsFactory.eINSTANCE.createReferenceSwap();");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(".setFirstName(\"");
                    String _name_7 = ereffirst.getName();
                    _builder.append(_name_7, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(".setRefObject(ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getRefObject()));");
                    _builder.newLineIfNotEmpty();
                    _builder.append("refMut");
                    _builder.append(refCounter, "");
                    _builder.append(".setRefName(\"");
                    String _name_8 = erefsec.getName();
                    _builder.append(_name_8, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("previous = ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getPrevious());");
                _builder.newLine();
                _builder.append("next = ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getNext());");
                _builder.newLine();
                _builder.append("if (previous != null) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("refMut");
                _builder.append(refCounter, "\t");
                _builder.append(".setFrom(previous);");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _builder.append("if (next != null) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("refMut");
                _builder.append(refCounter, "\t");
                _builder.append(".setTo(next);");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _builder.append("refMut");
                _builder.append(refCounter, "");
                _builder.append(".setDef(hmMutator.get(\"m");
                _builder.append(this.nRegistryMutation, "");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("refsMut.add(refMut");
                _builder.append(refCounter, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("icMut.setDef(hmMutator.get(\"m");
                _builder.append(this.nRegistryMutation, "");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("//REFERENCE COUNTER INC: ");
                int _plusPlus_2 = refCounter++;
                _builder.append(_plusPlus_2, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("appMut = icMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof ModifySourceReferenceMutator)) {
        _builder.append("SourceReferenceChanged srcMut = AppliedMutationsFactory.eINSTANCE.createSourceReferenceChanged();");
        _builder.newLine();
        _builder.append("srcMut.setFrom(((ModifySourceReferenceMutator) mut).getSource());");
        _builder.newLine();
        _builder.append("srcMut.setTo(((ModifySourceReferenceMutator) mut).getNewSource());");
        _builder.newLine();
        _builder.append("srcMut.setRefName(((ModifySourceReferenceMutator) mut).getRefType());");
        _builder.newLine();
        _builder.append("srcMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = srcMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof ModifyTargetReferenceMutator)) {
        _builder.append("TargetReferenceChanged trcMut = AppliedMutationsFactory.eINSTANCE.createTargetReferenceChanged();");
        _builder.newLine();
        _builder.append("trcMut.setFrom(((ModifyTargetReferenceMutator) mut).getSource());");
        _builder.newLine();
        _builder.append("trcMut.setTo(((ModifyTargetReferenceMutator) mut).getNewTarget());");
        _builder.newLine();
        _builder.append("trcMut.setRefName(((ModifyTargetReferenceMutator) mut).getRefType());");
        _builder.newLine();
        _builder.append("trcMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("appMut = trcMut;");
        _builder.newLine();
      }
    }
    {
      if ((mut instanceof SelectObjectMutator)) {
        _builder.append("appMut = AppliedMutationsFactory.eINSTANCE.createAppMutation();");
        _builder.newLine();
        _builder.append("appMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("return appMut;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compositeRegistryMethod(final CompositeMutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = mut.eContainer();
      if ((_eContainer instanceof MutatorEnvironment)) {
        _builder.append("//REGISTRY COUNTER: ");
        _builder.append(this.nRegistryMutation = (this.nRegistryMutation + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//LOCAL COPY REGISTRY COUNTER: ");
        int localNRegistryMutation = this.nRegistryMutation;
        _builder.newLineIfNotEmpty();
        _builder.append("private AppMutation ");
        _builder.append(this.compositeRegistryMethodName, "");
        _builder.append("(ArrayList<Mutator> muts, HashMap<String, EObject> hmMutator, Resource seed) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("CompositeMutation appMut = AppliedMutationsFactory.eINSTANCE.createCompositeMutation();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("appMut.setSize(");
        int _mutatorSize = ModelManager.mutatorSize(mut);
        _builder.append(_mutatorSize, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("ArrayList<AppMutation> appMuts = new ArrayList<AppMutation>();");
        _builder.newLine();
        _builder.append("\t");
        int localNRegistryMethod = (this.nRegistryMethod + 1);
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        int mutCounter = 0;
        _builder.newLineIfNotEmpty();
        {
          EList<Mutator> _commands = mut.getCommands();
          for(final Mutator c : _commands) {
            _builder.append("\t");
            _builder.append("//REGISTRY METHOD NAME:");
            String _string = Integer.valueOf(localNRegistryMethod).toString();
            String _plus = ("registry" + _string);
            _builder.append(this.registryMethodName = _plus, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("//REGISTRY COUNTER INC: ");
            int _plusPlus = localNRegistryMutation++;
            _builder.append(_plusPlus, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("AppMutation appMut");
            _builder.append((mutCounter + 1), "\t");
            _builder.append(" = ");
            _builder.append(this.registryMethodName, "\t");
            _builder.append("(muts.get(");
            _builder.append(mutCounter, "\t");
            _builder.append("), hmMutator, seed);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("appMut");
            _builder.append((mutCounter + 1), "\t");
            _builder.append(".setDef(hmMutator.get(\"m");
            _builder.append(localNRegistryMutation, "\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("appMuts.add(appMut");
            _builder.append((mutCounter + 1), "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("//REGISTRY METHOD INC: ");
            int _plusPlus_1 = localNRegistryMethod++;
            _builder.append(_plusPlus_1, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("//COUNTER: ");
            int _plusPlus_2 = mutCounter++;
            _builder.append(_plusPlus_2, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("appMut.getMuts().addAll(appMuts);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("appMut.setDef(hmMutator.get(\"m");
        _builder.append(this.nRegistryMutation, "\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return appMut;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence generateRegistryMethods(final Mutator mut) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((mut instanceof CompositeMutator)) {
        _builder.append("//COUNTER COMPOSITE REGISTRY: ");
        _builder.append(this.nCompositeRegistryMethod = (this.nCompositeRegistryMethod + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//COMPOSITE REGISTRY METHOD NAME:");
        String _string = Integer.valueOf(this.nCompositeRegistryMethod).toString();
        String _plus = ("compositeRegistry" + _string);
        _builder.append(this.compositeRegistryMethodName = _plus, "");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = Objects.equal(this.compositeRegistryCommands, null);
          if (_equals) {
            _builder.append("//CREATION ARRAYLIST NUM REGISTRY COMMANDS: ");
            ArrayList<String> _arrayList = new ArrayList<String>();
            _builder.append(this.compositeRegistryCommands = _arrayList, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("//ADDING NUM COMMANDS: ");
        boolean _add = this.compositeRegistryCommands.add(this.compositeRegistryMethodName);
        _builder.append(_add, "");
        _builder.newLineIfNotEmpty();
        CharSequence _compositeRegistryMethod = this.compositeRegistryMethod(((CompositeMutator)mut));
        _builder.append(_compositeRegistryMethod, "");
        _builder.newLineIfNotEmpty();
        {
          EList<Mutator> _commands = ((CompositeMutator)mut).getCommands();
          for(final Mutator c : _commands) {
            Object _generateRegistryMethods = this.generateRegistryMethods(c);
            _builder.append(_generateRegistryMethods, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("//COUNTER REGISTRY: ");
        int _mutatorSize = ModelManager.mutatorSize(((CompositeMutator)mut));
        int _plus_1 = (this.nRegistryMethod + _mutatorSize);
        _builder.append(this.nRegistryMethod = _plus_1, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("//COUNTER: ");
        _builder.append(this.nRegistryMethod = (this.nRegistryMethod + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//METHOD NAME:");
        String _string_1 = Integer.valueOf(this.nRegistryMethod).toString();
        String _plus_2 = ("registry" + _string_1);
        _builder.append(this.registryMethodName = _plus_2, "");
        _builder.newLineIfNotEmpty();
        CharSequence _registryMethod = this.registryMethod(mut);
        _builder.append(_registryMethod, "");
        _builder.append("\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final MutatorEnvironment e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.net.URL;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import manager.ModelManager;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import commands.*;");
    _builder.newLine();
    _builder.append("import commands.selection.strategies.*;");
    _builder.newLine();
    _builder.append("import commands.strategies.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import exceptions.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import appliedMutations.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import mutatorenvironment.MutatorEnvironment;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.FileLocator;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.Platform;");
    _builder.newLine();
    _builder.append("import org.osgi.framework.Bundle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.className, "");
    _builder.append(" extends manager.MutatorUtils implements manager.IMutatorExecutor {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      Definition _definition = e.getDefinition();
      if ((_definition instanceof Program)) {
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nCompositeMethod = 0, "   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nMethod = 0, "   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nRegistryMethod = 0, "   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nCompositeRegistryMethod = 0, "   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nMutation = 0, "   \t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t");
        _builder.append("//RESET COUNTER: ");
        _builder.append(this.nRegistryMutation = 0, "   \t");
        _builder.newLineIfNotEmpty();
        {
          EList<Mutator> _commands = e.getCommands();
          for(final Mutator c : _commands) {
            _builder.append("\t");
            CharSequence _generateMethods = this.generateMethods(c);
            _builder.append(_generateMethods, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _generateRegistryMethods = this.generateRegistryMethods(c);
            _builder.append(_generateRegistryMethods, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(int maxAttempts, boolean registry) throws ReferenceNonExistingException, WrongAttributeTypeException, ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t  ");
    _builder.append("MaxSmallerThanMinException, AbstractCreationException, ObjectNoTargetableException, ");
    _builder.newLine();
    _builder.append(" \t\t\t\t\t\t\t\t\t\t\t\t  ");
    _builder.append("ObjectNotContainedException, MetaModelNotFoundException, ModelNotFoundException, IOException {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (maxAttempts <= 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("maxAttempts = 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      Definition _definition_1 = e.getDefinition();
      if ((_definition_1 instanceof Program)) {
        _builder.append("\t\t");
        Definition _definition_2 = e.getDefinition();
        final Program program = ((Program) _definition_2);
        _builder.newLineIfNotEmpty();
        {
          Source _source = program.getSource();
          boolean _isMultiple = _source.isMultiple();
          boolean _equals = (_isMultiple == false);
          if (_equals) {
            _builder.append("\t\t");
            CharSequence _once = this.once(e);
            _builder.append(_once, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Source _source_1 = program.getSource();
          boolean _isMultiple_1 = _source_1.isMultiple();
          boolean _equals_1 = (_isMultiple_1 == true);
          if (_equals_1) {
            _builder.append("\t\t");
            CharSequence _multiple = this.multiple(e);
            _builder.append(_multiple, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence once(final MutatorEnvironment e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    Definition _definition = e.getDefinition();
    CharSequence _onceCompile = this.onceCompile(_definition);
    _builder.append(_onceCompile, "");
    _builder.newLineIfNotEmpty();
    int nMut = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("//MUTANTS: ");
    ArrayList<String> _arrayList = new ArrayList<String>();
    _builder.append(this.listNMuts = _arrayList, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(" ");
    while ((nMut < ((Program) e.getDefinition()).getNum())) {
      {
        this.listNMuts.add("");
        nMut = (nMut + 1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _execute = this.execute(e);
    _builder.append(_execute, "\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence multiple(final MutatorEnvironment e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("   ");
    Definition _definition = e.getDefinition();
    CharSequence _multipleCompile = this.multipleCompile(_definition);
    _builder.append(_multipleCompile, "   ");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    int nMut = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.append("//MUTANTS: ");
    ArrayList<String> _arrayList = new ArrayList<String>();
    _builder.append(this.listNMuts = _arrayList, "   ");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("    ");
    while ((nMut < ((Program) e.getDefinition()).getNum())) {
      {
        this.listNMuts.add("");
        nMut = (nMut + 1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    CharSequence _execute = this.execute(e);
    _builder.append(_execute, "   \t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence onceCompile(final Definition e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ecoreURI = \"");
    String _metamodel = e.getMetamodel();
    _builder.append(_metamodel, "");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Program)) {
        {
          Source _source = ((Program)e).getSource();
          boolean _isMultiple = _source.isMultiple();
          boolean _equals = (_isMultiple == false);
          if (_equals) {
            Source _source_1 = ((Program)e).getSource();
            String _path = _source_1.getPath();
            String modelPath = ((this.path + "/") + _path);
            _builder.newLineIfNotEmpty();
            String _output = ((Program)e).getOutput();
            String outputPath = ((this.path + "/") + _output);
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
            _builder.append("String modelPath = \"");
            _builder.append(modelPath, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("String modelsURI = \"");
            _builder.append(outputPath, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("HashMap<String, String> hashmapModelFilenames = new HashMap<String, String>();");
            _builder.newLine();
            _builder.append("File modelFile = new File(modelPath);");
            _builder.newLine();
            _builder.append("String modelFilename = modelFile.getPath();");
            _builder.newLine();
            _builder.append("hashmapModelFilenames.put(modelFilename, modelsURI + modelFile.getName().substring(0, modelFile.getName().length() - \".model\".length()));");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("//Load MetaModel");
    _builder.newLine();
    _builder.append("ArrayList<EPackage> packages = ModelManager.loadMetaModel(ecoreURI);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("HashMap<String, EObject> hashmapEObject = new HashMap<String, EObject>();");
    _builder.newLine();
    _builder.append("HashMap<String, List<EObject>> hashmapList = new HashMap<String, List<EObject>>();");
    _builder.newLine();
    _builder.newLine();
    {
      if ((e instanceof Program)) {
        _builder.append("//Load Model");
        _builder.newLine();
        _builder.append("HashSet<String> hashsetMutants = new HashSet<String>();");
        _builder.newLine();
        _builder.append("hashsetMutants.add(modelFilename);");
        _builder.newLine();
        _builder.append("Resource model = ModelManager.loadModel(packages, modelFilename);");
        _builder.newLine();
        _builder.append("Resource seed = ModelManager.loadModel(packages, modelFilename);");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence multipleCompile(final Definition e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ecoreURI = \"");
    String _metamodel = e.getMetamodel();
    _builder.append(_metamodel, "");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Program)) {
        {
          Source _source = ((Program)e).getSource();
          boolean _isMultiple = _source.isMultiple();
          boolean _equals = (_isMultiple == true);
          if (_equals) {
            Source _source_1 = ((Program)e).getSource();
            String _path = _source_1.getPath();
            String modelPath = ((this.path + "/") + _path);
            _builder.newLineIfNotEmpty();
            String _output = ((Program)e).getOutput();
            String outputPath = ((this.path + "/") + _output);
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
            _builder.append("String modelURI = \"");
            _builder.append(modelPath, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("String modelsURI = \"");
            _builder.append(outputPath, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("HashMap<String, String> hashmapModelFilenames = new HashMap<String, String>();");
            _builder.newLine();
            _builder.append("File[] files = new File(modelURI).listFiles();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("for (int i = 0; i < files.length; i++) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if (files[i].isFile() == true) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("String pathfile = files[i].getPath();");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("if (pathfile.endsWith(\".model\") == true) {");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("hashmapModelFilenames.put(pathfile, modelsURI + files[i].getName().substring(0, files[i].getName().length() - \".model\".length()));");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("//Load MetaModel");
    _builder.newLine();
    _builder.append("ArrayList<EPackage> packages = ModelManager.loadMetaModel(ecoreURI);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("HashMap<String, EObject> hashmapEObject = new HashMap<String, EObject>();");
    _builder.newLine();
    _builder.append("HashMap<String, List<EObject>> hashmapList = new HashMap<String, List<EObject>>();");
    _builder.newLine();
    _builder.newLine();
    {
      if ((e instanceof Program)) {
        _builder.append("//Load Model");
        _builder.newLine();
        _builder.append("Set<String> modelFilenames = hashmapModelFilenames.keySet();");
        _builder.newLine();
        _builder.append("for (String modelFilename : modelFilenames) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("HashSet<String> hashsetMutants = new HashSet<String>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("hashsetMutants.add(modelFilename);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Resource model = ModelManager.loadModel(packages, modelFilename);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Resource seed = ModelManager.loadModel(packages, modelFilename);");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence method(final AttributeSet e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EAttribute> _attribute = e.getAttribute();
      EAttribute _get = _attribute.get(0);
      boolean _notEquals = (!Objects.equal(_get, null));
      if (_notEquals) {
        EList<EAttribute> _attribute_1 = e.getAttribute();
        final EAttribute attribute = _attribute_1.get(0);
        _builder.newLineIfNotEmpty();
        _builder.append("//NAME:");
        String _name = attribute.getName();
        _builder.append(this.attributeName = _name, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("//NAME:");
        _builder.append(this.attributeName = "", "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((e instanceof AttributeInit)) {
        _builder.append("atts.put(\"");
        _builder.append(this.attributeName, "");
        _builder.append("\", ");
        AttributeType _value = ((AttributeInit)e).getValue();
        CharSequence _method = this.method(_value);
        _builder.append(_method, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((e instanceof AttributeUnset)) {
        _builder.append("   \t\t");
        _builder.append("atts.put(\"");
        _builder.append(this.attributeName, "   \t\t");
        _builder.append("\", null);");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((e instanceof AttributeReverse)) {
        _builder.append("   \t\t");
        _builder.append("atts.put(\"");
        _builder.append(this.attributeName, "   \t\t");
        _builder.append("\", new ReverseBooleanConfigurationStrategy(\"");
        _builder.append(this.attributeName, "   \t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence method(final ReferenceSet e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EReference> _reference = e.getReference();
      EReference _get = _reference.get(0);
      boolean _notEquals = (!Objects.equal(_get, null));
      if (_notEquals) {
        EList<EReference> _reference_1 = e.getReference();
        final EReference reference = _reference_1.get(0);
        _builder.newLineIfNotEmpty();
        _builder.append("//NAME:");
        String _name = reference.getName();
        _builder.append(this.referenceName = _name, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("//NAME:");
        _builder.append(this.referenceName = "", "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((e instanceof ReferenceInit)) {
        ObSelectionStrategy _object = ((ReferenceInit)e).getObject();
        CharSequence _method = this.method(_object);
        _builder.append(_method, "");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t");
        _builder.append("refs.put(\"");
        _builder.append(this.referenceName, "   \t\t");
        _builder.append("\", refSelection");
        _builder.append(this.nReference, "   \t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence method(final AttributeType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof StringType)) {
        CharSequence _method = this.method(((StringType) e));
        _builder.append(_method, "");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof DoubleType)) {
          CharSequence _method_1 = this.method(((DoubleType) e));
          _builder.append(_method_1, "");
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof BooleanType)) {
            CharSequence _method_2 = this.method(((BooleanType) e));
            _builder.append(_method_2, "");
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof IntegerType)) {
              CharSequence _method_3 = this.method(((IntegerType) e));
              _builder.append(_method_3, "");
              _builder.newLineIfNotEmpty();
            } else {
              if ((e instanceof ListStringType)) {
                CharSequence _method_4 = this.method(((ListStringType) e));
                _builder.append(_method_4, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final StringType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof SpecificStringType)) {
        _builder.append("new SpecificStringConfigurationStrategy(\"");
        String _value = ((SpecificStringType) e).getValue();
        _builder.append(_value, "");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof RandomStringType)) {
          _builder.append("\t\t    ");
          RandomStringType r = ((RandomStringType) e);
          _builder.newLineIfNotEmpty();
          _builder.append("new RandomStringConfigurationStrategy(");
          int _min = r.getMin();
          _builder.append(_min, "");
          _builder.append(", ");
          int _max = r.getMax();
          _builder.append(_max, "");
          _builder.append(", false)");
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof UpperStringType)) {
            {
              boolean _equals = this.attributeName.equals("");
              boolean _not = (!_equals);
              if (_not) {
                _builder.append("new UpperStringConfigurationStrategy(\"");
                _builder.append(this.attributeName, "");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("null");
                _builder.newLine();
              }
            }
          } else {
            if ((e instanceof LowerStringType)) {
              {
                boolean _equals_1 = this.attributeName.equals("");
                boolean _not_1 = (!_equals_1);
                if (_not_1) {
                  _builder.append("new LowerStringConfigurationStrategy(\"");
                  _builder.append(this.attributeName, "");
                  _builder.append("\")");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("null");
                  _builder.newLine();
                }
              }
            } else {
              if ((e instanceof CatStartStringType)) {
                {
                  boolean _equals_2 = this.attributeName.equals("");
                  boolean _not_2 = (!_equals_2);
                  if (_not_2) {
                    _builder.append("new CatStartStringConfigurationStrategy(\"");
                    String _value_1 = ((CatStartStringType) e).getValue();
                    _builder.append(_value_1, "");
                    _builder.append("\", \"");
                    _builder.append(this.attributeName, "");
                    _builder.append("\")");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("null");
                    _builder.newLine();
                  }
                }
              } else {
                if ((e instanceof CatEndStringType)) {
                  {
                    boolean _equals_3 = this.attributeName.equals("");
                    boolean _not_3 = (!_equals_3);
                    if (_not_3) {
                      _builder.append("new CatEndStringConfigurationStrategy(\"");
                      String _value_2 = ((CatEndStringType) e).getValue();
                      _builder.append(_value_2, "");
                      _builder.append("\", \"");
                      _builder.append(this.attributeName, "");
                      _builder.append("\")");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("null");
                      _builder.newLine();
                    }
                  }
                } else {
                  if ((e instanceof ReplaceStringType)) {
                    {
                      boolean _equals_4 = this.attributeName.equals("");
                      boolean _not_4 = (!_equals_4);
                      if (_not_4) {
                        _builder.append("new ReplaceStringConfigurationStrategy(\"");
                        _builder.append(this.attributeName, "");
                        _builder.append("\", \"");
                        String _oldstring = ((ReplaceStringType) e).getOldstring();
                        _builder.append(_oldstring, "");
                        _builder.append("\", \"");
                        String _newstring = ((ReplaceStringType) e).getNewstring();
                        _builder.append(_newstring, "");
                        _builder.append("\")");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("null");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final DoubleType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof SpecificDoubleType)) {
        _builder.append("new SpecificDoubleConfigurationStrategy(");
        double _value = ((SpecificDoubleType) e).getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof RandomDoubleType)) {
          RandomDoubleType r = ((RandomDoubleType) e);
          _builder.newLineIfNotEmpty();
          _builder.append("new RandomDoubleConfigurationStrategy(");
          double _min = r.getMin();
          _builder.append(_min, "");
          _builder.append(", ");
          double _max = r.getMax();
          _builder.append(_max, "");
          _builder.append(", false)");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final BooleanType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof SpecificBooleanType)) {
        _builder.append("new SpecificBooleanConfigurationStrategy(");
        boolean _isValue = ((SpecificBooleanType) e).isValue();
        _builder.append(_isValue, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof RandomBooleanType)) {
          _builder.append("new RandomBooleanConfigurationStrategy()");
          _builder.newLine();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final IntegerType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof SpecificIntegerType)) {
        _builder.append("new SpecificIntegerConfigurationStrategy(");
        int _value = ((SpecificIntegerType) e).getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof RandomIntegerType)) {
          RandomIntegerType r = ((RandomIntegerType) e);
          _builder.newLineIfNotEmpty();
          _builder.append("new RandomIntegerConfigurationStrategy(");
          int _min = r.getMin();
          _builder.append(_min, "");
          _builder.append(", ");
          int _max = r.getMax();
          _builder.append(_max, "");
          _builder.append(", false)\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final ListStringType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof ListStringType)) {
        {
          boolean _equals = this.attributeName.equals("");
          boolean _not = (!_equals);
          if (_not) {
            _builder.append("new ListStringConfigurationStrategy(\"");
            EList<String> _value = ((ListStringType) e).getValue();
            _builder.append(_value, "");
            _builder.append("\", \"");
            _builder.append(this.attributeName, "");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("null");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final ObSelectionStrategy e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("  \t\t");
    _builder.append("//REFERENCES COMPILES\t");
    _builder.append(this.nReference = (this.nReference + 1), "  \t\t");
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof RandomTypeSelection)) {
        _builder.append("RandomTypeSelection refRts");
        _builder.append(this.nReference, "");
        _builder.append(" = new RandomTypeSelection(packages, model, \"");
        EClass _type = ((RandomTypeSelection) e).getType();
        String _name = _type.getName();
        _builder.append(_name, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          boolean _and = false;
          Expression _expression = ((RandomTypeSelection)e).getExpression();
          boolean _notEquals = (!Objects.equal(_expression, null));
          if (!_notEquals) {
            _and = false;
          } else {
            boolean _notEquals_1 = (!Objects.equal(this.expressionList, null));
            _and = _notEquals_1;
          }
          if (_and) {
            _builder.append("List<EObject> refObjects");
            _builder.append(this.nReference, "");
            _builder.append(" = refRts");
            _builder.append(this.nReference, "");
            _builder.append(".getObjects();");
            _builder.newLineIfNotEmpty();
            _builder.append("//INDEX EXPRESSION: ");
            int _size = this.expressionList.size();
            int indexExpression = (_size - 1);
            _builder.newLineIfNotEmpty();
            _builder.append("Expression exp");
            Integer _get = this.expressionList.get(indexExpression);
            _builder.append(_get, "");
            _builder.append(" = new Expression();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t   \t\t");
            Expression _expression_1 = ((RandomTypeSelection)e).getExpression();
            CharSequence _method = this.method(_expression_1);
            _builder.append(_method, "\t   \t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("   \t\t\t");
            _builder.append("List<EObject> refSelectedObjects");
            _builder.append(this.nReference, "   \t\t\t");
            _builder.append(" = evaluate(refObjects");
            _builder.append(this.nReference, "   \t\t\t");
            _builder.append(", exp");
            Integer _get_1 = this.expressionList.get(indexExpression);
            _builder.append(_get_1, "   \t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("EObject refObject");
            _builder.append(this.nReference, "");
            _builder.append(" = null;");
            _builder.newLineIfNotEmpty();
            _builder.append("if (refSelectedObjects");
            _builder.append(this.nReference, "");
            _builder.append(".size() > 0) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("refObject");
            _builder.append(this.nReference, "\t");
            _builder.append(" = refSelectedObjects");
            _builder.append(this.nReference, "\t");
            _builder.append(".get(ModelManager.getRandomIndex(refSelectedObjects");
            _builder.append(this.nReference, "\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("EObject refObject");
            _builder.append(this.nReference, "");
            _builder.append(" = refRts");
            _builder.append(this.nReference, "");
            _builder.append(".getObject();");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("ObSelectionStrategy refSelection");
        _builder.append(this.nReference, "");
        _builder.append(" = null;");
        _builder.newLineIfNotEmpty();
        _builder.append("if (refObject");
        _builder.append(this.nReference, "");
        _builder.append(" != null) {");
        _builder.newLineIfNotEmpty();
        _builder.append("refSelection");
        _builder.append(this.nReference, "");
        _builder.append(" = ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("new SpecificObjectSelection(packages, model, refObject");
        _builder.append(this.nReference, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      } else {
        if ((e instanceof CompleteTypeSelection)) {
          _builder.append("RandomTypeSelection refRts");
          _builder.append(this.nReference, "");
          _builder.append(" = new RandomTypeSelection(packages, model, \"");
          EClass _type_1 = ((RandomTypeSelection) e).getType();
          String _name_1 = _type_1.getName();
          _builder.append(_name_1, "");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _builder.append("EObject refObject");
          _builder.append(this.nReference, "");
          _builder.append(" = refRts");
          _builder.append(this.nReference, "");
          _builder.append(".getObject();");
          _builder.newLineIfNotEmpty();
          _builder.append("ObSelectionStrategy refSelection");
          _builder.append(this.nReference, "");
          _builder.append(" = new SpecificObjectSelection(packages, model,\trefObject");
          _builder.append(this.nReference, "");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof SpecificObjectSelection)) {
            _builder.append("ObSelectionStrategy refSelection");
            _builder.append(this.nReference, "");
            _builder.append(" = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
            ObjectEmitter _objSel = ((SpecificObjectSelection) e).getObjSel();
            String _name_2 = _objSel.getName();
            _builder.append(_name_2, "");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence method(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//INDEX EXPRESSION: ");
    int _size = this.expressionList.size();
    final int indexExpression = (_size - 1);
    _builder.newLineIfNotEmpty();
    {
      Evaluation _first = exp.getFirst();
      if ((_first instanceof AttributeEvaluation)) {
        _builder.append("  \t\t");
        _builder.append("exp");
        Integer _get = this.expressionList.get(indexExpression);
        _builder.append(_get, "  \t\t");
        _builder.append(".first = new AttributeEvaluation();");
        _builder.newLineIfNotEmpty();
        _builder.append("  \t\t");
        _builder.append("//ATTRIBUTE: ");
        Evaluation _first_1 = exp.getFirst();
        final AttributeEvaluation attev = ((AttributeEvaluation) _first_1);
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t");
        _builder.append("((AttributeEvaluation) exp");
        Integer _get_1 = this.expressionList.get(indexExpression);
        _builder.append(_get_1, "   \t\t");
        _builder.append(".first).name = \"");
        EAttribute _name = attev.getName();
        String _name_1 = _name.getName();
        _builder.append(_name_1, "   \t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t");
        _builder.append("((AttributeEvaluation) exp");
        Integer _get_2 = this.expressionList.get(indexExpression);
        _builder.append(_get_2, "   \t\t");
        _builder.append(".first).operator = \"");
        Operator _operator = attev.getOperator();
        _builder.append(_operator, "   \t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        {
          AttributeType _value = attev.getValue();
          if ((_value instanceof StringType)) {
            _builder.append("   \t\t");
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_3 = this.expressionList.get(indexExpression);
            _builder.append(_get_3, "   \t\t");
            _builder.append(".first).value = \"");
            AttributeType _value_1 = attev.getValue();
            String _value_2 = ((SpecificStringType) _value_1).getValue();
            _builder.append(_value_2, "   \t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("   \t\t");
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_4 = this.expressionList.get(indexExpression);
            _builder.append(_get_4, "   \t\t");
            _builder.append(".first).type = \"String\";");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          AttributeType _value_3 = attev.getValue();
          if ((_value_3 instanceof DoubleType)) {
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_5 = this.expressionList.get(indexExpression);
            _builder.append(_get_5, "");
            _builder.append(".first).value = \"");
            AttributeType _value_4 = attev.getValue();
            double _value_5 = ((SpecificDoubleType) _value_4).getValue();
            _builder.append(_value_5, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_6 = this.expressionList.get(indexExpression);
            _builder.append(_get_6, "");
            _builder.append(".first).type = \"double\";");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          AttributeType _value_6 = attev.getValue();
          if ((_value_6 instanceof BooleanType)) {
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_7 = this.expressionList.get(indexExpression);
            _builder.append(_get_7, "");
            _builder.append(".first).value = \"");
            AttributeType _value_7 = attev.getValue();
            boolean _isValue = ((SpecificBooleanType) _value_7).isValue();
            _builder.append(_isValue, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_8 = this.expressionList.get(indexExpression);
            _builder.append(_get_8, "");
            _builder.append(".first).type = \"Boolean\";");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          AttributeType _value_8 = attev.getValue();
          if ((_value_8 instanceof IntegerType)) {
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_9 = this.expressionList.get(indexExpression);
            _builder.append(_get_9, "");
            _builder.append(".first).value = \"");
            AttributeType _value_9 = attev.getValue();
            int _value_10 = ((SpecificIntegerType) _value_9).getValue();
            _builder.append(_value_10, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("((AttributeEvaluation) exp");
            Integer _get_10 = this.expressionList.get(indexExpression);
            _builder.append(_get_10, "");
            _builder.append(".first).type = \"int\";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      Evaluation _first_2 = exp.getFirst();
      if ((_first_2 instanceof ReferenceEvaluation)) {
        _builder.append("exp");
        Integer _get_11 = this.expressionList.get(indexExpression);
        _builder.append(_get_11, "");
        _builder.append(".first = new ReferenceEvaluation();");
        _builder.newLineIfNotEmpty();
        _builder.append("//REFERENCE: ");
        Evaluation _first_3 = exp.getFirst();
        final ReferenceEvaluation refev = ((ReferenceEvaluation) _first_3);
        _builder.newLineIfNotEmpty();
        {
          EReference _name_2 = refev.getName();
          boolean _notEquals = (!Objects.equal(_name_2, null));
          if (_notEquals) {
            _builder.append("((ReferenceEvaluation) exp");
            Integer _get_12 = this.expressionList.get(indexExpression);
            _builder.append(_get_12, "");
            _builder.append(".first).name = \"");
            EReference _name_3 = refev.getName();
            String _name_4 = _name_3.getName();
            _builder.append(_name_4, "");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("((ReferenceEvaluation) exp");
            Integer _get_13 = this.expressionList.get(indexExpression);
            _builder.append(_get_13, "");
            _builder.append(".first).name = null;");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("((ReferenceEvaluation) exp");
        Integer _get_14 = this.expressionList.get(indexExpression);
        _builder.append(_get_14, "");
        _builder.append(".first).operator = \"");
        Operator _operator_1 = refev.getOperator();
        _builder.append(_operator_1, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        {
          ObSelectionStrategy _value_11 = refev.getValue();
          boolean _equals = Objects.equal(_value_11, null);
          if (_equals) {
            _builder.append("((ReferenceEvaluation) exp");
            Integer _get_15 = this.expressionList.get(indexExpression);
            _builder.append(_get_15, "");
            _builder.append(".first).value = null;");
            _builder.newLineIfNotEmpty();
          } else {
            ObSelectionStrategy _value_12 = refev.getValue();
            if ((_value_12 instanceof SpecificObjectSelection)) {
              {
                EReference _refType = refev.getRefType();
                boolean _equals_1 = Objects.equal(_refType, null);
                if (_equals_1) {
                  _builder.append("((ReferenceEvaluation) exp");
                  Integer _get_16 = this.expressionList.get(indexExpression);
                  _builder.append(_get_16, "");
                  _builder.append(".first).value = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                  ObSelectionStrategy _value_13 = refev.getValue();
                  ObjectEmitter _objSel = ((SpecificObjectSelection) _value_13).getObjSel();
                  String _name_5 = _objSel.getName();
                  _builder.append(_name_5, "");
                  _builder.append("\")).getObject();");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("EObject srcObjExp = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                  ObSelectionStrategy _value_14 = refev.getValue();
                  ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _value_14).getObjSel();
                  String _name_6 = _objSel_1.getName();
                  _builder.append(_name_6, "");
                  _builder.append("\")).getObject();");
                  _builder.newLineIfNotEmpty();
                  _builder.append("for (EReference ref : srcObjExp.eClass().getEAllReferences()) {");
                  _builder.newLine();
                  _builder.append("\t\t\t\t");
                  _builder.append("if (ref.getName().equals(\"");
                  EReference _refType_1 = refev.getRefType();
                  String _name_7 = _refType_1.getName();
                  _builder.append(_name_7, "\t\t\t\t");
                  _builder.append("\")) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t\t");
                  _builder.append("((ReferenceEvaluation) exp");
                  Integer _get_17 = this.expressionList.get(indexExpression);
                  _builder.append(_get_17, "\t\t\t\t\t");
                  _builder.append(".first).value = srcObjExp.eGet(ref);\t\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t\t\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            } else {
              {
                ObSelectionStrategy _value_15 = refev.getValue();
                if ((_value_15 instanceof RandomTypeSelection)) {
                  {
                    ObSelectionStrategy _value_16 = refev.getValue();
                    Expression _expression = _value_16.getExpression();
                    if ((_expression instanceof Expression)) {
                      _builder.append("//EXPRESSION LEVEL: ");
                      _builder.append(this.nExpression = (this.nExpression + 1), "");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t   \t\t");
                      _builder.append("//EXPRESSION LEVEL: ");
                      boolean _add = this.expressionList.add(Integer.valueOf(this.nExpression));
                      _builder.append(_add, "\t   \t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t   \t\t");
                      _builder.append("//INDEX EXPRESSION: ");
                      int _size_1 = this.expressionList.size();
                      final int nestedIndexExpression = (_size_1 - 1);
                      _builder.newLineIfNotEmpty();
                      _builder.append("RandomTypeSelection expRts");
                      Integer _get_18 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_18, "");
                      _builder.append(" = new RandomTypeSelection(packages, model, \"");
                      ObSelectionStrategy _value_17 = refev.getValue();
                      EClass _type = ((RandomTypeSelection) _value_17).getType();
                      String _name_8 = _type.getName();
                      _builder.append(_name_8, "");
                      _builder.append("\");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("   \t\t\t");
                      _builder.append("List<EObject> expObjects");
                      Integer _get_19 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_19, "   \t\t\t");
                      _builder.append(" = expRts");
                      Integer _get_20 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_20, "   \t\t\t");
                      _builder.append(".getObjects();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t   \t\t");
                      _builder.append("Expression exp");
                      Integer _get_21 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_21, "\t   \t\t");
                      _builder.append(" = new Expression();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t   \t\t");
                      ObSelectionStrategy _value_18 = refev.getValue();
                      Expression _expression_1 = _value_18.getExpression();
                      Object _method = this.method(_expression_1);
                      _builder.append(_method, "\t   \t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("   \t\t\t");
                      _builder.append("List<EObject> selectedObjects");
                      Integer _get_22 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_22, "   \t\t\t");
                      _builder.append(" = evaluate(expObjects");
                      Integer _get_23 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_23, "   \t\t\t");
                      _builder.append(", exp");
                      Integer _get_24 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_24, "   \t\t\t");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("EObject object");
                      Integer _get_25 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_25, "");
                      _builder.append(" = null;");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if (selectedObjects");
                      Integer _get_26 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_26, "");
                      _builder.append(".size() > 0) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("object");
                      Integer _get_27 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_27, "\t");
                      _builder.append(" = selectedObjects");
                      Integer _get_28 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_28, "\t");
                      _builder.append(".get(ModelManager.getRandomIndex(selectedObjects");
                      Integer _get_29 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_29, "\t");
                      _builder.append("));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t   \t\t");
                      _builder.append("((ReferenceEvaluation) exp");
                      Integer _get_30 = this.expressionList.get(indexExpression);
                      _builder.append(_get_30, "\t   \t\t");
                      _builder.append(".first).value = new SpecificObjectSelection(packages, model, object");
                      Integer _get_31 = this.expressionList.get(nestedIndexExpression);
                      _builder.append(_get_31, "\t   \t\t");
                      _builder.append(").getObject();");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("((ReferenceEvaluation) exp");
                      Integer _get_32 = this.expressionList.get(indexExpression);
                      _builder.append(_get_32, "");
                      _builder.append(".first).value = new RandomTypeSelection(packages, model, \"");
                      ObSelectionStrategy _value_19 = refev.getValue();
                      EClass _type_1 = ((RandomTypeSelection) _value_19).getType();
                      String _name_9 = _type_1.getName();
                      _builder.append(_name_9, "");
                      _builder.append("\").getObject();");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("   \t\t");
    _builder.append("exp");
    Integer _get_33 = this.expressionList.get(indexExpression);
    _builder.append(_get_33, "   \t\t");
    _builder.append(".operator = new ArrayList<Operator>();");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t");
    _builder.append("//OPNAME: ");
    int opName = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<BinaryOperator> _operator_2 = exp.getOperator();
      for(final BinaryOperator op : _operator_2) {
        _builder.append("Operator op");
        _builder.append(opName, "");
        _builder.append("_");
        Integer _get_34 = this.expressionList.get(indexExpression);
        _builder.append(_get_34, "");
        _builder.append(" = new Operator();");
        _builder.newLineIfNotEmpty();
        _builder.append("op");
        _builder.append(opName, "");
        _builder.append("_");
        Integer _get_35 = this.expressionList.get(indexExpression);
        _builder.append(_get_35, "");
        _builder.append(".type = \"");
        LogicOperator _type_2 = op.getType();
        _builder.append(_type_2, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("exp");
        Integer _get_36 = this.expressionList.get(indexExpression);
        _builder.append(_get_36, "");
        _builder.append(".operator.add(op");
        _builder.append(opName, "");
        _builder.append("_");
        Integer _get_37 = this.expressionList.get(indexExpression);
        _builder.append(_get_37, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("//OPNAME + 1: ");
        _builder.append(opName = (opName + 1), "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("   \t\t");
    _builder.append("exp");
    Integer _get_38 = this.expressionList.get(indexExpression);
    _builder.append(_get_38, "   \t\t");
    _builder.append(".second = new ArrayList<Evaluation>();");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t");
    _builder.append("//EVNAME: ");
    int evName = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Evaluation> _second = exp.getSecond();
      for(final Evaluation ev : _second) {
        {
          if ((ev instanceof AttributeEvaluation)) {
            _builder.append("   \t\t\t");
            _builder.append("AttributeEvaluation ev");
            _builder.append(evName, "   \t\t\t");
            _builder.append("_");
            Integer _get_39 = this.expressionList.get(indexExpression);
            _builder.append(_get_39, "   \t\t\t");
            _builder.append(" = new AttributeEvaluation();");
            _builder.newLineIfNotEmpty();
            _builder.append("   \t\t\t");
            _builder.append("ev");
            _builder.append(evName, "   \t\t\t");
            _builder.append("_");
            Integer _get_40 = this.expressionList.get(indexExpression);
            _builder.append(_get_40, "   \t\t\t");
            _builder.append(".name = \"");
            EAttribute _name_10 = ((AttributeEvaluation)ev).getName();
            String _name_11 = _name_10.getName();
            _builder.append(_name_11, "   \t\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("   \t\t\t");
            _builder.append("ev");
            _builder.append(evName, "   \t\t\t");
            _builder.append("_");
            Integer _get_41 = this.expressionList.get(indexExpression);
            _builder.append(_get_41, "   \t\t\t");
            _builder.append(".operator = \"");
            Operator _operator_3 = ((AttributeEvaluation)ev).getOperator();
            _builder.append(_operator_3, "   \t\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            {
              AttributeType _value_20 = ((AttributeEvaluation)ev).getValue();
              if ((_value_20 instanceof StringType)) {
                _builder.append("   \t\t\t");
                _builder.append("ev");
                _builder.append(evName, "   \t\t\t");
                _builder.append("_");
                Integer _get_42 = this.expressionList.get(indexExpression);
                _builder.append(_get_42, "   \t\t\t");
                _builder.append(".value = \"");
                AttributeType _value_21 = ((AttributeEvaluation)ev).getValue();
                String _value_22 = ((SpecificStringType) _value_21).getValue();
                _builder.append(_value_22, "   \t\t\t");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t");
                _builder.append("ev");
                _builder.append(evName, "   \t\t\t");
                _builder.append("_");
                Integer _get_43 = this.expressionList.get(indexExpression);
                _builder.append(_get_43, "   \t\t\t");
                _builder.append(".type = \"String\";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              AttributeType _value_23 = ((AttributeEvaluation)ev).getValue();
              if ((_value_23 instanceof DoubleType)) {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_44 = this.expressionList.get(indexExpression);
                _builder.append(_get_44, "");
                _builder.append(".value = \"");
                AttributeType _value_24 = ((AttributeEvaluation)ev).getValue();
                double _value_25 = ((SpecificDoubleType) _value_24).getValue();
                _builder.append(_value_25, "");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_45 = this.expressionList.get(indexExpression);
                _builder.append(_get_45, "");
                _builder.append(".type = \"double\";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              AttributeType _value_26 = ((AttributeEvaluation)ev).getValue();
              if ((_value_26 instanceof BooleanType)) {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_46 = this.expressionList.get(indexExpression);
                _builder.append(_get_46, "");
                _builder.append(".value = \"");
                AttributeType _value_27 = ((AttributeEvaluation)ev).getValue();
                boolean _isValue_1 = ((SpecificBooleanType) _value_27).isValue();
                _builder.append(_isValue_1, "");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_47 = this.expressionList.get(indexExpression);
                _builder.append(_get_47, "");
                _builder.append(".type = \"Boolean\";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              AttributeType _value_28 = ((AttributeEvaluation)ev).getValue();
              if ((_value_28 instanceof IntegerType)) {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_48 = this.expressionList.get(indexExpression);
                _builder.append(_get_48, "");
                _builder.append(".value = \"");
                AttributeType _value_29 = ((AttributeEvaluation)ev).getValue();
                int _value_30 = ((SpecificIntegerType) _value_29).getValue();
                _builder.append(_value_30, "");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_49 = this.expressionList.get(indexExpression);
                _builder.append(_get_49, "");
                _builder.append(".type = \"int\";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          if ((ev instanceof ReferenceEvaluation)) {
            _builder.append("ReferenceEvaluation ev");
            _builder.append(evName, "");
            _builder.append("_");
            Integer _get_50 = this.expressionList.get(indexExpression);
            _builder.append(_get_50, "");
            _builder.append(" = new ReferenceEvaluation();");
            _builder.newLineIfNotEmpty();
            {
              EReference _name_12 = ((ReferenceEvaluation)ev).getName();
              boolean _notEquals_1 = (!Objects.equal(_name_12, null));
              if (_notEquals_1) {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_51 = this.expressionList.get(indexExpression);
                _builder.append(_get_51, "");
                _builder.append(".name = \"");
                EReference _name_13 = ((ReferenceEvaluation)ev).getName();
                String _name_14 = _name_13.getName();
                _builder.append(_name_14, "");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_52 = this.expressionList.get(indexExpression);
                _builder.append(_get_52, "");
                _builder.append(".name = null;");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("   \t\t\t");
            _builder.append("ev");
            _builder.append(evName, "   \t\t\t");
            _builder.append("_");
            Integer _get_53 = this.expressionList.get(indexExpression);
            _builder.append(_get_53, "   \t\t\t");
            _builder.append(".operator = \"");
            Operator _operator_4 = ((ReferenceEvaluation)ev).getOperator();
            _builder.append(_operator_4, "   \t\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            {
              ObSelectionStrategy _value_31 = ((ReferenceEvaluation)ev).getValue();
              boolean _equals_2 = Objects.equal(_value_31, null);
              if (_equals_2) {
                _builder.append("ev");
                _builder.append(evName, "");
                _builder.append("_");
                Integer _get_54 = this.expressionList.get(indexExpression);
                _builder.append(_get_54, "");
                _builder.append(".value = null;");
                _builder.newLineIfNotEmpty();
              } else {
                ObSelectionStrategy _value_32 = ((ReferenceEvaluation)ev).getValue();
                if ((_value_32 instanceof SpecificObjectSelection)) {
                  {
                    EReference _refType_2 = ((ReferenceEvaluation)ev).getRefType();
                    boolean _equals_3 = Objects.equal(_refType_2, null);
                    if (_equals_3) {
                      _builder.append("   \t\t\t");
                      _builder.append("ev");
                      _builder.append(evName, "   \t\t\t");
                      _builder.append("_");
                      Integer _get_55 = this.expressionList.get(indexExpression);
                      _builder.append(_get_55, "   \t\t\t");
                      _builder.append(".value = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                      ObSelectionStrategy _value_33 = ((ReferenceEvaluation)ev).getValue();
                      ObjectEmitter _objSel_2 = ((SpecificObjectSelection) _value_33).getObjSel();
                      String _name_15 = _objSel_2.getName();
                      _builder.append(_name_15, "   \t\t\t");
                      _builder.append("\")).getObject();");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("EObject srcObjExp");
                      _builder.append(evName, "");
                      _builder.append("_");
                      Integer _get_56 = this.expressionList.get(indexExpression);
                      _builder.append(_get_56, "");
                      _builder.append(" = new SpecificObjectSelection(packages, model, hmObjects.get(\"");
                      ObSelectionStrategy _value_34 = ((ReferenceEvaluation)ev).getValue();
                      ObjectEmitter _objSel_3 = ((SpecificObjectSelection) _value_34).getObjSel();
                      String _name_16 = _objSel_3.getName();
                      _builder.append(_name_16, "");
                      _builder.append("\")).getObject();");
                      _builder.newLineIfNotEmpty();
                      _builder.append("for (EReference ref : srcObjExp");
                      _builder.append(evName, "");
                      _builder.append("_");
                      Integer _get_57 = this.expressionList.get(indexExpression);
                      _builder.append(_get_57, "");
                      _builder.append(".eClass().getEAllReferences()) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t");
                      _builder.append("if (ref.getName().equals(\"");
                      EReference _refType_3 = ((ReferenceEvaluation)ev).getRefType();
                      String _name_17 = _refType_3.getName();
                      _builder.append(_name_17, "\t\t\t\t\t\t");
                      _builder.append("\")) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t\t");
                      _builder.append("ev");
                      _builder.append(evName, "\t\t\t\t\t\t\t");
                      _builder.append("_");
                      Integer _get_58 = this.expressionList.get(indexExpression);
                      _builder.append(_get_58, "\t\t\t\t\t\t\t");
                      _builder.append(".value = srcObjExp");
                      _builder.append(evName, "\t\t\t\t\t\t\t");
                      _builder.append("_");
                      Integer _get_59 = this.expressionList.get(indexExpression);
                      _builder.append(_get_59, "\t\t\t\t\t\t\t");
                      _builder.append(".eGet(ref);\t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                } else {
                  {
                    ObSelectionStrategy _value_35 = ((ReferenceEvaluation)ev).getValue();
                    if ((_value_35 instanceof RandomTypeSelection)) {
                      {
                        ObSelectionStrategy _value_36 = ((ReferenceEvaluation)ev).getValue();
                        Expression _expression_2 = _value_36.getExpression();
                        if ((_expression_2 instanceof Expression)) {
                          _builder.append("//EXPRESSION LEVEL: ");
                          _builder.append(this.nExpression = (this.nExpression + 1), "");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t   \t\t");
                          _builder.append("//EXPRESSION LEVEL: ");
                          boolean _add_1 = this.expressionList.add(Integer.valueOf(this.nExpression));
                          _builder.append(_add_1, "\t\t   \t\t");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t   \t\t");
                          _builder.append("//INDEX EXPRESSION: ");
                          int _size_2 = this.expressionList.size();
                          final int nestedIndexExpression_1 = (_size_2 - 1);
                          _builder.newLineIfNotEmpty();
                          _builder.append("RandomTypeSelection expRts");
                          Integer _get_60 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_60, "");
                          _builder.append(" = new RandomTypeSelection(packages, model, \"");
                          ObSelectionStrategy _value_37 = ((ReferenceEvaluation)ev).getValue();
                          EClass _type_3 = ((RandomTypeSelection) _value_37).getType();
                          String _name_18 = _type_3.getName();
                          _builder.append(_name_18, "");
                          _builder.append("\");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("   \t\t\t\t");
                          _builder.append("List<EObject> expObjects");
                          Integer _get_61 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_61, "   \t\t\t\t");
                          _builder.append(" = expRts");
                          Integer _get_62 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_62, "   \t\t\t\t");
                          _builder.append(".getObjects();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t   \t\t\t");
                          _builder.append("Expression exp");
                          Integer _get_63 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_63, "\t   \t\t\t");
                          _builder.append(" = new Expression();");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t   \t\t\t");
                          ObSelectionStrategy _value_38 = ((ReferenceEvaluation)ev).getValue();
                          Expression _expression_3 = _value_38.getExpression();
                          Object _method_1 = this.method(_expression_3);
                          _builder.append(_method_1, "\t   \t\t\t");
                          _builder.newLineIfNotEmpty();
                          _builder.append("   \t\t\t\t");
                          _builder.append("List<EObject> selectedObjects");
                          _builder.append(evName, "   \t\t\t\t");
                          _builder.append("_");
                          Integer _get_64 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_64, "   \t\t\t\t");
                          _builder.append(" = evaluate(expObjects");
                          Integer _get_65 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_65, "   \t\t\t\t");
                          _builder.append(", exp");
                          Integer _get_66 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_66, "   \t\t\t\t");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("EObject object");
                          _builder.append(evName, "");
                          _builder.append("_");
                          Integer _get_67 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_67, "");
                          _builder.append(" = null;");
                          _builder.newLineIfNotEmpty();
                          _builder.append("if (selectedObjects");
                          _builder.append(evName, "");
                          _builder.append("_");
                          Integer _get_68 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_68, "");
                          _builder.append(".size() > 0) {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("object");
                          _builder.append(evName, "\t");
                          _builder.append("_");
                          Integer _get_69 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_69, "\t");
                          _builder.append(" = selectedObjects");
                          _builder.append(evName, "\t");
                          _builder.append("_");
                          Integer _get_70 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_70, "\t");
                          _builder.append(".get(ModelManager.getRandomIndex(selectedObjects");
                          _builder.append(evName, "\t");
                          _builder.append("_");
                          Integer _get_71 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_71, "\t");
                          _builder.append("));");
                          _builder.newLineIfNotEmpty();
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("ev");
                          _builder.append(evName, "");
                          _builder.append("_");
                          Integer _get_72 = this.expressionList.get(indexExpression);
                          _builder.append(_get_72, "");
                          _builder.append(".value = new SpecificObjectSelection(packages, model, object");
                          _builder.append(evName, "");
                          _builder.append("_");
                          Integer _get_73 = this.expressionList.get(nestedIndexExpression_1);
                          _builder.append(_get_73, "");
                          _builder.append(").getObject();");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("ev");
                          _builder.append(evName, "");
                          _builder.append("_");
                          Integer _get_74 = this.expressionList.get(indexExpression);
                          _builder.append(_get_74, "");
                          _builder.append(".value = new RandomTypeSelection(packages, model, \"");
                          ObSelectionStrategy _value_39 = ((ReferenceEvaluation)ev).getValue();
                          EClass _type_4 = ((RandomTypeSelection) _value_39).getType();
                          String _name_19 = _type_4.getName();
                          _builder.append(_name_19, "");
                          _builder.append("\").getObject();");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("   \t\t");
        _builder.append("exp");
        Integer _get_75 = this.expressionList.get(indexExpression);
        _builder.append(_get_75, "   \t\t");
        _builder.append(".second.add(ev");
        _builder.append(evName, "   \t\t");
        _builder.append("_");
        Integer _get_76 = this.expressionList.get(indexExpression);
        _builder.append(_get_76, "   \t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("//EVNAME + 1: ");
        _builder.append(evName = (evName + 1), "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence execute(final MutatorEnvironment e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("   \t\t");
    _builder.append("Bundle bundle = Platform.getBundle(\"MutProgram\");");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("URL fileURL = bundle.getEntry(\"/models/MutatorEnvironment.ecore\");");
    _builder.newLine();
    _builder.append("String mutatorecore = FileLocator.resolve(fileURL).getFile();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Load MetaModel");
    _builder.newLine();
    _builder.append("ArrayList<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);");
    _builder.newLine();
    _builder.append("Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI(\"");
    _builder.append(this.xmiFileName, "");
    _builder.append("\").toFileString());");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("HashMap<String, EObject> hmMutator = getMutators(ModelManager.getObjects(mutatormodel));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("   \t   \t");
    _builder.append("for (int i = 0; i < ");
    int _size = this.listNMuts.size();
    _builder.append(_size, "   \t   \t");
    _builder.append("; i++) {");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t   \t\t");
    _builder.append("String mutFilename = hashmapModelFilenames.get(modelFilename) + \"/\" + \"Output\" + i + \".model\";");
    _builder.newLine();
    _builder.append("   \t   \t\t");
    _builder.append("boolean isRepeated = true;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("int attempts = 0;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("int max = 0;");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("while ((isRepeated == true) && (attempts < maxAttempts)) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Mutations muts = AppliedMutationsFactory.eINSTANCE.createMutations();");
    _builder.newLine();
    _builder.append("   \t\t\t\t");
    _builder.append("attempts++;");
    _builder.newLine();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nMethod = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nCompositeMethod = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nCompositeCommands = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nMutation = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nRegistryMutation = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nRegistryMethod = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nCompositeMethod = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.append("//RESET COUNTER: ");
    _builder.append(this.nCompositeRegistryMethod = 0, "   \t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t\t\t\t");
    _builder.newLine();
    {
      EList<Mutator> _commands = e.getCommands();
      for(final Mutator c : _commands) {
        {
          if ((c instanceof Mutator)) {
            _builder.append("   \t   \t\t\t");
            CharSequence _compile = this.compile(c);
            _builder.append(_compile, "   \t   \t\t\t");
            _builder.append("\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("      ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// COMPLETES MUTANT");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("int valid = complete(packages, model);");
    _builder.newLine();
    _builder.append("\t       \t\t");
    _builder.append("if (valid != 1) {");
    _builder.newLine();
    _builder.append("\t       \t\t\t");
    _builder.append("// VERIFY THE OCL CONSTRAINTS");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("if (matchesOCL(model) == true) {");
    _builder.newLine();
    _builder.append("\t   \t\t\t\t\t");
    _builder.append("// VERIFY IF MUTANT IS DIFFERENT");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t");
    _builder.append("isRepeated = different(packages, model, hashsetMutants);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t");
    _builder.append("System.out.println(\"isRepeated: \" + isRepeated);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t");
    _builder.append("// IF MUTANT IS DIFFERENT STORES IT AND PROCEEDS");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t");
    _builder.append("if (isRepeated == false) {");
    _builder.newLine();
    _builder.append("\t      \t\t\t");
    _builder.append("File outputFolder = new File(hashmapModelFilenames.get(modelFilename));");
    _builder.newLine();
    _builder.append("      \t\t\t\t\t\t");
    _builder.append("if (outputFolder.exists() != true) {");
    _builder.newLine();
    _builder.append("      \t\t\t\t\t\t\t");
    _builder.append("outputFolder.mkdir();");
    _builder.newLine();
    _builder.append("      \t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t\t\t\t\t\t");
    _builder.append("ModelManager.saveOutModel(model, mutFilename);");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t");
    _builder.append("hashsetMutants.add(mutFilename);");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t");
    _builder.append("if (registry == true) {");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t\t");
    _builder.append("Resource mutant = ModelManager.loadModel(packages, mutFilename);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (AppMutation mut : muts.getMuts()) {");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t\t\t");
    _builder.append("if (mut instanceof ObjectCreated) {");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t\t\t\t");
    _builder.append("List<EObject> emuts = ((ObjectCreated) mut).getObject();");
    _builder.newLine();
    _builder.append("   \t       \t\t\t      \t\t");
    _builder.append("EObject emutated = emuts.get(0);");
    _builder.newLine();
    _builder.append("   \t       \t\t\t      \t\t");
    _builder.append("emuts.remove(0);");
    _builder.newLine();
    _builder.append("   \t       \t\t\t      \t\t");
    _builder.append("emuts.add(ModelManager.getObject(mutant, emutated));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (mut instanceof ReferenceCreated) {");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t");
    _builder.append("List<EReference> emuts = ((ReferenceCreated) mut).getRef();");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t");
    _builder.append("EReference emutated = emuts.get(0);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t");
    _builder.append("emuts.remove(0);");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t");
    _builder.append("emuts.add(ModelManager.getReference(mutant, emutated));");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t       \t\t\t      \t\t");
    _builder.append("File registryFolder = new File(hashmapModelFilenames.get(modelFilename) + \"/registry\");");
    _builder.newLine();
    _builder.append("    \t   \t\t\t      \t\t");
    _builder.append("if (registryFolder.exists() != true) {");
    _builder.newLine();
    _builder.append("       \t\t\t\t      \t\t\t");
    _builder.append("registryFolder.mkdir();");
    _builder.newLine();
    _builder.append("       \t\t\t\t      \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       \t\t\t\t      \t\t");
    _builder.append("String registryFilename = hashmapModelFilenames.get(modelFilename) + \"/registry/\" + \"Output\" + i + \"Registry.model\";");
    _builder.newLine();
    _builder.append("       \t\t\t    \t  \t\t");
    _builder.append("ModelManager.createModel(muts, registryFilename);");
    _builder.newLine();
    _builder.append("       \t\t\t      \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}   ");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("model.load(null); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}   ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Mutator e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof CompositeMutator)) {
        _builder.append("//COUNTER: ");
        int _mutatorSize = ModelManager.mutatorSize(((CompositeMutator)e));
        int _plus = (this.nMethod + _mutatorSize);
        _builder.append(this.nMethod = _plus, "");
        _builder.newLineIfNotEmpty();
        _builder.append("//COMPOSITE REGISTRY COUNTER: ");
        _builder.append(this.nCompositeRegistryMethod = (this.nCompositeRegistryMethod + 1), "");
        _builder.newLineIfNotEmpty();
        {
          int _max = ((CompositeMutator)e).getMax();
          int _min = ((CompositeMutator)e).getMin();
          int _minus = (_max - _min);
          boolean _greaterThan = (_minus > 0);
          if (_greaterThan) {
            _builder.append("int max");
            _builder.append(this.nCompositeCommands, "");
            _builder.append(" = getRandom(");
            int _max_1 = ((CompositeMutator)e).getMax();
            int _min_1 = ((CompositeMutator)e).getMin();
            int _minus_1 = (_max_1 - _min_1);
            _builder.append(_minus_1, "");
            _builder.append(") + ");
            int _min_2 = ((CompositeMutator)e).getMin();
            _builder.append(_min_2, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _and = false;
          int _min_3 = ((CompositeMutator)e).getMin();
          boolean _equals = (_min_3 == 0);
          if (!_equals) {
            _and = false;
          } else {
            int _max_2 = ((CompositeMutator)e).getMax();
            boolean _equals_1 = (_max_2 == 0);
            _and = _equals_1;
          }
          if (_and) {
            _builder.append("int max");
            _builder.append(this.nCompositeCommands, "");
            _builder.append(" = 1;");
            _builder.newLineIfNotEmpty();
          } else {
            int _min_4 = ((CompositeMutator)e).getMin();
            int _max_3 = ((CompositeMutator)e).getMax();
            boolean _equals_2 = (_min_4 == _max_3);
            if (_equals_2) {
              _builder.append("int max");
              _builder.append(this.nCompositeCommands, "");
              _builder.append(" = ");
              int _min_5 = ((CompositeMutator)e).getMin();
              _builder.append(_min_5, "");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("for (int j");
        _builder.append(this.nCompositeCommands, "");
        _builder.append(" = 0; j");
        _builder.append(this.nCompositeCommands, "");
        _builder.append(" < max");
        _builder.append(this.nCompositeCommands, "");
        _builder.append("; j");
        _builder.append(this.nCompositeCommands, "");
        _builder.append("++) {");
        _builder.newLineIfNotEmpty();
        {
          String _name = ((CompositeMutator)e).getName();
          boolean _notEquals = (!Objects.equal(_name, null));
          if (_notEquals) {
            _builder.append("//NAME:");
            String _name_1 = ((CompositeMutator)e).getName();
            String _string = Integer.valueOf(this.nCompositeCommands).toString();
            String _plus_1 = (_name_1 + _string);
            _builder.append(this.compositeCommandName = _plus_1, "");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("//NAME:");
            String _string_1 = Integer.valueOf(this.nCompositeCommands).toString();
            _builder.append(this.compositeCommandName = _string_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("//COMPOSITE METHOD NAME:");
        String _get = this.compositeCommands.get(this.nCompositeCommands);
        _builder.append(this.compositeMethodName = _get, "");
        _builder.newLineIfNotEmpty();
        _builder.append("//COMMAND: ");
        int _compositeMutatorSize = ModelManager.compositeMutatorSize(((CompositeMutator)e));
        int _plus_2 = (this.nCompositeCommands + _compositeMutatorSize);
        _builder.append(this.nCompositeCommands = _plus_2, "");
        _builder.newLineIfNotEmpty();
        _builder.append("ArrayList<Mutator> l");
        _builder.append(this.compositeCommandName, "");
        _builder.append(" = ");
        _builder.append(this.compositeMethodName, "");
        _builder.append("(packages, model, hashmapEObject, hashmapList);");
        _builder.newLineIfNotEmpty();
        _builder.append("//COUNTER: ");
        _builder.append(this.nRegistryMutation = (this.nRegistryMutation + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//REGISTRY METHOD NAME:");
        String _string_2 = Integer.valueOf(this.nCompositeRegistryMethod).toString();
        String _plus_3 = ("compositeRegistry" + _string_2);
        _builder.append(this.compositeRegistryMethodName = _plus_3, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("if (l");
        _builder.append(this.compositeCommandName, "");
        _builder.append(" != null) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for (Mutator mut : l");
        _builder.append(this.compositeCommandName, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          if ((this.executeMutation == true)) {
            _builder.append("\t\t");
            _builder.append("if (mut != null) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("mut.mutate();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("AppMutation appMut = ");
        _builder.append(this.compositeRegistryMethodName, "\t");
        _builder.append("(l");
        _builder.append(this.compositeCommandName, "\t");
        _builder.append(", hmMutator, seed);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if (appMut != null) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("muts.getMuts().add(appMut);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("//COUNTER: ");
        int _mutatorSize_1 = ModelManager.mutatorSize(((CompositeMutator)e));
        int _plus_4 = (this.nRegistryMutation + _mutatorSize_1);
        _builder.append(this.nRegistryMutation = _plus_4, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("   \t   \t");
        _builder.append("//COUNTER: ");
        _builder.append(this.nMethod = (this.nMethod + 1), "   \t   \t");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
        _builder.append("//COMMAND: ");
        _builder.append(this.nCommands = (this.nCommands + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//REGISTRY COUNTER: ");
        _builder.append(this.nRegistryMethod = (this.nRegistryMethod + 1), "");
        _builder.newLineIfNotEmpty();
        {
          int _max_4 = e.getMax();
          int _min_6 = e.getMin();
          int _minus_2 = (_max_4 - _min_6);
          boolean _greaterThan_1 = (_minus_2 > 0);
          if (_greaterThan_1) {
            _builder.append("max = getRandom(");
            int _max_5 = e.getMax();
            int _min_7 = e.getMin();
            int _minus_3 = (_max_5 - _min_7);
            _builder.append(_minus_3, "");
            _builder.append(") + ");
            int _min_8 = e.getMin();
            _builder.append(_min_8, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _and_1 = false;
          int _min_9 = e.getMin();
          boolean _equals_3 = (_min_9 == 0);
          if (!_equals_3) {
            _and_1 = false;
          } else {
            int _max_6 = e.getMax();
            boolean _equals_4 = (_max_6 == 0);
            _and_1 = _equals_4;
          }
          if (_and_1) {
            _builder.append("max = 1;");
            _builder.newLine();
          } else {
            int _min_10 = e.getMin();
            int _max_7 = e.getMax();
            boolean _equals_5 = (_min_10 == _max_7);
            if (_equals_5) {
              _builder.append("max = ");
              int _min_11 = e.getMin();
              _builder.append(_min_11, "");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("for (int j = 0; j < max; j++) {");
        _builder.newLine();
        {
          String _name_2 = e.getName();
          boolean _notEquals_1 = (!Objects.equal(_name_2, null));
          if (_notEquals_1) {
            _builder.append("//NAME:");
            String _name_3 = e.getName();
            String _string_3 = Integer.valueOf(this.nCommands).toString();
            String _plus_5 = (_name_3 + _string_3);
            _builder.append(this.commandName = _plus_5, "");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("//NAME:");
            String _string_4 = Integer.valueOf(this.nCommands).toString();
            _builder.append(this.commandName = _string_4, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("//METHOD NAME:");
        String _string_5 = Integer.valueOf(this.nMethod).toString();
        String _plus_6 = ("mutation" + _string_5);
        _builder.append(this.methodName = _plus_6, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("ArrayList<Mutator> l");
        _builder.append(this.commandName, "");
        _builder.append(" = ");
        _builder.append(this.methodName, "");
        _builder.append("(packages, model, hashmapEObject, hashmapList);");
        _builder.newLineIfNotEmpty();
        _builder.append("//COUNTER: ");
        _builder.append(this.nRegistryMutation = (this.nRegistryMutation + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("//REGISTRY METHOD NAME:");
        String _string_6 = Integer.valueOf(this.nRegistryMethod).toString();
        String _plus_7 = ("registry" + _string_6);
        _builder.append(this.registryMethodName = _plus_7, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("if (l");
        _builder.append(this.commandName, "");
        _builder.append(" != null) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for (Mutator mut : l");
        _builder.append(this.commandName, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          if ((this.executeMutation == true)) {
            _builder.append("\t\t");
            _builder.append("if (mut != null) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("EObject mutated = (EObject) mut.mutate();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("if (mutated != null) {");
            _builder.newLine();
            {
              String _name_4 = e.getName();
              boolean _notEquals_2 = (!Objects.equal(_name_4, null));
              if (_notEquals_2) {
                {
                  if ((e instanceof CreateObjectMutator)) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("hashmapEObject.put(\"");
                    String _name_5 = ((CreateObjectMutator)e).getName();
                    _builder.append(_name_5, "\t\t\t");
                    _builder.append("\", mut.getObject());");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if ((e instanceof SelectObjectMutator)) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("hashmapEObject.put(\"");
                    String _name_6 = ((SelectObjectMutator)e).getName();
                    _builder.append(_name_6, "\t\t\t");
                    _builder.append("\", mut.getObject());");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("AppMutation appMut = ");
            _builder.append(this.registryMethodName, "\t\t\t");
            _builder.append("(mut, hmMutator, seed);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("if (appMut != null) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("muts.getMuts().add(appMut);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
