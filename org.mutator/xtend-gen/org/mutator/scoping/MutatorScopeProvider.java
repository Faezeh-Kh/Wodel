/**
 * generated by Xtext
 */
package org.mutator.scoping;

import com.google.common.base.Objects;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import manager.ModelManager;
import mutatorenvironment.Block;
import mutatorenvironment.CompleteTypeSelection;
import mutatorenvironment.CompositeMutator;
import mutatorenvironment.Constraint;
import mutatorenvironment.CreateObjectMutator;
import mutatorenvironment.CreateReferenceMutator;
import mutatorenvironment.Definition;
import mutatorenvironment.Evaluation;
import mutatorenvironment.Expression;
import mutatorenvironment.ModifyInformationMutator;
import mutatorenvironment.ModifySourceReferenceMutator;
import mutatorenvironment.ModifyTargetReferenceMutator;
import mutatorenvironment.Mutator;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.ObSelectionStrategy;
import mutatorenvironment.ObjectEmitter;
import mutatorenvironment.OtherTypeSelection;
import mutatorenvironment.Program;
import mutatorenvironment.RandomTypeSelection;
import mutatorenvironment.ReferenceEvaluation;
import mutatorenvironment.ReferenceInit;
import mutatorenvironment.ReferenceSet;
import mutatorenvironment.ReferenceSwap;
import mutatorenvironment.RemoveCompleteReferenceMutator;
import mutatorenvironment.RemoveObjectMutator;
import mutatorenvironment.RemoveRandomReferenceMutator;
import mutatorenvironment.RemoveSpecificReferenceMutator;
import mutatorenvironment.SelectObjectMutator;
import mutatorenvironment.Source;
import mutatorenvironment.SpecificObjectSelection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class MutatorScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * CreateObjetMutator.type can contain any EClass from the input meta-model.
   */
  public IScope scope_ObjectEmitter_type(final ObjectEmitter obj, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("1.");
      final MutatorEnvironment env = this.getMutatorEnvironment(obj);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eClasses);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the created object.
   */
  public IScope scope_SpecificObjectSelection_objSel(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("2.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      final List<EClass> containers = this.getEContainers(_metamodel, _name);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name_1 = cl.getName();
        scontainers.add(_name_1);
      }
      String _metamodel_1 = definition.getMetamodel();
      EClass _type_1 = com.getType();
      String _name_2 = _type_1.getName();
      final List<EReference> references = this.getEReferences(_metamodel_1, _name_2);
      for (final EReference eref : references) {
        EClassifier _eType = eref.getEType();
        String _name_3 = _eType.getName();
        scontainers.add(_name_3);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_4 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_4, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_2 = mutator.getType();
          String _name_5 = _type_2.getName();
          boolean _contains = scontainers.contains(_name_5);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the created object.
   */
  public IScope scope_SpecificObjectSelection_objSel(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("2b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      final List<EClass> containers = this.getEContainers(_metamodel, _name);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name_1 = cl.getName();
        scontainers.add(_name_1);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_2 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_2, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (mutator instanceof SelectObjectMutator);
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_1 = mutator.getType();
          String _name_3 = _type_1.getName();
          boolean _contains = scontainers.contains(_name_3);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CompleteTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_CompleteTypeSelection_type(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("3.");
      _xblockexpression = this.anyTypeSelection(com);
    }
    return _xblockexpression;
  }
  
  /**
   * RandomTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_RandomTypeSelection_type(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("4.");
      _xblockexpression = this.anyTypeSelection(com);
    }
    return _xblockexpression;
  }
  
  /**
   * OtherTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_OtherTypeSelection_type(final OtherTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("4b.");
      _xblockexpression = this.anyTypeSelection(com);
    }
    return _xblockexpression;
  }
  
  /**
   * Common implementation for methods scope_CompleteTypeSelection_type, scope_RandomTypeSelection_type and scope_OtherTypeSelection_type.
   */
  private IScope anyTypeSelection(final ObSelectionStrategy com) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EClass> scope = new ArrayList<EClass>();
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ModifyTargetReferenceMutator)) {
        EObject _eContainer_1 = com.eContainer();
        final ModifyTargetReferenceMutator mutator = ((ModifyTargetReferenceMutator) _eContainer_1);
        ObSelectionStrategy _source = mutator.getSource();
        boolean _equals = Objects.equal(_source, com);
        if (_equals) {
          String _metamodel = definition.getMetamodel();
          EReference _refType = mutator.getRefType();
          String _name = _refType.getName();
          List<EClass> _eSources = this.getESources(_metamodel, _name);
          scope.addAll(_eSources);
        } else {
          ObSelectionStrategy _newTarget = mutator.getNewTarget();
          boolean _equals_1 = Objects.equal(_newTarget, com);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            EReference _refType_1 = mutator.getRefType();
            String _name_1 = _refType_1.getName();
            List<EClass> _eTargets = this.getETargets(_metamodel_1, _name_1);
            scope.addAll(_eTargets);
          }
        }
      } else {
        EObject _eContainer_2 = com.eContainer();
        if ((_eContainer_2 instanceof CreateReferenceMutator)) {
          EObject _eContainer_3 = com.eContainer();
          final CreateReferenceMutator mutator_1 = ((CreateReferenceMutator) _eContainer_3);
          ObSelectionStrategy _source_1 = mutator_1.getSource();
          boolean _equals_2 = Objects.equal(_source_1, com);
          if (_equals_2) {
            String _metamodel_2 = definition.getMetamodel();
            EReference _refType_2 = mutator_1.getRefType();
            String _name_2 = _refType_2.getName();
            List<EClass> _eSources_1 = this.getESources(_metamodel_2, _name_2);
            scope.addAll(_eSources_1);
          } else {
            ObSelectionStrategy _target = mutator_1.getTarget();
            boolean _equals_3 = Objects.equal(_target, com);
            if (_equals_3) {
              String _metamodel_3 = definition.getMetamodel();
              EReference _refType_3 = mutator_1.getRefType();
              String _name_3 = _refType_3.getName();
              List<EClass> _eTargets_1 = this.getETargets(_metamodel_3, _name_3);
              scope.addAll(_eTargets_1);
            }
          }
        } else {
          boolean _or = false;
          boolean _or_1 = false;
          EObject _eContainer_4 = com.eContainer();
          if ((_eContainer_4 instanceof MutatorEnvironment)) {
            _or_1 = true;
          } else {
            EObject _eContainer_5 = com.eContainer();
            _or_1 = (_eContainer_5 instanceof CreateObjectMutator);
          }
          if (_or_1) {
            _or = true;
          } else {
            EObject _eContainer_6 = com.eContainer();
            _or = (_eContainer_6 instanceof SelectObjectMutator);
          }
          if (_or) {
            String _metamodel_4 = definition.getMetamodel();
            List<EClass> _eClasses = this.getEClasses(_metamodel_4);
            scope.addAll(_eClasses);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * SpecificObjectSelection.objSel can contain any EClass from the input meta-model.
   */
  public IScope scope_SpecificObjectSelection_objSel(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("5.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<Mutator> scope = new ArrayList<Mutator>();
      IScope _xifexpression = null;
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ModifyTargetReferenceMutator)) {
        IScope _xblockexpression_1 = null;
        {
          EObject _eContainer_1 = com.eContainer();
          final ModifyTargetReferenceMutator mutator = ((ModifyTargetReferenceMutator) _eContainer_1);
          final List<Mutator> commands = this.getCommands(mutator);
          IScope _xifexpression_1 = null;
          ObSelectionStrategy _source = mutator.getSource();
          boolean _equals = Objects.equal(_source, com);
          if (_equals) {
            IScope _xblockexpression_2 = null;
            {
              String _metamodel = definition.getMetamodel();
              EReference _refType = mutator.getRefType();
              String _name = _refType.getName();
              final List<EClass> containers = this.getESources(_metamodel, _name);
              final List<String> scontainers = new ArrayList<String>();
              for (final EClassifier cl : containers) {
                String _name_1 = cl.getName();
                scontainers.add(_name_1);
              }
              for (final Mutator c : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = c.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(c);
                  int _indexOf_1 = commands.indexOf(mutator);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = c.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = scontainers.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  scope.add(c);
                }
              }
              _xblockexpression_2 = Scopes.scopeFor(scope);
            }
            _xifexpression_1 = _xblockexpression_2;
          } else {
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _newTarget = mutator.getNewTarget();
            boolean _equals_1 = Objects.equal(_newTarget, com);
            if (_equals_1) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containments = this.getETargets(_metamodel, _name);
                final List<String> scontainments = new ArrayList<String>();
                for (final EClassifier cl : containments) {
                  String _name_1 = cl.getName();
                  scontainments.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainments.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        IScope _xifexpression_1 = null;
        EObject _eContainer_1 = com.eContainer();
        if ((_eContainer_1 instanceof CreateReferenceMutator)) {
          IScope _xblockexpression_2 = null;
          {
            EObject _eContainer_2 = com.eContainer();
            final CreateReferenceMutator mutator = ((CreateReferenceMutator) _eContainer_2);
            final List<Mutator> commands = this.getCommands(mutator);
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _source = mutator.getSource();
            boolean _equals = Objects.equal(_source, com);
            if (_equals) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containers = this.getESources(_metamodel, _name);
                final List<String> scontainers = new ArrayList<String>();
                for (final EClassifier cl : containers) {
                  String _name_1 = cl.getName();
                  scontainers.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainers.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            } else {
              IScope _xifexpression_3 = null;
              ObSelectionStrategy _target = mutator.getTarget();
              boolean _equals_1 = Objects.equal(_target, com);
              if (_equals_1) {
                IScope _xblockexpression_4 = null;
                {
                  String _metamodel = definition.getMetamodel();
                  EReference _refType = mutator.getRefType();
                  String _name = _refType.getName();
                  final List<EClass> containments = this.getETargets(_metamodel, _name);
                  final List<String> scontainments = new ArrayList<String>();
                  for (final EClassifier cl : containments) {
                    String _name_1 = cl.getName();
                    scontainments.add(_name_1);
                  }
                  for (final Mutator c : commands) {
                    boolean _and = false;
                    boolean _and_1 = false;
                    boolean _and_2 = false;
                    String _name_2 = c.getName();
                    boolean _notEquals = (!Objects.equal(_name_2, null));
                    if (!_notEquals) {
                      _and_2 = false;
                    } else {
                      int _indexOf = commands.indexOf(c);
                      int _indexOf_1 = commands.indexOf(mutator);
                      boolean _lessThan = (_indexOf < _indexOf_1);
                      _and_2 = _lessThan;
                    }
                    if (!_and_2) {
                      _and_1 = false;
                    } else {
                      _and_1 = ((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator));
                    }
                    if (!_and_1) {
                      _and = false;
                    } else {
                      EClass _type = c.getType();
                      String _name_3 = _type.getName();
                      boolean _contains = scontainments.contains(_name_3);
                      _and = _contains;
                    }
                    if (_and) {
                      scope.add(c);
                    }
                  }
                  _xblockexpression_4 = Scopes.scopeFor(scope);
                }
                _xifexpression_3 = _xblockexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xblockexpression_2 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the created object.
   */
  public IScope scope_RandomTypeSelection_type(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("6.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the created object.
   */
  public IScope scope_RandomTypeSelection_type(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("6b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjetMutator.refType can contain any EReference defined by the
   * CreateObjectMutator.container whose type is CreateObjetMutator.type.
   */
  public IScope scope_CreateObjectMutator_refType(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("7.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof RandomTypeSelection)) {
        IScope _xblockexpression_1 = null;
        {
          ObSelectionStrategy _container_1 = com.getContainer();
          final EClass container = ((RandomTypeSelection) _container_1).getType();
          String _metamodel = definition.getMetamodel();
          String _name = container.getName();
          EClass _type = com.getType();
          String _name_1 = _type.getName();
          List<EReference> _eContainmentReferences = this.getEContainmentReferences(_metamodel, _name, _name_1);
          _xblockexpression_1 = Scopes.scopeFor(_eContainmentReferences);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjetMutator.refType can contain any EReference defined by the
   * CreateObjectMutator.container whose type is CreateObjetMutator.type.
   */
  public IScope scope_SelectObjectMutator_refType(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("7b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof RandomTypeSelection)) {
        IScope _xblockexpression_1 = null;
        {
          ObSelectionStrategy _container_1 = com.getContainer();
          final EClass container = ((RandomTypeSelection) _container_1).getType();
          String _metamodel = definition.getMetamodel();
          String _name = container.getName();
          EClass _type = com.getType();
          String _name_1 = _type.getName();
          List<EReference> _eContainmentReferences = this.getEContainmentReferences(_metamodel, _name, _name_1);
          _xblockexpression_1 = Scopes.scopeFor(_eContainmentReferences);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_ModifySourceReferenceMutator_refType(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("8.");
      System.out.println("AQUI 1.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EReference> _eReferences = this.getEReferences(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyTargetReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_ModifyTargetReferenceMutator_refType(final ModifyTargetReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("9.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EReference> _eReferences = this.getEReferences(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_CreateReferenceMutator_refType(final CreateReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("10.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EReference> _eReferences = this.getEReferences(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.from and ModifySourceReferenceMutator.newSource, when a specific
   * object is used as from/to, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("11.");
      System.out.println("AQUI 2.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      String _metamodel = definition.getMetamodel();
      EReference _refType = com.getRefType();
      String _name = _refType.getName();
      final List<EClass> containers = this.getESources(_metamodel, _name);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name_1 = cl.getName();
        scontainers.add(_name_1);
      }
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_2 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_2, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = ((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type = mutator.getType();
          String _name_3 = _type.getName();
          boolean _contains = scontainers.contains(_name_3);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.from and ModifySourceReferenceMutator.to, when a random
   * type is used as from/to, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("12.");
      System.out.println("AQUI 3.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EReference _refType = com.getRefType();
      String _name = _refType.getName();
      List<EClass> _eSources = this.getESources(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eSources);
    }
    return _xblockexpression;
  }
  
  private ArrayList<EClass> HelperRandomTypeSelectionModelEClasses(final Definition definition, final Program program) {
    final ArrayList<EClass> scope = new ArrayList<EClass>();
    Source _source = program.getSource();
    String _path = _source.getPath();
    boolean _endsWith = _path.endsWith("/");
    boolean _not = (!_endsWith);
    if (_not) {
      String _metamodel = definition.getMetamodel();
      Source _source_1 = program.getSource();
      String _path_1 = _source_1.getPath();
      List<EClass> _modelEClasses = this.getModelEClasses(_metamodel, _path_1);
      scope.addAll(_modelEClasses);
    }
    Source _source_2 = program.getSource();
    String _path_2 = _source_2.getPath();
    boolean _endsWith_1 = _path_2.endsWith("/");
    if (_endsWith_1) {
      Source _source_3 = program.getSource();
      String _path_3 = _source_3.getPath();
      File _file = new File(_path_3);
      final File[] files = _file.listFiles();
      for (final File file : files) {
        boolean _isFile = file.isFile();
        boolean _equals = (_isFile == true);
        if (_equals) {
          String _path_4 = file.getPath();
          boolean _endsWith_2 = _path_4.endsWith(".model");
          boolean _equals_1 = (_endsWith_2 == true);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            String _path_5 = file.getPath();
            List<EClass> _modelEClasses_1 = this.getModelEClasses(_metamodel_1, _path_5);
            scope.addAll(_modelEClasses_1);
          }
        }
      }
      return scope;
    }
    return null;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("13.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelEClasses(definition, program);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a specific selection strategy is used.
   */
  public IScope scope_SpecificObjectSelection_objSel(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("14.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        _xifexpression = Scopes.scopeFor(commands);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a complete type is used.
   */
  public IScope scope_CompleteTypeSelection_type(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("15.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelEClasses(definition, program);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.object, when a specific
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_ObjectEmitter_type(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("16.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.object, when a specific
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("17.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            Source _source_1 = ((Program)definition).getSource();
            final String model = _source_1.getPath();
            String _metamodel = ((Program)definition).getMetamodel();
            final List<EClass> classes = this.getModelEClasses(_metamodel, model);
            final List<String> sclasses = new ArrayList<String>();
            for (final EClassifier cl : classes) {
              String _name = cl.getName();
              sclasses.add(_name);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_1 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_1, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_2 = _type.getName();
                  boolean _contains = sclasses.contains(_name_2);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_1 = _source_2.getPath();
          boolean _endsWith_1 = _path_1.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            Source _source_3 = ((Program)definition).getSource();
            String _path_2 = _source_3.getPath();
            File _file = new File(_path_2);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_3 = file.getPath();
                boolean _endsWith_2 = _path_3.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_4 = file.getPath();
                  models.add(_path_4);
                }
              }
            }
            final List<EClass> classes_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              List<EClass> _modelEClasses = this.getModelEClasses(_metamodel_1, model_1);
              classes_1.addAll(_modelEClasses);
            }
            final List<String> sclasses_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : classes_1) {
              String _name_1 = cl_1.getName();
              sclasses_1.add(_name_1);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = sclasses_1.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.object, when a random type is used.
   */
  public IScope scope_RandomTypeSelection_type(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("18.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveRandomReferenceMutator_refType(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("19.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel);
        _xifexpression = Scopes.scopeFor(_eReferences);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveRandomReferenceMutator_type(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("20.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  private ArrayList<EClass> HelperRandomTypeSelectionModelESources(final Definition definition, final Program program, final String refTypeName) {
    final ArrayList<EClass> scope = new ArrayList<EClass>();
    Source _source = program.getSource();
    String _path = _source.getPath();
    boolean _endsWith = _path.endsWith("/");
    boolean _not = (!_endsWith);
    if (_not) {
      String _metamodel = definition.getMetamodel();
      Source _source_1 = program.getSource();
      String _path_1 = _source_1.getPath();
      List<EClass> _modelEClasses = this.getModelEClasses(_metamodel, _path_1);
      scope.addAll(_modelEClasses);
    }
    Source _source_2 = program.getSource();
    String _path_2 = _source_2.getPath();
    boolean _endsWith_1 = _path_2.endsWith("/");
    if (_endsWith_1) {
      Source _source_3 = program.getSource();
      String _path_3 = _source_3.getPath();
      File _file = new File(_path_3);
      final File[] files = _file.listFiles();
      for (final File file : files) {
        boolean _isFile = file.isFile();
        boolean _equals = (_isFile == true);
        if (_equals) {
          String _path_4 = file.getPath();
          boolean _endsWith_2 = _path_4.endsWith(".model");
          boolean _equals_1 = (_endsWith_2 == true);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            String _path_5 = file.getPath();
            List<EClass> _modelESources = this.getModelESources(_metamodel_1, _path_5, refTypeName);
            scope.addAll(_modelESources);
          }
        }
      }
      return scope;
    }
    return null;
  }
  
  /**
   * RemoveReferenceMutator.container, when a random
   * type is used, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("21.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          EReference _refType = com.getRefType();
          String _name = _refType.getName();
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelESources(definition, program, _name);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveCompleteReferenceMutator_refType(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("22.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<EReference> scope = new ArrayList<EReference>();
          String _metamodel = ((Program)definition).getMetamodel();
          List<EReference> _eReferences = this.getEReferences(_metamodel);
          scope.addAll(_eReferences);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveCompleteReferenceMutator_type(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("23.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveReferenceMutator.container, when a random
   * type is used, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("24.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          EReference _refType = com.getRefType();
          String _name = _refType.getName();
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelESources(definition, program, _name);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveSpecificReferenceMutator_refType(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("25.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel);
        _xifexpression = Scopes.scopeFor(_eReferences);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RemoveSpecificReferenceMutator_container(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("26.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveReferenceMutator.container, when a specific
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("27.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            Source _source_1 = ((Program)definition).getSource();
            final String model = _source_1.getPath();
            String _metamodel = ((Program)definition).getMetamodel();
            EReference _refType = com.getRefType();
            String _name = _refType.getName();
            final List<EClass> containers = this.getModelESources(_metamodel, model, _name);
            final List<String> scontainers = new ArrayList<String>();
            for (final EClassifier cl : containers) {
              String _name_1 = cl.getName();
              scontainers.add(_name_1);
            }
            final List<Mutator> objects = new ArrayList<Mutator>();
            for (final Mutator mutator : commands) {
              boolean _and = false;
              boolean _and_1 = false;
              boolean _and_2 = false;
              String _name_2 = mutator.getName();
              boolean _notEquals = (!Objects.equal(_name_2, null));
              if (!_notEquals) {
                _and_2 = false;
              } else {
                int _indexOf = commands.indexOf(mutator);
                int _indexOf_1 = commands.indexOf(com);
                boolean _lessThan = (_indexOf < _indexOf_1);
                _and_2 = _lessThan;
              }
              if (!_and_2) {
                _and_1 = false;
              } else {
                _and_1 = ((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator));
              }
              if (!_and_1) {
                _and = false;
              } else {
                EClass _type = mutator.getType();
                String _name_3 = _type.getName();
                boolean _contains = scontainers.contains(_name_3);
                _and = _contains;
              }
              if (_and) {
                objects.add(mutator);
              }
            }
            scope.addAll(objects);
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_1 = _source_2.getPath();
          boolean _endsWith_1 = _path_1.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            Source _source_3 = ((Program)definition).getSource();
            String _path_2 = _source_3.getPath();
            File _file = new File(_path_2);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_3 = file.getPath();
                boolean _endsWith_2 = _path_3.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_4 = file.getPath();
                  models.add(_path_4);
                }
              }
            }
            final List<EClass> containers_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              EReference _refType_1 = com.getRefType();
              String _name_4 = _refType_1.getName();
              List<EClass> _modelESources = this.getModelESources(_metamodel_1, model_1, _name_4);
              containers_1.addAll(_modelESources);
            }
            final List<String> scontainers_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : containers_1) {
              String _name_5 = cl_1.getName();
              scontainers_1.add(_name_5);
            }
            final List<Mutator> objects_1 = new ArrayList<Mutator>();
            for (final Mutator mutator_1 : commands) {
              boolean _and_3 = false;
              boolean _and_4 = false;
              boolean _and_5 = false;
              String _name_6 = mutator_1.getName();
              boolean _notEquals_1 = (!Objects.equal(_name_6, null));
              if (!_notEquals_1) {
                _and_5 = false;
              } else {
                int _indexOf_2 = commands.indexOf(mutator_1);
                int _indexOf_3 = commands.indexOf(com);
                boolean _lessThan_1 = (_indexOf_2 < _indexOf_3);
                _and_5 = _lessThan_1;
              }
              if (!_and_5) {
                _and_4 = false;
              } else {
                _and_4 = ((mutator_1 instanceof CreateObjectMutator) || (mutator_1 instanceof SelectObjectMutator));
              }
              if (!_and_4) {
                _and_3 = false;
              } else {
                EClass _type_1 = mutator_1.getType();
                String _name_7 = _type_1.getName();
                boolean _contains_1 = scontainers_1.contains(_name_7);
                _and_3 = _contains_1;
              }
              if (_and_3) {
                objects_1.add(mutator_1);
              }
            }
            scope.addAll(objects_1);
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.attributes must contain attributes of the CreateObjetMutator.type type.
   */
  public IScope scope_AttributeSet_attribute(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("28.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eAttributes);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.attributes must contain attributes of the CreateObjetMutator.type type.
   */
  public IScope scope_ReferenceSet_reference(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("28b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EReference> _eReferences = this.getEReferences(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_AttributeSet_attribute(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("29.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EAttribute> scope = new ArrayList<EAttribute>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
          scope.addAll(_eAttributes);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_1 = ((CompleteTypeSelection) _object_3).getType();
          final String name_1 = _type_1.getName();
          String _metamodel_1 = definition.getMetamodel();
          List<EAttribute> _eAttributes_1 = this.getEAttributes(_metamodel_1, name_1);
          for (final EAttribute eatt : _eAttributes_1) {
            String _name = eatt.getName();
            String _plus = ("attribute: " + _name);
            System.out.println(_plus);
          }
          String _metamodel_2 = definition.getMetamodel();
          List<EAttribute> _eAttributes_2 = this.getEAttributes(_metamodel_2, name_1);
          scope.addAll(_eAttributes_2);
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((RandomTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_3 = definition.getMetamodel();
            List<EAttribute> _eAttributes_3 = this.getEAttributes(_metamodel_3, name_2);
            for (final EAttribute eatt_1 : _eAttributes_3) {
              String _name_1 = eatt_1.getName();
              String _plus_1 = ("attribute: " + _name_1);
              System.out.println(_plus_1);
            }
            String _metamodel_4 = definition.getMetamodel();
            List<EAttribute> _eAttributes_4 = this.getEAttributes(_metamodel_4, name_2);
            scope.addAll(_eAttributes_4);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_ReferenceSet_reference(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("29b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_1 = ((CompleteTypeSelection) _object_3).getType();
          final String name_1 = _type_1.getName();
          String _metamodel_1 = definition.getMetamodel();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, name_1);
          for (final EReference eref : _eReferences_1) {
            String _name = eref.getName();
            String _plus = ("reference: " + _name);
            System.out.println(_plus);
          }
          String _metamodel_2 = definition.getMetamodel();
          List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name_1);
          scope.addAll(_eReferences_2);
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((RandomTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_3 = definition.getMetamodel();
            List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name_2);
            for (final EReference eref_1 : _eReferences_3) {
              String _name_1 = eref_1.getName();
              String _plus_1 = ("reference: " + _name_1);
              System.out.println(_plus_1);
            }
            String _metamodel_4 = definition.getMetamodel();
            List<EReference> _eReferences_4 = this.getEReferences(_metamodel_4, name_2);
            scope.addAll(_eReferences_4);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceInit.refType must contain references of the type of ReferenceInit.object.
   */
  public IScope scope_ReferenceSet_refType(final ReferenceInit com, final EReference container) {
    IScope _xblockexpression = null;
    {
      System.out.println("30a.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        EClass _type = null;
        if (_object!=null) {
          _type=_object.getType();
        }
        String _name = null;
        if (_type!=null) {
          _name=_type.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_2)!=null) {
            _objSel=((SpecificObjectSelection) _object_2).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type_1 = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type_1);
          return Scopes.scopeFor(_eReferences);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceSwap.reference must contain references of the type of ReferenceSwap.object,
   * or of the type of the mutator if no object is specified.
   */
  public IScope scope_ReferenceSet_reference(final ReferenceSwap com, final EReference container) {
    IScope _xblockexpression = null;
    {
      System.out.println("30b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        boolean _equals = Objects.equal(_object, null);
        if (_equals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(currentMutator);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          return Scopes.scopeFor(_eReferences);
        }
        ObSelectionStrategy _object_1 = com.getObject();
        EClass _type_1 = null;
        if (_object_1!=null) {
          _type_1=_object_1.getType();
        }
        String _name = null;
        if (_type_1!=null) {
          _name=_type_1.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_3)!=null) {
            _objSel=((SpecificObjectSelection) _object_3).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          String _type_2 = this.getType(command);
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_2);
          return Scopes.scopeFor(_eReferences_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("31a.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("31b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by ...
   */
  public IScope scope_ReferenceEvaluation_name(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("31c.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObjectEmitter _objSel = com.getObjSel();
        String _name = null;
        if (_objSel!=null) {
          _name=_objSel.getName();
        }
        final String objectName = _name;
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          return Scopes.scopeFor(_eReferences);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("32a.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eAttributes);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("32b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eAttributes);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by ...
   */
  public IScope scope_AttributeEvaluation_name(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("32c.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObjectEmitter _objSel = com.getObjSel();
        String _name = null;
        if (_objSel!=null) {
          _name=_objSel.getName();
        }
        final String objectName = _name;
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
          return Scopes.scopeFor(_eAttributes);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_ReferenceEvaluation_refType(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("33.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String name = "";
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        String _name = _objSel.getName();
        name = _name;
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_1 = ((CompleteTypeSelection) _object_3).getType();
          String _name_1 = _type_1.getName();
          name = _name_1;
          String _metamodel_1 = definition.getMetamodel();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, name);
          for (final EReference eref : _eReferences_1) {
            String _name_2 = eref.getName();
            String _plus = ("reference: " + _name_2);
            System.out.println(_plus);
          }
          String _metamodel_2 = definition.getMetamodel();
          List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name);
          scope.addAll(_eReferences_2);
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((RandomTypeSelection) _object_5).getType();
            String _name_3 = _type_2.getName();
            name = _name_3;
            String _metamodel_3 = definition.getMetamodel();
            List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name);
            for (final EReference eref_1 : _eReferences_3) {
              String _name_4 = eref_1.getName();
              String _plus_1 = ("reference: " + _name_4);
              System.out.println(_plus_1);
            }
            String _metamodel_4 = definition.getMetamodel();
            List<EReference> _eReferences_4 = this.getEReferences(_metamodel_4, name);
            scope.addAll(_eReferences_4);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_ReferenceEvaluation_refType(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("33b.");
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_1 = ((CompleteTypeSelection) _object_3).getType();
          final String name_1 = _type_1.getName();
          String _metamodel_1 = definition.getMetamodel();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, name_1);
          for (final EReference eref : _eReferences_1) {
            String _name = eref.getName();
            String _plus = ("reference: " + _name);
            System.out.println(_plus);
          }
          String _metamodel_2 = definition.getMetamodel();
          List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name_1);
          scope.addAll(_eReferences_2);
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((RandomTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_3 = definition.getMetamodel();
            List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name_2);
            for (final EReference eref_1 : _eReferences_3) {
              String _name_1 = eref_1.getName();
              String _plus_1 = ("reference: " + _name_1);
              System.out.println(_plus_1);
            }
            String _metamodel_4 = definition.getMetamodel();
            List<EReference> _eReferences_4 = this.getEReferences(_metamodel_4, name_2);
            scope.addAll(_eReferences_4);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_ReferenceEvaluation_refType(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("33c.");
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      EObject mut = null;
      boolean _and = false;
      EObject _eContainer = com.eContainer();
      if (!(_eContainer instanceof ReferenceInit)) {
        _and = false;
      } else {
        boolean _or = false;
        EObject _eContainer_1 = com.eContainer();
        EObject _eContainer_2 = _eContainer_1.eContainer();
        if ((_eContainer_2 instanceof CreateObjectMutator)) {
          _or = true;
        } else {
          EObject _eContainer_3 = com.eContainer();
          EObject _eContainer_4 = _eContainer_3.eContainer();
          _or = (_eContainer_4 instanceof SelectObjectMutator);
        }
        _and = _or;
      }
      if (_and) {
        EObject _eContainer_5 = com.eContainer();
        EObject _eContainer_6 = _eContainer_5.eContainer();
        mut = _eContainer_6;
      } else {
        boolean _or_1 = false;
        boolean _or_2 = false;
        EObject _eContainer_7 = com.eContainer();
        if ((_eContainer_7 instanceof CreateObjectMutator)) {
          _or_2 = true;
        } else {
          EObject _eContainer_8 = com.eContainer();
          _or_2 = (_eContainer_8 instanceof SelectObjectMutator);
        }
        if (_or_2) {
          _or_1 = true;
        } else {
          EObject _eContainer_9 = com.eContainer();
          _or_1 = (_eContainer_9 instanceof ModifyInformationMutator);
        }
        if (_or_1) {
          EObject _eContainer_10 = com.eContainer();
          mut = _eContainer_10;
        }
      }
      boolean _notEquals = (!Objects.equal(mut, null));
      if (_notEquals) {
        final MutatorEnvironment env = this.getMutatorEnvironment(com);
        final Definition definition = env.getDefinition();
        final List<Mutator> commands = this.getCommands(((Mutator) mut));
        Expression _expression = com.getExpression();
        boolean _notEquals_1 = (!Objects.equal(_expression, null));
        if (_notEquals_1) {
          final Expression exp = com.getExpression();
          Evaluation _first = exp.getFirst();
          if ((_first instanceof ReferenceEvaluation)) {
            Evaluation _first_1 = exp.getFirst();
            final ReferenceEvaluation first = ((ReferenceEvaluation) _first_1);
            ObSelectionStrategy _value = first.getValue();
            boolean _notEquals_2 = (!Objects.equal(_value, null));
            if (_notEquals_2) {
              ObSelectionStrategy _value_1 = first.getValue();
              if ((_value_1 instanceof SpecificObjectSelection)) {
                ObSelectionStrategy _value_2 = first.getValue();
                ObjectEmitter _objSel = ((SpecificObjectSelection) _value_2).getObjSel();
                boolean _notEquals_3 = (!Objects.equal(_objSel, null));
                if (_notEquals_3) {
                  ObSelectionStrategy _value_3 = first.getValue();
                  ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _value_3).getObjSel();
                  final String name = _objSel_1.getName();
                  System.out.println(("name: " + name));
                  int _indexOf = commands.indexOf(mut);
                  Mutator command = this.getCommand(name, commands, _indexOf);
                  boolean _notEquals_4 = (!Objects.equal(command, null));
                  if (_notEquals_4) {
                    String _metamodel = null;
                    if (definition!=null) {
                      _metamodel=definition.getMetamodel();
                    }
                    String _type = this.getType(command);
                    List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
                    scope.addAll(_eReferences);
                  }
                }
              }
            }
            EList<Evaluation> _second = exp.getSecond();
            for (final Evaluation second : _second) {
              if ((second instanceof ReferenceEvaluation)) {
                ObSelectionStrategy _value_4 = ((ReferenceEvaluation)second).getValue();
                if ((_value_4 instanceof SpecificObjectSelection)) {
                  ObSelectionStrategy _value_5 = ((ReferenceEvaluation)second).getValue();
                  ObjectEmitter _objSel_2 = ((SpecificObjectSelection) _value_5).getObjSel();
                  boolean _notEquals_5 = (!Objects.equal(_objSel_2, null));
                  if (_notEquals_5) {
                    ObSelectionStrategy _value_6 = ((ReferenceEvaluation)second).getValue();
                    ObjectEmitter _objSel_3 = ((SpecificObjectSelection) _value_6).getObjSel();
                    final String name_1 = _objSel_3.getName();
                    int _indexOf_1 = commands.indexOf(mut);
                    Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
                    boolean _notEquals_6 = (!Objects.equal(command_1, null));
                    if (_notEquals_6) {
                      String _metamodel_1 = null;
                      if (definition!=null) {
                        _metamodel_1=definition.getMetamodel();
                      }
                      String _type_1 = this.getType(command_1);
                      List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_1);
                      scope.addAll(_eReferences_1);
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * Constraint.type can contain any EClass from the input meta-model.
   */
  public IScope scope_Constraint_type(final Constraint c, final EReference ref) {
    IScope _xblockexpression = null;
    {
      System.out.println("34.");
      final MutatorEnvironment env = this.getMutatorEnvironment(c);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eClasses);
    }
    return _xblockexpression;
  }
  
  /**
   * It returns the mutator environment that contains an object
   */
  private MutatorEnvironment getMutatorEnvironment(final ObjectEmitter oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  private MutatorEnvironment getMutatorEnvironment(final ReferenceSet oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  private MutatorEnvironment getMutatorEnvironment(final Constraint oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  /**
   * It returns the list of commands in the scope of the received mutator.
   * The scope can be either the environment or a composite mutator.
   * @param Mutator
   * @return List<Mutator>
   */
  private List<Mutator> getCommands(final Mutator com) {
    EObject _eContainer = com.eContainer();
    if ((_eContainer instanceof Block)) {
      EObject _eContainer_1 = com.eContainer();
      return ((Block) _eContainer_1).getCommands();
    }
    EObject _eContainer_2 = com.eContainer();
    if ((_eContainer_2 instanceof CompositeMutator)) {
      EObject _eContainer_3 = com.eContainer();
      return ((CompositeMutator) _eContainer_3).getCommands();
    }
    EObject _eContainer_4 = com.eContainer();
    if ((_eContainer_4 instanceof MutatorEnvironment)) {
      EObject _eContainer_5 = com.eContainer();
      return ((MutatorEnvironment) _eContainer_5).getCommands();
    }
    return new ArrayList<Mutator>();
  }
  
  /**
   * It returns the type to which a mutator applies.
   */
  private String getType(final Mutator mutator) {
    if ((mutator instanceof SelectObjectMutator)) {
      ObSelectionStrategy _object = ((SelectObjectMutator) mutator).getObject();
      EClass _type = null;
      if (_object!=null) {
        _type=_object.getType();
      }
      String _name = null;
      if (_type!=null) {
        _name=_type.getName();
      }
      return _name;
    }
    if ((mutator instanceof ModifyInformationMutator)) {
      ObSelectionStrategy _object_1 = ((ModifyInformationMutator) mutator).getObject();
      EClass _type_1 = null;
      if (_object_1!=null) {
        _type_1=_object_1.getType();
      }
      String _name_1 = null;
      if (_type_1!=null) {
        _name_1=_type_1.getName();
      }
      return _name_1;
    }
    EClass _type_2 = mutator.getType();
    String _name_2 = null;
    if (_type_2!=null) {
      _name_2=_type_2.getName();
    }
    return _name_2;
  }
  
  /**
   * It receives a list of commands, and returns the command with the given name in commands[0..maxindex].
   */
  private Mutator getCommand(final String name, final List<Mutator> commands, final int maxindex) {
    Mutator command = null;
    for (final Mutator mutator : commands) {
      boolean _and = false;
      String _name = mutator.getName();
      boolean _equals = false;
      if (_name!=null) {
        _equals=_name.equals(name);
      }
      if (!_equals) {
        _and = false;
      } else {
        int _indexOf = commands.indexOf(mutator);
        boolean _lessThan = (_indexOf < maxindex);
        _and = _lessThan;
      }
      if (_and) {
        command = mutator;
      }
    }
    return command;
  }
  
  /**
   * It returns the list of classes defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EClass>
   */
  private List<EClass> getEClasses(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EPackage pck : metamodel) {
        EList<EClassifier> _eClassifiers = pck.getEClassifiers();
        for (final EClassifier cl : _eClassifiers) {
          if ((cl instanceof EClass)) {
            classes.add(((EClass) cl));
          }
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes existing in a model.
   * @param String file containing the model
   * @return List<EClass>
   */
  private List<EClass> getModelEClasses(final String metamodelFile, final String modelFile) {
    try {
      final ArrayList<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final Resource model = ModelManager.loadModel(metamodel, modelFile);
      final List<EObject> classes = ModelManager.getAllObjects(model);
      final List<EClass> ret = new ArrayList<EClass>();
      for (final EObject o : classes) {
        EClass _eClass = o.eClass();
        boolean _contains = ret.contains(_eClass);
        boolean _not = (!_contains);
        if (_not) {
          EClass _eClass_1 = o.eClass();
          ret.add(_eClass_1);
        }
      }
      return ret;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of references defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EReference>
   */
  private List<EReference> getEReferences(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EReference> references = new ArrayList<EReference>();
      for (final EPackage pck : metamodel) {
        EList<EClassifier> _eClassifiers = pck.getEClassifiers();
        for (final EClassifier cl : _eClassifiers) {
          if ((cl instanceof EClass)) {
            EList<EReference> _eReferences = ((EClass) cl).getEReferences();
            references.addAll(_eReferences);
          }
        }
      }
      return references;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes which can contain (through a containment relation) the given class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getEContainers(final String metamodelFile, final String eclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EClassifier> containers = ModelManager.getContainerTypes(metamodel, eclassName);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EClassifier cl : containers) {
        if ((cl instanceof EClass)) {
          classes.add(((EClass) cl));
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes which defines the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getESources(final String metamodelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getEClasses(metamodelFile);
    final List<EClass> esources = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      {
        String _name = cl.getName();
        String _plus = ("class: " + _name);
        System.out.println(_plus);
        EStructuralFeature _eStructuralFeature = cl.getEStructuralFeature(ereferenceName);
        boolean _notEquals = (!Objects.equal(_eStructuralFeature, null));
        if (_notEquals) {
          esources.add(cl);
        }
      }
    }
    return esources;
  }
  
  /**
   * It returns the list of classes which are pointed by the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containments
   */
  private List<EClass> getETargets(final String metamodelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getEClasses(metamodelFile);
    final List<EReference> ereferences = this.getEReferences(metamodelFile);
    final List<EClass> etargets = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      for (final EReference rl : ereferences) {
        boolean _and = false;
        String _name = cl.getName();
        EClassifier _eType = rl.getEType();
        String _name_1 = _eType.getName();
        boolean _equals = _name.equals(_name_1);
        if (!_equals) {
          _and = false;
        } else {
          String _name_2 = rl.getName();
          boolean _equals_1 = _name_2.equals(ereferenceName);
          _and = _equals_1;
        }
        if (_and) {
          etargets.add(cl);
        }
      }
    }
    return etargets;
  }
  
  /**
   * It returns the list of classes which defines the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getModelESources(final String metamodelFile, final String modelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getModelEClasses(metamodelFile, modelFile);
    final List<EClass> esources = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      EStructuralFeature _eStructuralFeature = cl.getEStructuralFeature(ereferenceName);
      boolean _notEquals = (!Objects.equal(_eStructuralFeature, null));
      if (_notEquals) {
        esources.add(cl);
      }
    }
    return esources;
  }
  
  /**
   * It returns the list of containment references from a source class to a target class.
   * @param String file containing the metamodel
   * @param String source class name
   * @param String target class name
   * @return List<EReference> list of references
   */
  private List<EReference> getEContainmentReferences(final String metamodelFile, final String esourceclassName, final String etargetclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(esourceclassName, metamodel);
      final EClass sourceclass = ((EClass) _objectOfType);
      EObject _objectOfType_1 = ModelManager.getObjectOfType(etargetclassName, metamodel);
      final EClass targetclass = ((EClass) _objectOfType_1);
      final List<EReference> references = new ArrayList<EReference>();
      EList<EReference> _eAllReferences = sourceclass.getEAllReferences();
      for (final EReference ref : _eAllReferences) {
        boolean _and = false;
        boolean _and_1 = false;
        EClass _eReferenceType = ref.getEReferenceType();
        boolean _isSuperTypeOf = _eReferenceType.isSuperTypeOf(targetclass);
        if (!_isSuperTypeOf) {
          _and_1 = false;
        } else {
          boolean _isContainment = ref.isContainment();
          _and_1 = _isContainment;
        }
        if (!_and_1) {
          _and = false;
        } else {
          boolean _isChangeable = ref.isChangeable();
          _and = _isChangeable;
        }
        if (_and) {
          references.add(ref);
        }
      }
      return references;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of attributes of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EAttribute> getEAttributes(final String metamodelFile, final String eclassName) {
    try {
      System.out.println((((("def private List<EAttribute> getEAttributes (String metamodelFile=" + metamodelFile) + ", String eclassName=") + eclassName) + ")"));
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllAttributes();
      } else {
        return new ArrayList<EAttribute>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of attributes of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EReference> getEReferences(final String metamodelFile, final String eclassName) {
    try {
      System.out.println((((("def private List<EAttribute> getEAttributes (String metamodelFile=" + metamodelFile) + ", String eclassName=") + eclassName) + ")"));
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllReferences();
      } else {
        return new ArrayList<EReference>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
