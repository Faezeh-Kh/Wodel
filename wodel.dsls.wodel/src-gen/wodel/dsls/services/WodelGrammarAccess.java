/*
 * generated by Xtext
 */
package wodel.dsls.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MutatorEnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MutatorEnvironment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLoadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLoadLoadParserRuleCall_0_0 = (RuleCall)cLoadAssignment_0.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cBlocksKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cBlocksAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cBlocksBlockParserRuleCall_3_0_2_0 = (RuleCall)cBlocksAssignment_3_0_2.eContents().get(0);
		private final Assignment cBlocksAssignment_3_0_3 = (Assignment)cGroup_3_0.eContents().get(3);
		private final RuleCall cBlocksBlockParserRuleCall_3_0_3_0 = (RuleCall)cBlocksAssignment_3_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_4 = (Keyword)cGroup_3_0.eContents().get(4);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCommandsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cCommandsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cCommandsMutatorParserRuleCall_3_1_2_0 = (RuleCall)cCommandsAssignment_3_1_2.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cCommandsMutatorParserRuleCall_3_1_3_0 = (RuleCall)cCommandsAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstraintsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConstraintsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_2_0 = (RuleCall)cConstraintsAssignment_4_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_3_0 = (RuleCall)cConstraintsAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//MutatorEnvironment:
		//	load+=Load* definition=Definition "with" ("blocks" "{" blocks+=Block blocks+=Block* "}" | "commands" "{"
		//	commands+=Mutator commands+=Mutator* "}") ("constraints" "{" constraints+=Constraint constraints+=Constraint* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//load+=Load* definition=Definition "with" ("blocks" "{" blocks+=Block blocks+=Block* "}" | "commands" "{"
		//commands+=Mutator commands+=Mutator* "}") ("constraints" "{" constraints+=Constraint constraints+=Constraint* "}")?
		public Group getGroup() { return cGroup; }

		//load+=Load*
		public Assignment getLoadAssignment_0() { return cLoadAssignment_0; }

		//Load
		public RuleCall getLoadLoadParserRuleCall_0_0() { return cLoadLoadParserRuleCall_0_0; }

		//definition=Definition
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_1_0() { return cDefinitionDefinitionParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//"blocks" "{" blocks+=Block blocks+=Block* "}" | "commands" "{" commands+=Mutator commands+=Mutator* "}"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"blocks" "{" blocks+=Block blocks+=Block* "}"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"blocks"
		public Keyword getBlocksKeyword_3_0_0() { return cBlocksKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//blocks+=Block
		public Assignment getBlocksAssignment_3_0_2() { return cBlocksAssignment_3_0_2; }

		//Block
		public RuleCall getBlocksBlockParserRuleCall_3_0_2_0() { return cBlocksBlockParserRuleCall_3_0_2_0; }

		//blocks+=Block*
		public Assignment getBlocksAssignment_3_0_3() { return cBlocksAssignment_3_0_3; }

		//Block
		public RuleCall getBlocksBlockParserRuleCall_3_0_3_0() { return cBlocksBlockParserRuleCall_3_0_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_4() { return cRightCurlyBracketKeyword_3_0_4; }

		//"commands" "{" commands+=Mutator commands+=Mutator* "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"commands"
		public Keyword getCommandsKeyword_3_1_0() { return cCommandsKeyword_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//commands+=Mutator
		public Assignment getCommandsAssignment_3_1_2() { return cCommandsAssignment_3_1_2; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_3_1_2_0() { return cCommandsMutatorParserRuleCall_3_1_2_0; }

		//commands+=Mutator*
		public Assignment getCommandsAssignment_3_1_3() { return cCommandsAssignment_3_1_3; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_3_1_3_0() { return cCommandsMutatorParserRuleCall_3_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_4() { return cRightCurlyBracketKeyword_3_1_4; }

		//("constraints" "{" constraints+=Constraint constraints+=Constraint* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"constraints"
		public Keyword getConstraintsKeyword_4_0() { return cConstraintsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_4_2() { return cConstraintsAssignment_4_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_4_2_0() { return cConstraintsConstraintParserRuleCall_4_2_0; }

		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_4_3() { return cConstraintsAssignment_4_3; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_4_3_0() { return cConstraintsConstraintParserRuleCall_4_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProgramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//	Library | Program;
		@Override public ParserRule getRule() { return rule; }

		//Library | Program
		public Alternatives getAlternatives() { return cAlternatives; }

		//Library
		public RuleCall getLibraryParserRuleCall_0() { return cLibraryParserRuleCall_0; }

		//Program
		public RuleCall getProgramParserRuleCall_1() { return cProgramParserRuleCall_1; }
	}

	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMetamodelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetamodelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetamodelEStringParserRuleCall_4_0 = (RuleCall)cMetamodelAssignment_4.eContents().get(0);
		
		//Library:
		//	{Library} "library" "for" "metamodel" metamodel=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Library} "library" "for" "metamodel" metamodel=EString
		public Group getGroup() { return cGroup; }

		//{Library}
		public Action getLibraryAction_0() { return cLibraryAction_0; }

		//"library"
		public Keyword getLibraryKeyword_1() { return cLibraryKeyword_1; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//"metamodel"
		public Keyword getMetamodelKeyword_3() { return cMetamodelKeyword_3; }

		//metamodel=EString
		public Assignment getMetamodelAssignment_4() { return cMetamodelAssignment_4; }

		//EString
		public RuleCall getMetamodelEStringParserRuleCall_4_0() { return cMetamodelEStringParserRuleCall_4_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGenerateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumEIntParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Keyword cMutantsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputEStringParserRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		private final Keyword cFromKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSourceSourceParserRuleCall_7_0 = (RuleCall)cSourceAssignment_7.eContents().get(0);
		private final Keyword cMetamodelKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMetamodelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMetamodelEStringParserRuleCall_9_0 = (RuleCall)cMetamodelAssignment_9.eContents().get(0);
		
		//Program:
		//	{Program} "generate" num=EInt? "mutants" "in" output=EString "from" source=Source "metamodel" metamodel=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Program} "generate" num=EInt? "mutants" "in" output=EString "from" source=Source "metamodel" metamodel=EString
		public Group getGroup() { return cGroup; }

		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//"generate"
		public Keyword getGenerateKeyword_1() { return cGenerateKeyword_1; }

		//num=EInt?
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }

		//EInt
		public RuleCall getNumEIntParserRuleCall_2_0() { return cNumEIntParserRuleCall_2_0; }

		//"mutants"
		public Keyword getMutantsKeyword_3() { return cMutantsKeyword_3; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//output=EString
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }

		//EString
		public RuleCall getOutputEStringParserRuleCall_5_0() { return cOutputEStringParserRuleCall_5_0; }

		//"from"
		public Keyword getFromKeyword_6() { return cFromKeyword_6; }

		//source=Source
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }

		//Source
		public RuleCall getSourceSourceParserRuleCall_7_0() { return cSourceSourceParserRuleCall_7_0; }

		//"metamodel"
		public Keyword getMetamodelKeyword_8() { return cMetamodelKeyword_8; }

		//metamodel=EString
		public Assignment getMetamodelAssignment_9() { return cMetamodelAssignment_9; }

		//EString
		public RuleCall getMetamodelEStringParserRuleCall_9_0() { return cMetamodelEStringParserRuleCall_9_0; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathEStringParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Source:
		//	{Source} path= / *(multiple?='all')?* / EString;
		@Override public ParserRule getRule() { return rule; }

		//{Source} path= / *(multiple?='all')?* / EString
		public Group getGroup() { return cGroup; }

		//{Source}
		public Action getSourceAction_0() { return cSourceAction_0; }

		//path= / *(multiple?='all')?* / EString
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		/// *(multiple?='all')?* / EString
		public RuleCall getPathEStringParserRuleCall_1_0() { return cPathEStringParserRuleCall_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFromBlockCrossReference_1_1_0 = (CrossReference)cFromAssignment_1_1.eContents().get(0);
		private final RuleCall cFromBlockIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFromBlockCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFromAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cFromBlockCrossReference_1_2_1_0 = (CrossReference)cFromAssignment_1_2_1.eContents().get(0);
		private final RuleCall cFromBlockIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cFromBlockCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRepeatKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRepeatAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRepeatRepeatEnumRuleCall_2_2_0 = (RuleCall)cRepeatAssignment_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommandsMutatorParserRuleCall_4_0 = (RuleCall)cCommandsAssignment_4.eContents().get(0);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsMutatorParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Group cGroup_7_1_0 = (Group)cAlternatives_7_1.eContents().get(0);
		private final Assignment cMinAssignment_7_1_0_0 = (Assignment)cGroup_7_1_0.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_7_1_0_0_0 = (RuleCall)cMinAssignment_7_1_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_7_1_0_1 = (Keyword)cGroup_7_1_0.eContents().get(1);
		private final Assignment cMaxAssignment_7_1_0_2 = (Assignment)cGroup_7_1_0.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_7_1_0_2_0 = (RuleCall)cMaxAssignment_7_1_0_2.eContents().get(0);
		private final Assignment cFixedAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cFixedEIntParserRuleCall_7_1_1_0 = (RuleCall)cFixedAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Block:
		//	name=ID ("from" from+=[Block] ("," from+=[Block])*)? ("repeat" "=" repeat=Repeat)? "{" commands+=Mutator
		//	commands+=Mutator* "}" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("from" from+=[Block] ("," from+=[Block])*)? ("repeat" "=" repeat=Repeat)? "{" commands+=Mutator
		//commands+=Mutator* "}" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("from" from+=[Block] ("," from+=[Block])*)?
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//from+=[Block]
		public Assignment getFromAssignment_1_1() { return cFromAssignment_1_1; }

		//[Block]
		public CrossReference getFromBlockCrossReference_1_1_0() { return cFromBlockCrossReference_1_1_0; }

		//ID
		public RuleCall getFromBlockIDTerminalRuleCall_1_1_0_1() { return cFromBlockIDTerminalRuleCall_1_1_0_1; }

		//("," from+=[Block])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//from+=[Block]
		public Assignment getFromAssignment_1_2_1() { return cFromAssignment_1_2_1; }

		//[Block]
		public CrossReference getFromBlockCrossReference_1_2_1_0() { return cFromBlockCrossReference_1_2_1_0; }

		//ID
		public RuleCall getFromBlockIDTerminalRuleCall_1_2_1_0_1() { return cFromBlockIDTerminalRuleCall_1_2_1_0_1; }

		//("repeat" "=" repeat=Repeat)?
		public Group getGroup_2() { return cGroup_2; }

		//"repeat"
		public Keyword getRepeatKeyword_2_0() { return cRepeatKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//repeat=Repeat
		public Assignment getRepeatAssignment_2_2() { return cRepeatAssignment_2_2; }

		//Repeat
		public RuleCall getRepeatRepeatEnumRuleCall_2_2_0() { return cRepeatRepeatEnumRuleCall_2_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//commands+=Mutator
		public Assignment getCommandsAssignment_4() { return cCommandsAssignment_4; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_4_0() { return cCommandsMutatorParserRuleCall_4_0; }

		//commands+=Mutator*
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_5_0() { return cCommandsMutatorParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?
		public Group getGroup_7() { return cGroup_7; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }

		//min=EInt ".." max=MaxCardinality | fixed=EInt
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//min=EInt ".." max=MaxCardinality
		public Group getGroup_7_1_0() { return cGroup_7_1_0; }

		//min=EInt
		public Assignment getMinAssignment_7_1_0_0() { return cMinAssignment_7_1_0_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_7_1_0_0_0() { return cMinEIntParserRuleCall_7_1_0_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_7_1_0_1() { return cFullStopFullStopKeyword_7_1_0_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_7_1_0_2() { return cMaxAssignment_7_1_0_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_7_1_0_2_0() { return cMaxMaxCardinalityParserRuleCall_7_1_0_2_0; }

		//fixed=EInt
		public Assignment getFixedAssignment_7_1_1() { return cFixedAssignment_7_1_1; }

		//EInt
		public RuleCall getFixedEIntParserRuleCall_7_1_1_0() { return cFixedEIntParserRuleCall_7_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleEStringParserRuleCall_4_0 = (RuleCall)cRuleAssignment_4.eContents().get(0);
		
		//Constraint:
		//	"context" type=[ecore::EClass] id=EString ":" rule=EString;
		@Override public ParserRule getRule() { return rule; }

		//"context" type=[ecore::EClass] id=EString ":" rule=EString
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_1_0_1() { return cTypeEClassIDTerminalRuleCall_1_0_1; }

		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//rule=EString
		public Assignment getRuleAssignment_4() { return cRuleAssignment_4; }

		//EString
		public RuleCall getRuleEStringParserRuleCall_4_0() { return cRuleEStringParserRuleCall_4_0; }
	}

	public class MutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mutator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateObjectMutatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectObjectMutatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeMutatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cModifySourceReferenceMutatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cModifyTargetReferenceMutatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCreateReferenceMutatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveObjectMutatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRemoveReferenceMutatorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cModifyInformationMutatorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCloneObjectMutatorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Mutator:
		//	CreateObjectMutator | SelectObjectMutator | CompositeMutator | ModifySourceReferenceMutator |
		//	ModifyTargetReferenceMutator | CreateReferenceMutator | RemoveObjectMutator | RemoveReferenceMutator |
		//	ModifyInformationMutator | CloneObjectMutator;
		@Override public ParserRule getRule() { return rule; }

		//CreateObjectMutator | SelectObjectMutator | CompositeMutator | ModifySourceReferenceMutator |
		//ModifyTargetReferenceMutator | CreateReferenceMutator | RemoveObjectMutator | RemoveReferenceMutator |
		//ModifyInformationMutator | CloneObjectMutator
		public Alternatives getAlternatives() { return cAlternatives; }

		//CreateObjectMutator
		public RuleCall getCreateObjectMutatorParserRuleCall_0() { return cCreateObjectMutatorParserRuleCall_0; }

		//SelectObjectMutator
		public RuleCall getSelectObjectMutatorParserRuleCall_1() { return cSelectObjectMutatorParserRuleCall_1; }

		//CompositeMutator
		public RuleCall getCompositeMutatorParserRuleCall_2() { return cCompositeMutatorParserRuleCall_2; }

		//ModifySourceReferenceMutator
		public RuleCall getModifySourceReferenceMutatorParserRuleCall_3() { return cModifySourceReferenceMutatorParserRuleCall_3; }

		//ModifyTargetReferenceMutator
		public RuleCall getModifyTargetReferenceMutatorParserRuleCall_4() { return cModifyTargetReferenceMutatorParserRuleCall_4; }

		//CreateReferenceMutator
		public RuleCall getCreateReferenceMutatorParserRuleCall_5() { return cCreateReferenceMutatorParserRuleCall_5; }

		//RemoveObjectMutator
		public RuleCall getRemoveObjectMutatorParserRuleCall_6() { return cRemoveObjectMutatorParserRuleCall_6; }

		//RemoveReferenceMutator
		public RuleCall getRemoveReferenceMutatorParserRuleCall_7() { return cRemoveReferenceMutatorParserRuleCall_7; }

		//ModifyInformationMutator
		public RuleCall getModifyInformationMutatorParserRuleCall_8() { return cModifyInformationMutatorParserRuleCall_8; }

		//CloneObjectMutator
		public RuleCall getCloneObjectMutatorParserRuleCall_9() { return cCloneObjectMutatorParserRuleCall_9; }
	}

	public class ObSelectionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObSelectionStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRandomSelectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecificSelectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompleteSelectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOtherSelectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSubsetSelectionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ObSelectionStrategy:
		//	RandomSelection | SpecificSelection | CompleteSelection | OtherSelection | SubsetSelection;
		@Override public ParserRule getRule() { return rule; }

		//RandomSelection | SpecificSelection | CompleteSelection | OtherSelection | SubsetSelection
		public Alternatives getAlternatives() { return cAlternatives; }

		//RandomSelection
		public RuleCall getRandomSelectionParserRuleCall_0() { return cRandomSelectionParserRuleCall_0; }

		//SpecificSelection
		public RuleCall getSpecificSelectionParserRuleCall_1() { return cSpecificSelectionParserRuleCall_1; }

		//CompleteSelection
		public RuleCall getCompleteSelectionParserRuleCall_2() { return cCompleteSelectionParserRuleCall_2; }

		//OtherSelection
		public RuleCall getOtherSelectionParserRuleCall_3() { return cOtherSelectionParserRuleCall_3; }

		//SubsetSelection
		public RuleCall getSubsetSelectionParserRuleCall_4() { return cSubsetSelectionParserRuleCall_4; }
	}

	public class RandomSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomSelection");
		private final RuleCall cRandomTypeSelectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RandomSelection:
		//	RandomTypeSelection;
		@Override public ParserRule getRule() { return rule; }

		//RandomTypeSelection
		public RuleCall getRandomTypeSelectionParserRuleCall() { return cRandomTypeSelectionParserRuleCall; }
	}

	public class SpecificSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificObjectSelectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpecificClosureSelectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SpecificSelection:
		//	SpecificObjectSelection | SpecificClosureSelection;
		@Override public ParserRule getRule() { return rule; }

		//SpecificObjectSelection | SpecificClosureSelection
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificObjectSelection
		public RuleCall getSpecificObjectSelectionParserRuleCall_0() { return cSpecificObjectSelectionParserRuleCall_0; }

		//SpecificClosureSelection
		public RuleCall getSpecificClosureSelectionParserRuleCall_1() { return cSpecificClosureSelectionParserRuleCall_1; }
	}

	public class CompleteSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompleteSelection");
		private final RuleCall cCompleteTypeSelectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CompleteSelection:
		//	CompleteTypeSelection;
		@Override public ParserRule getRule() { return rule; }

		//CompleteTypeSelection
		public RuleCall getCompleteTypeSelectionParserRuleCall() { return cCompleteTypeSelectionParserRuleCall; }
	}

	public class OtherSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherSelection");
		private final RuleCall cOtherTypeSelectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OtherSelection:
		//	OtherTypeSelection;
		@Override public ParserRule getRule() { return rule; }

		//OtherTypeSelection
		public RuleCall getOtherTypeSelectionParserRuleCall() { return cOtherTypeSelectionParserRuleCall; }
	}

	public class SubsetSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsetSelection");
		private final RuleCall cEachTypeSelectionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SubsetSelection:
		//	EachTypeSelection;
		@Override public ParserRule getRule() { return rule; }

		//EachTypeSelection
		public RuleCall getEachTypeSelectionParserRuleCall() { return cEachTypeSelectionParserRuleCall; }
	}

	public class AttributeEvaluationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeEvaluationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectAttributeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeEvaluationType:
		//	AttributeType | ObjectAttributeType;
		@Override public ParserRule getRule() { return rule; }

		//AttributeType | ObjectAttributeType
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_0() { return cAttributeTypeParserRuleCall_0; }

		//ObjectAttributeType
		public RuleCall getObjectAttributeTypeParserRuleCall_1() { return cObjectAttributeTypeParserRuleCall_1; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListStringTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRandomTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AttributeType:
		//	NumberType | BooleanType | StringType | ListStringType | RandomType | ListType;
		@Override public ParserRule getRule() { return rule; }

		//NumberType | BooleanType | StringType | ListStringType | RandomType | ListType
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberType
		public RuleCall getNumberTypeParserRuleCall_0() { return cNumberTypeParserRuleCall_0; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_2() { return cStringTypeParserRuleCall_2; }

		//ListStringType
		public RuleCall getListStringTypeParserRuleCall_3() { return cListStringTypeParserRuleCall_3; }

		//RandomType
		public RuleCall getRandomTypeParserRuleCall_4() { return cRandomTypeParserRuleCall_4; }

		//ListType
		public RuleCall getListTypeParserRuleCall_5() { return cListTypeParserRuleCall_5; }
	}

	public class NumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinValueTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaxValueTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRandomNumberTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NumberType:
		//	IntegerType | DoubleType | MinValueType | MaxValueType | RandomNumberType;
		@Override public ParserRule getRule() { return rule; }

		//IntegerType | DoubleType | MinValueType | MaxValueType | RandomNumberType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_1() { return cDoubleTypeParserRuleCall_1; }

		//MinValueType
		public RuleCall getMinValueTypeParserRuleCall_2() { return cMinValueTypeParserRuleCall_2; }

		//MaxValueType
		public RuleCall getMaxValueTypeParserRuleCall_3() { return cMaxValueTypeParserRuleCall_3; }

		//RandomNumberType
		public RuleCall getRandomNumberTypeParserRuleCall_4() { return cRandomNumberTypeParserRuleCall_4; }
	}

	public class RandomNumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomNumberType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRandomDoubleNumberTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomIntegerNumberTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RandomNumberType:
		//	RandomDoubleNumberType | RandomIntegerNumberType;
		@Override public ParserRule getRule() { return rule; }

		//RandomDoubleNumberType | RandomIntegerNumberType
		public Alternatives getAlternatives() { return cAlternatives; }

		//RandomDoubleNumberType
		public RuleCall getRandomDoubleNumberTypeParserRuleCall_0() { return cRandomDoubleNumberTypeParserRuleCall_0; }

		//RandomIntegerNumberType
		public RuleCall getRandomIntegerNumberTypeParserRuleCall_1() { return cRandomIntegerNumberTypeParserRuleCall_1; }
	}

	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Load");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoadAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileEStringParserRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		
		//Load:
		//	{Load} "import" file=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Load} "import" file=EString
		public Group getGroup() { return cGroup; }

		//{Load}
		public Action getLoadAction_0() { return cLoadAction_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//file=EString
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }

		//EString
		public RuleCall getFileEStringParserRuleCall_2_0() { return cFileEStringParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeLogicOperatorEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//BinaryOperator:
		//	{BinaryOperator} type=LogicOperator;
		@Override public ParserRule getRule() { return rule; }

		//{BinaryOperator} type=LogicOperator
		public Group getGroup() { return cGroup; }

		//{BinaryOperator}
		public Action getBinaryOperatorAction_0() { return cBinaryOperatorAction_0; }

		//type=LogicOperator
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//LogicOperator
		public RuleCall getTypeLogicOperatorEnumRuleCall_1_0() { return cTypeLogicOperatorEnumRuleCall_1_0; }
	}

	public class AttributeEvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeEvaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeEvaluationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameEAttributeCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameEAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cNameEAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAttributeEvaluationTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeEvaluation:
		//	{AttributeEvaluation} name=[ecore::EAttribute] value=AttributeEvaluationType;
		@Override public ParserRule getRule() { return rule; }

		//{AttributeEvaluation} name=[ecore::EAttribute] value=AttributeEvaluationType
		public Group getGroup() { return cGroup; }

		//{AttributeEvaluation}
		public Action getAttributeEvaluationAction_0() { return cAttributeEvaluationAction_0; }

		//name=[ecore::EAttribute]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[ecore::EAttribute]
		public CrossReference getNameEAttributeCrossReference_1_0() { return cNameEAttributeCrossReference_1_0; }

		//ID
		public RuleCall getNameEAttributeIDTerminalRuleCall_1_0_1() { return cNameEAttributeIDTerminalRuleCall_1_0_1; }

		//value=AttributeEvaluationType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AttributeEvaluationType
		public RuleCall getValueAttributeEvaluationTypeParserRuleCall_2_0() { return cValueAttributeEvaluationTypeParserRuleCall_2_0; }
	}

	public class ReferenceEvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceEvaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceEvaluationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cNameEReferenceCrossReference_1_0_0 = (CrossReference)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cNameEReferenceIDTerminalRuleCall_1_0_0_1 = (RuleCall)cNameEReferenceCrossReference_1_0_0.eContents().get(1);
		private final Keyword cSelfKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefNameEReferenceCrossReference_2_1_0 = (CrossReference)cRefNameAssignment_2_1.eContents().get(0);
		private final RuleCall cRefNameEReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefNameEReferenceCrossReference_2_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValueObSelectionStrategyParserRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final Keyword cNullKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ReferenceEvaluation:
		//	{ReferenceEvaluation} (name=[ecore::EReference] | "self") ("->" refName=[ecore::EReference])? operator=Operator
		//	(value=ObSelectionStrategy | "null");
		@Override public ParserRule getRule() { return rule; }

		//{ReferenceEvaluation} (name=[ecore::EReference] | "self") ("->" refName=[ecore::EReference])? operator=Operator
		//(value=ObSelectionStrategy | "null")
		public Group getGroup() { return cGroup; }

		//{ReferenceEvaluation}
		public Action getReferenceEvaluationAction_0() { return cReferenceEvaluationAction_0; }

		//name=[ecore::EReference] | "self"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=[ecore::EReference]
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//[ecore::EReference]
		public CrossReference getNameEReferenceCrossReference_1_0_0() { return cNameEReferenceCrossReference_1_0_0; }

		//ID
		public RuleCall getNameEReferenceIDTerminalRuleCall_1_0_0_1() { return cNameEReferenceIDTerminalRuleCall_1_0_0_1; }

		//"self"
		public Keyword getSelfKeyword_1_1() { return cSelfKeyword_1_1; }

		//("->" refName=[ecore::EReference])?
		public Group getGroup_2() { return cGroup_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }

		//refName=[ecore::EReference]
		public Assignment getRefNameAssignment_2_1() { return cRefNameAssignment_2_1; }

		//[ecore::EReference]
		public CrossReference getRefNameEReferenceCrossReference_2_1_0() { return cRefNameEReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getRefNameEReferenceIDTerminalRuleCall_2_1_0_1() { return cRefNameEReferenceIDTerminalRuleCall_2_1_0_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_3_0() { return cOperatorOperatorEnumRuleCall_3_0; }

		//value=ObSelectionStrategy | "null"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//value=ObSelectionStrategy
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }

		//ObSelectionStrategy
		public RuleCall getValueObSelectionStrategyParserRuleCall_4_0_0() { return cValueObSelectionStrategyParserRuleCall_4_0_0; }

		//"null"
		public Keyword getNullKeyword_4_1() { return cNullKeyword_4_1; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeEvaluationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceEvaluationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Evaluation:
		//	AttributeEvaluation | ReferenceEvaluation;
		@Override public ParserRule getRule() { return rule; }

		//AttributeEvaluation | ReferenceEvaluation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeEvaluation
		public RuleCall getAttributeEvaluationParserRuleCall_0() { return cAttributeEvaluationParserRuleCall_0; }

		//ReferenceEvaluation
		public RuleCall getReferenceEvaluationParserRuleCall_1() { return cReferenceEvaluationParserRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstEvaluationParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperatorBinaryOperatorParserRuleCall_2_0_0 = (RuleCall)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cSecondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSecondEvaluationParserRuleCall_2_1_0 = (RuleCall)cSecondAssignment_2_1.eContents().get(0);
		
		//Expression:
		//	{Expression} first=Evaluation (operator+=BinaryOperator second+=Evaluation)*;
		@Override public ParserRule getRule() { return rule; }

		//{Expression} first=Evaluation (operator+=BinaryOperator second+=Evaluation)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//first=Evaluation
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//Evaluation
		public RuleCall getFirstEvaluationParserRuleCall_1_0() { return cFirstEvaluationParserRuleCall_1_0; }

		//(operator+=BinaryOperator second+=Evaluation)*
		public Group getGroup_2() { return cGroup_2; }

		//operator+=BinaryOperator
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorParserRuleCall_2_0_0() { return cOperatorBinaryOperatorParserRuleCall_2_0_0; }

		//second+=Evaluation
		public Assignment getSecondAssignment_2_1() { return cSecondAssignment_2_1; }

		//Evaluation
		public RuleCall getSecondEvaluationParserRuleCall_2_1_0() { return cSecondEvaluationParserRuleCall_2_1_0; }
	}

	public class RemoveObjectMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveObjectMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveObjectMutatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContainerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContainerObSelectionStrategyParserRuleCall_3_1_0 = (RuleCall)cContainerAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cMinAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_4_1_0_0 = (RuleCall)cMinAssignment_4_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cMaxAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_4_2_0 = (RuleCall)cMaxAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		/// *
		//RemoveObjectMutator returns RemoveObjectMutator:	
		//	'remove' object=ObSelectionStrategy
		//	('[' (min=EInt '..')? max=MaxCardinality ']')?
		//	;
		//	
		//RemoveReferenceMutator returns RemoveReferenceMutator:	
		//	'remove' 'reference' refType=[ecore::EReference|ID]
		//	'in' container=ObSelectionStrategy
		//	('[' (min=EInt '..')? max=MaxCardinality ']')?
		//	;	
		// * / RemoveObjectMutator:
		//	{RemoveObjectMutator} "remove" object=ObSelectionStrategy ("from" container=ObSelectionStrategy)? ("[" (min=EInt
		//	"..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{RemoveObjectMutator} "remove" object=ObSelectionStrategy ("from" container=ObSelectionStrategy)? ("[" (min=EInt "..")?
		//max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//{RemoveObjectMutator}
		public Action getRemoveObjectMutatorAction_0() { return cRemoveObjectMutatorAction_0; }

		//"remove"
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_2_0() { return cObjectObSelectionStrategyParserRuleCall_2_0; }

		//("from" container=ObSelectionStrategy)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//container=ObSelectionStrategy
		public Assignment getContainerAssignment_3_1() { return cContainerAssignment_3_1; }

		//ObSelectionStrategy
		public RuleCall getContainerObSelectionStrategyParserRuleCall_3_1_0() { return cContainerObSelectionStrategyParserRuleCall_3_1_0; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//(min=EInt "..")?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//min=EInt
		public Assignment getMinAssignment_4_1_0() { return cMinAssignment_4_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_4_1_0_0() { return cMinEIntParserRuleCall_4_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4_1_1() { return cFullStopFullStopKeyword_4_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_4_2() { return cMaxAssignment_4_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_4_2_0() { return cMaxMaxCardinalityParserRuleCall_4_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}

	public class RemoveReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveReferenceMutator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveRandomReferenceMutatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveSpecificReferenceMutatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemoveCompleteReferenceMutatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RemoveReferenceMutator:
		//	RemoveRandomReferenceMutator | RemoveSpecificReferenceMutator | RemoveCompleteReferenceMutator;
		@Override public ParserRule getRule() { return rule; }

		//RemoveRandomReferenceMutator | RemoveSpecificReferenceMutator | RemoveCompleteReferenceMutator
		public Alternatives getAlternatives() { return cAlternatives; }

		//RemoveRandomReferenceMutator
		public RuleCall getRemoveRandomReferenceMutatorParserRuleCall_0() { return cRemoveRandomReferenceMutatorParserRuleCall_0; }

		//RemoveSpecificReferenceMutator
		public RuleCall getRemoveSpecificReferenceMutatorParserRuleCall_1() { return cRemoveSpecificReferenceMutatorParserRuleCall_1; }

		//RemoveCompleteReferenceMutator
		public RuleCall getRemoveCompleteReferenceMutatorParserRuleCall_2() { return cRemoveCompleteReferenceMutatorParserRuleCall_2; }
	}

	public class RemoveRandomReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveRandomReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveRandomReferenceMutatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOneKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReferenceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefTypeEReferenceCrossReference_4_0 = (CrossReference)cRefTypeAssignment_4.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_4_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_4_0.eContents().get(1);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeEClassCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeEClassCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cMinAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_7_1_0_0 = (RuleCall)cMinAssignment_7_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Assignment cMaxAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_7_2_0 = (RuleCall)cMaxAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//RemoveRandomReferenceMutator:
		//	{RemoveRandomReferenceMutator} "remove" "one" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass] ("["
		//	(min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{RemoveRandomReferenceMutator} "remove" "one" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass] ("["
		//(min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//{RemoveRandomReferenceMutator}
		public Action getRemoveRandomReferenceMutatorAction_0() { return cRemoveRandomReferenceMutatorAction_0; }

		//"remove"
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }

		//"one"
		public Keyword getOneKeyword_2() { return cOneKeyword_2; }

		//"reference"
		public Keyword getReferenceKeyword_3() { return cReferenceKeyword_3; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_4() { return cRefTypeAssignment_4; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_4_0() { return cRefTypeEReferenceCrossReference_4_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_4_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_4_0_1; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_6_0() { return cTypeEClassCrossReference_6_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_6_0_1() { return cTypeEClassIDTerminalRuleCall_6_0_1; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_7() { return cGroup_7; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }

		//(min=EInt "..")?
		public Group getGroup_7_1() { return cGroup_7_1; }

		//min=EInt
		public Assignment getMinAssignment_7_1_0() { return cMinAssignment_7_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_7_1_0_0() { return cMinEIntParserRuleCall_7_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_7_1_1() { return cFullStopFullStopKeyword_7_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_7_2() { return cMaxAssignment_7_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_7_2_0() { return cMaxMaxCardinalityParserRuleCall_7_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }
	}

	public class RemoveSpecificReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveSpecificReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveSpecificReferenceMutatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReferenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefTypeEReferenceCrossReference_3_0 = (CrossReference)cRefTypeAssignment_3.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_3_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_3_0.eContents().get(1);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContainerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainerObSelectionStrategyParserRuleCall_5_0 = (RuleCall)cContainerAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_6_1_0_0 = (RuleCall)cMinAssignment_6_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cMaxAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_6_2_0 = (RuleCall)cMaxAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//RemoveSpecificReferenceMutator:
		//	{RemoveSpecificReferenceMutator} "remove" "reference" refType=[ecore::EReference] "in" container=ObSelectionStrategy
		//	("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{RemoveSpecificReferenceMutator} "remove" "reference" refType=[ecore::EReference] "in" container=ObSelectionStrategy
		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//{RemoveSpecificReferenceMutator}
		public Action getRemoveSpecificReferenceMutatorAction_0() { return cRemoveSpecificReferenceMutatorAction_0; }

		//"remove"
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }

		//"reference"
		public Keyword getReferenceKeyword_2() { return cReferenceKeyword_2; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_3() { return cRefTypeAssignment_3; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_3_0() { return cRefTypeEReferenceCrossReference_3_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_3_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_3_0_1; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//container=ObSelectionStrategy
		public Assignment getContainerAssignment_5() { return cContainerAssignment_5; }

		//ObSelectionStrategy
		public RuleCall getContainerObSelectionStrategyParserRuleCall_5_0() { return cContainerObSelectionStrategyParserRuleCall_5_0; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//(min=EInt "..")?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//min=EInt
		public Assignment getMinAssignment_6_1_0() { return cMinAssignment_6_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_6_1_0_0() { return cMinEIntParserRuleCall_6_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_6_1_1() { return cFullStopFullStopKeyword_6_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_6_2() { return cMaxAssignment_6_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_6_2_0() { return cMaxMaxCardinalityParserRuleCall_6_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
	}

	public class RemoveCompleteReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveCompleteReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveCompleteReferenceMutatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAllKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReferenceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefTypeEReferenceCrossReference_4_0 = (CrossReference)cRefTypeAssignment_4.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_4_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_4_0.eContents().get(1);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeEClassCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeEClassCrossReference_6_0.eContents().get(1);
		
		//RemoveCompleteReferenceMutator:
		//	{RemoveCompleteReferenceMutator} "remove" "all" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass];
		@Override public ParserRule getRule() { return rule; }

		//{RemoveCompleteReferenceMutator} "remove" "all" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass]
		public Group getGroup() { return cGroup; }

		//{RemoveCompleteReferenceMutator}
		public Action getRemoveCompleteReferenceMutatorAction_0() { return cRemoveCompleteReferenceMutatorAction_0; }

		//"remove"
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }

		//"all"
		public Keyword getAllKeyword_2() { return cAllKeyword_2; }

		//"reference"
		public Keyword getReferenceKeyword_3() { return cReferenceKeyword_3; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_4() { return cRefTypeAssignment_4; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_4_0() { return cRefTypeEReferenceCrossReference_4_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_4_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_4_0_1; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_6_0() { return cTypeEClassCrossReference_6_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_6_0_1() { return cTypeEClassIDTerminalRuleCall_6_0_1; }
	}

	public class CreateObjectMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateObjectMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContainerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContainerObSelectionStrategyParserRuleCall_3_1_0 = (RuleCall)cContainerAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Assignment cAttributesAssignment_4_2_0 = (Assignment)cAlternatives_4_2.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_4_2_0_0 = (RuleCall)cAttributesAssignment_4_2_0.eContents().get(0);
		private final Assignment cReferencesAssignment_4_2_1 = (Assignment)cAlternatives_4_2.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_4_2_1_0 = (RuleCall)cReferencesAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Alternatives cAlternatives_4_3_1 = (Alternatives)cGroup_4_3.eContents().get(1);
		private final Assignment cAttributesAssignment_4_3_1_0 = (Assignment)cAlternatives_4_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_4_3_1_0_0 = (RuleCall)cAttributesAssignment_4_3_1_0.eContents().get(0);
		private final Assignment cReferencesAssignment_4_3_1_1 = (Assignment)cAlternatives_4_3_1.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_4_3_1_1_0 = (RuleCall)cReferencesAssignment_4_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cMinAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_5_1_0_0 = (RuleCall)cMinAssignment_5_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cMaxAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_5_2_0 = (RuleCall)cMaxAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//CreateObjectMutator:
		//	(name=ID "=")? "create" type=[ecore::EClass] ("in" container=ObSelectionStrategy)? ("with" "{"
		//	(attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet | references+=ReferenceSet))*
		//	"}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? "create" type=[ecore::EClass] ("in" container=ObSelectionStrategy)? ("with" "{" (attributes+=AttributeSet
		//| references+=ReferenceSet)? ("," (attributes+=AttributeSet | references+=ReferenceSet))* "}")? ("[" (min=EInt "..")?
		//max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"create"
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_0_1() { return cTypeEClassIDTerminalRuleCall_2_0_1; }

		//("in" container=ObSelectionStrategy)?
		public Group getGroup_3() { return cGroup_3; }

		//"in"
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }

		//container=ObSelectionStrategy
		public Assignment getContainerAssignment_3_1() { return cContainerAssignment_3_1; }

		//ObSelectionStrategy
		public RuleCall getContainerObSelectionStrategyParserRuleCall_3_1_0() { return cContainerObSelectionStrategyParserRuleCall_3_1_0; }

		//("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
		//references+=ReferenceSet))* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"with"
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//(attributes+=AttributeSet | references+=ReferenceSet)?
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_4_2_0() { return cAttributesAssignment_4_2_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_4_2_0_0() { return cAttributesAttributeSetParserRuleCall_4_2_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_4_2_1() { return cReferencesAssignment_4_2_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_4_2_1_0() { return cReferencesReferenceSetParserRuleCall_4_2_1_0; }

		//("," (attributes+=AttributeSet | references+=ReferenceSet))*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//attributes+=AttributeSet | references+=ReferenceSet
		public Alternatives getAlternatives_4_3_1() { return cAlternatives_4_3_1; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_4_3_1_0() { return cAttributesAssignment_4_3_1_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_4_3_1_0_0() { return cAttributesAttributeSetParserRuleCall_4_3_1_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_4_3_1_1() { return cReferencesAssignment_4_3_1_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_4_3_1_1_0() { return cReferencesReferenceSetParserRuleCall_4_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//(min=EInt "..")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//min=EInt
		public Assignment getMinAssignment_5_1_0() { return cMinAssignment_5_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0_0() { return cMinEIntParserRuleCall_5_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5_1_1() { return cFullStopFullStopKeyword_5_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_5_2() { return cMaxAssignment_5_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_5_2_0() { return cMaxMaxCardinalityParserRuleCall_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
	}

	public class SelectObjectMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectObjectMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainerObSelectionStrategyParserRuleCall_4_1_0 = (RuleCall)cContainerAssignment_4_1.eContents().get(0);
		
		//SelectObjectMutator:
		//	name=ID "=" "select" object=ObSelectionStrategy ("in" container=ObSelectionStrategy)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" "select" object=ObSelectionStrategy ("in" container=ObSelectionStrategy)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"select"
		public Keyword getSelectKeyword_2() { return cSelectKeyword_2; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_3_0() { return cObjectObSelectionStrategyParserRuleCall_3_0; }

		//("in" container=ObSelectionStrategy)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//container=ObSelectionStrategy
		public Assignment getContainerAssignment_4_1() { return cContainerAssignment_4_1; }

		//ObSelectionStrategy
		public RuleCall getContainerObSelectionStrategyParserRuleCall_4_1_0() { return cContainerObSelectionStrategyParserRuleCall_4_1_0; }
	}

	public class ModifyInformationMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyInformationMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cModifyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cAttributesAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_3_2_0_0 = (RuleCall)cAttributesAssignment_3_2_0.eContents().get(0);
		private final Assignment cReferencesAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_3_2_1_0 = (RuleCall)cReferencesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Alternatives cAlternatives_3_3_1 = (Alternatives)cGroup_3_3.eContents().get(1);
		private final Assignment cAttributesAssignment_3_3_1_0 = (Assignment)cAlternatives_3_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_3_3_1_0_0 = (RuleCall)cAttributesAssignment_3_3_1_0.eContents().get(0);
		private final Assignment cReferencesAssignment_3_3_1_1 = (Assignment)cAlternatives_3_3_1.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_3_3_1_1_0 = (RuleCall)cReferencesAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cMinAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_4_1_0_0 = (RuleCall)cMinAssignment_4_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cMaxAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_4_2_0 = (RuleCall)cMaxAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//ModifyInformationMutator:
		//	(name=ID "=")? "modify" object=ObSelectionStrategy ("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)?
		//	("," (attributes+=AttributeSet | references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? "modify" object=ObSelectionStrategy ("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)?
		//("," (attributes+=AttributeSet | references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"modify"
		public Keyword getModifyKeyword_1() { return cModifyKeyword_1; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_2_0() { return cObjectObSelectionStrategyParserRuleCall_2_0; }

		//("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
		//references+=ReferenceSet))* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//(attributes+=AttributeSet | references+=ReferenceSet)?
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_3_2_0() { return cAttributesAssignment_3_2_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_3_2_0_0() { return cAttributesAttributeSetParserRuleCall_3_2_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_3_2_1() { return cReferencesAssignment_3_2_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_3_2_1_0() { return cReferencesReferenceSetParserRuleCall_3_2_1_0; }

		//("," (attributes+=AttributeSet | references+=ReferenceSet))*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//attributes+=AttributeSet | references+=ReferenceSet
		public Alternatives getAlternatives_3_3_1() { return cAlternatives_3_3_1; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_3_3_1_0() { return cAttributesAssignment_3_3_1_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_3_3_1_0_0() { return cAttributesAttributeSetParserRuleCall_3_3_1_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_3_3_1_1() { return cReferencesAssignment_3_3_1_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_3_3_1_1_0() { return cReferencesReferenceSetParserRuleCall_3_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//(min=EInt "..")?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//min=EInt
		public Assignment getMinAssignment_4_1_0() { return cMinAssignment_4_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_4_1_0_0() { return cMinEIntParserRuleCall_4_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4_1_1() { return cFullStopFullStopKeyword_4_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_4_2() { return cMaxAssignment_4_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_4_2_0() { return cMaxMaxCardinalityParserRuleCall_4_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}

	public class CreateReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReferenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefTypeEReferenceCrossReference_3_0 = (CrossReference)cRefTypeAssignment_3.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_3_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetObSelectionStrategyParserRuleCall_4_1_0 = (RuleCall)cTargetAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSourceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSourceObSelectionStrategyParserRuleCall_5_1_0 = (RuleCall)cSourceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_6_1_0_0 = (RuleCall)cMinAssignment_6_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cMaxAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_6_2_0 = (RuleCall)cMaxAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//CreateReferenceMutator:
		//	(name=ID "=")? "create" "reference" refType=[ecore::EReference] ("to" target=ObSelectionStrategy)? ("in"
		//	source=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? "create" "reference" refType=[ecore::EReference] ("to" target=ObSelectionStrategy)? ("in"
		//source=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"create"
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }

		//"reference"
		public Keyword getReferenceKeyword_2() { return cReferenceKeyword_2; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_3() { return cRefTypeAssignment_3; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_3_0() { return cRefTypeEReferenceCrossReference_3_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_3_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_3_0_1; }

		//("to" target=ObSelectionStrategy)?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//target=ObSelectionStrategy
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }

		//ObSelectionStrategy
		public RuleCall getTargetObSelectionStrategyParserRuleCall_4_1_0() { return cTargetObSelectionStrategyParserRuleCall_4_1_0; }

		//("in" source=ObSelectionStrategy)?
		public Group getGroup_5() { return cGroup_5; }

		//"in"
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }

		//source=ObSelectionStrategy
		public Assignment getSourceAssignment_5_1() { return cSourceAssignment_5_1; }

		//ObSelectionStrategy
		public RuleCall getSourceObSelectionStrategyParserRuleCall_5_1_0() { return cSourceObSelectionStrategyParserRuleCall_5_1_0; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//(min=EInt "..")?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//min=EInt
		public Assignment getMinAssignment_6_1_0() { return cMinAssignment_6_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_6_1_0_0() { return cMinEIntParserRuleCall_6_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_6_1_1() { return cFullStopFullStopKeyword_6_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_6_2() { return cMaxAssignment_6_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_6_2_0() { return cMaxMaxCardinalityParserRuleCall_6_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
	}

	public class ModifySourceReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifySourceReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTypeEReferenceCrossReference_2_0 = (CrossReference)cRefTypeAssignment_2.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceObSelectionStrategyParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewSourceObSelectionStrategyParserRuleCall_4_1_0 = (RuleCall)cNewSourceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cMinAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_5_1_0_0 = (RuleCall)cMinAssignment_5_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cMaxAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_5_2_0 = (RuleCall)cMaxAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ModifySourceReferenceMutator:
		//	"modify" "source" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to"
		//	newSource=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//"modify" "source" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to" newSource=ObSelectionStrategy)?
		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//"modify"
		public Keyword getModifyKeyword_0() { return cModifyKeyword_0; }

		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_2() { return cRefTypeAssignment_2; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_2_0() { return cRefTypeEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_2_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_2_0_1; }

		//("from" source=ObSelectionStrategy)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=ObSelectionStrategy
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//ObSelectionStrategy
		public RuleCall getSourceObSelectionStrategyParserRuleCall_3_1_0() { return cSourceObSelectionStrategyParserRuleCall_3_1_0; }

		//("to" newSource=ObSelectionStrategy)?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//newSource=ObSelectionStrategy
		public Assignment getNewSourceAssignment_4_1() { return cNewSourceAssignment_4_1; }

		//ObSelectionStrategy
		public RuleCall getNewSourceObSelectionStrategyParserRuleCall_4_1_0() { return cNewSourceObSelectionStrategyParserRuleCall_4_1_0; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//(min=EInt "..")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//min=EInt
		public Assignment getMinAssignment_5_1_0() { return cMinAssignment_5_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0_0() { return cMinEIntParserRuleCall_5_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5_1_1() { return cFullStopFullStopKeyword_5_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_5_2() { return cMaxAssignment_5_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_5_2_0() { return cMaxMaxCardinalityParserRuleCall_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
	}

	public class ModifyTargetReferenceMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyTargetReferenceMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTargetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTypeEReferenceCrossReference_2_0 = (CrossReference)cRefTypeAssignment_2.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSourceObSelectionStrategyParserRuleCall_3_1_0 = (RuleCall)cSourceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNewTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNewTargetObSelectionStrategyParserRuleCall_4_1_0 = (RuleCall)cNewTargetAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cMinAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_5_1_0_0 = (RuleCall)cMinAssignment_5_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cMaxAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_5_2_0 = (RuleCall)cMaxAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ModifyTargetReferenceMutator:
		//	"modify" "target" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to"
		//	newTarget=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//"modify" "target" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to" newTarget=ObSelectionStrategy)?
		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//"modify"
		public Keyword getModifyKeyword_0() { return cModifyKeyword_0; }

		//"target"
		public Keyword getTargetKeyword_1() { return cTargetKeyword_1; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_2() { return cRefTypeAssignment_2; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_2_0() { return cRefTypeEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_2_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_2_0_1; }

		//("from" source=ObSelectionStrategy)?
		public Group getGroup_3() { return cGroup_3; }

		//"from"
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//source=ObSelectionStrategy
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//ObSelectionStrategy
		public RuleCall getSourceObSelectionStrategyParserRuleCall_3_1_0() { return cSourceObSelectionStrategyParserRuleCall_3_1_0; }

		//("to" newTarget=ObSelectionStrategy)?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//newTarget=ObSelectionStrategy
		public Assignment getNewTargetAssignment_4_1() { return cNewTargetAssignment_4_1; }

		//ObSelectionStrategy
		public RuleCall getNewTargetObSelectionStrategyParserRuleCall_4_1_0() { return cNewTargetObSelectionStrategyParserRuleCall_4_1_0; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//(min=EInt "..")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//min=EInt
		public Assignment getMinAssignment_5_1_0() { return cMinAssignment_5_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0_0() { return cMinEIntParserRuleCall_5_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5_1_1() { return cFullStopFullStopKeyword_5_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_5_2() { return cMaxAssignment_5_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_5_2_0() { return cMaxMaxCardinalityParserRuleCall_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
	}

	public class CompositeMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsMutatorParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsMutatorParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Assignment cMinAssignment_5_1_0_0 = (Assignment)cGroup_5_1_0.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_5_1_0_0_0 = (RuleCall)cMinAssignment_5_1_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5_1_0_1 = (Keyword)cGroup_5_1_0.eContents().get(1);
		private final Assignment cMaxAssignment_5_1_0_2 = (Assignment)cGroup_5_1_0.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_5_1_0_2_0 = (RuleCall)cMaxAssignment_5_1_0_2.eContents().get(0);
		private final Assignment cFixedAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cFixedEIntParserRuleCall_5_1_1_0 = (RuleCall)cFixedAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//CompositeMutator:
		//	(name=ID "=")? "[" commands+=Mutator commands+=Mutator* "]" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt)
		//	"]")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? "[" commands+=Mutator commands+=Mutator* "]" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//commands+=Mutator
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_2_0() { return cCommandsMutatorParserRuleCall_2_0; }

		//commands+=Mutator*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }

		//Mutator
		public RuleCall getCommandsMutatorParserRuleCall_3_0() { return cCommandsMutatorParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//min=EInt ".." max=MaxCardinality | fixed=EInt
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//min=EInt ".." max=MaxCardinality
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//min=EInt
		public Assignment getMinAssignment_5_1_0_0() { return cMinAssignment_5_1_0_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0_0_0() { return cMinEIntParserRuleCall_5_1_0_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5_1_0_1() { return cFullStopFullStopKeyword_5_1_0_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_5_1_0_2() { return cMaxAssignment_5_1_0_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_5_1_0_2_0() { return cMaxMaxCardinalityParserRuleCall_5_1_0_2_0; }

		//fixed=EInt
		public Assignment getFixedAssignment_5_1_1() { return cFixedAssignment_5_1_1; }

		//EInt
		public RuleCall getFixedEIntParserRuleCall_5_1_1_0() { return cFixedEIntParserRuleCall_5_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}

	public class CloneObjectMutatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CloneObjectMutator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cCloneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cContentsContentsKeyword_2_0 = (Keyword)cContentsAssignment_2.eContents().get(0);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainerObSelectionStrategyParserRuleCall_4_1_0 = (RuleCall)cContainerAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Assignment cAttributesAssignment_5_2_0 = (Assignment)cAlternatives_5_2.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_5_2_0_0 = (RuleCall)cAttributesAssignment_5_2_0.eContents().get(0);
		private final Assignment cReferencesAssignment_5_2_1 = (Assignment)cAlternatives_5_2.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_5_2_1_0 = (RuleCall)cReferencesAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Alternatives cAlternatives_5_3_1 = (Alternatives)cGroup_5_3.eContents().get(1);
		private final Assignment cAttributesAssignment_5_3_1_0 = (Assignment)cAlternatives_5_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeSetParserRuleCall_5_3_1_0_0 = (RuleCall)cAttributesAssignment_5_3_1_0.eContents().get(0);
		private final Assignment cReferencesAssignment_5_3_1_1 = (Assignment)cAlternatives_5_3_1.eContents().get(1);
		private final RuleCall cReferencesReferenceSetParserRuleCall_5_3_1_1_0 = (RuleCall)cReferencesAssignment_5_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cMinEIntParserRuleCall_6_1_0_0 = (RuleCall)cMinAssignment_6_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cMaxAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMaxMaxCardinalityParserRuleCall_6_2_0 = (RuleCall)cMaxAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//CloneObjectMutator:
		//	(name=ID "=")? "clone" contents?="contents"? object=ObSelectionStrategy ("in" container=ObSelectionStrategy)? ("with"
		//	"{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
		//	references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? "clone" contents?="contents"? object=ObSelectionStrategy ("in" container=ObSelectionStrategy)? ("with"
		//"{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
		//references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//"clone"
		public Keyword getCloneKeyword_1() { return cCloneKeyword_1; }

		//contents?="contents"?
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }

		//"contents"
		public Keyword getContentsContentsKeyword_2_0() { return cContentsContentsKeyword_2_0; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_3_0() { return cObjectObSelectionStrategyParserRuleCall_3_0; }

		//("in" container=ObSelectionStrategy)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//container=ObSelectionStrategy
		public Assignment getContainerAssignment_4_1() { return cContainerAssignment_4_1; }

		//ObSelectionStrategy
		public RuleCall getContainerObSelectionStrategyParserRuleCall_4_1_0() { return cContainerObSelectionStrategyParserRuleCall_4_1_0; }

		//("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
		//references+=ReferenceSet))* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"with"
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//(attributes+=AttributeSet | references+=ReferenceSet)?
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_5_2_0() { return cAttributesAssignment_5_2_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_5_2_0_0() { return cAttributesAttributeSetParserRuleCall_5_2_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_5_2_1() { return cReferencesAssignment_5_2_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_5_2_1_0() { return cReferencesReferenceSetParserRuleCall_5_2_1_0; }

		//("," (attributes+=AttributeSet | references+=ReferenceSet))*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//attributes+=AttributeSet | references+=ReferenceSet
		public Alternatives getAlternatives_5_3_1() { return cAlternatives_5_3_1; }

		//attributes+=AttributeSet
		public Assignment getAttributesAssignment_5_3_1_0() { return cAttributesAssignment_5_3_1_0; }

		//AttributeSet
		public RuleCall getAttributesAttributeSetParserRuleCall_5_3_1_0_0() { return cAttributesAttributeSetParserRuleCall_5_3_1_0_0; }

		//references+=ReferenceSet
		public Assignment getReferencesAssignment_5_3_1_1() { return cReferencesAssignment_5_3_1_1; }

		//ReferenceSet
		public RuleCall getReferencesReferenceSetParserRuleCall_5_3_1_1_0() { return cReferencesReferenceSetParserRuleCall_5_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("[" (min=EInt "..")? max=MaxCardinality "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//(min=EInt "..")?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//min=EInt
		public Assignment getMinAssignment_6_1_0() { return cMinAssignment_6_1_0; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_6_1_0_0() { return cMinEIntParserRuleCall_6_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_6_1_1() { return cFullStopFullStopKeyword_6_1_1; }

		//max=MaxCardinality
		public Assignment getMaxAssignment_6_2() { return cMaxAssignment_6_2; }

		//MaxCardinality
		public RuleCall getMaxMaxCardinalityParserRuleCall_6_2_0() { return cMaxMaxCardinalityParserRuleCall_6_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
	}

	public class AttributeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeScalarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeUnsetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeSwapParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeCopyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttributeReverseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAttributeOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AttributeSet:
		//	AttributeScalar | AttributeUnset | AttributeSwap | AttributeCopy | AttributeReverse | AttributeOperation;
		@Override public ParserRule getRule() { return rule; }

		//AttributeScalar | AttributeUnset | AttributeSwap | AttributeCopy | AttributeReverse | AttributeOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeScalar
		public RuleCall getAttributeScalarParserRuleCall_0() { return cAttributeScalarParserRuleCall_0; }

		//AttributeUnset
		public RuleCall getAttributeUnsetParserRuleCall_1() { return cAttributeUnsetParserRuleCall_1; }

		//AttributeSwap
		public RuleCall getAttributeSwapParserRuleCall_2() { return cAttributeSwapParserRuleCall_2; }

		//AttributeCopy
		public RuleCall getAttributeCopyParserRuleCall_3() { return cAttributeCopyParserRuleCall_3; }

		//AttributeReverse
		public RuleCall getAttributeReverseParserRuleCall_4() { return cAttributeReverseParserRuleCall_4; }

		//AttributeOperation
		public RuleCall getAttributeOperationParserRuleCall_5() { return cAttributeOperationParserRuleCall_5; }
	}

	public class AttributeScalarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeScalar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeEAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAttributeTypeParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//AttributeScalar:
		//	attribute+=[ecore::EAttribute] value=AttributeType;
		@Override public ParserRule getRule() { return rule; }

		//attribute+=[ecore::EAttribute] value=AttributeType
		public Group getGroup() { return cGroup; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0_0() { return cAttributeEAttributeCrossReference_0_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_0_1; }

		//value=AttributeType
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//AttributeType
		public RuleCall getValueAttributeTypeParserRuleCall_1_0() { return cValueAttributeTypeParserRuleCall_1_0; }
	}

	public class AttributeUnsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeUnset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeEAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeEAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeUnset:
		//	"unset" "(" attribute+=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//"unset" "(" attribute+=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//"unset"
		public Keyword getUnsetKeyword_0() { return cUnsetKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_2_0() { return cAttributeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_2_0_1() { return cAttributeEAttributeIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeSwapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeSwap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeEAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeEAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cObjectAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_4_0_0 = (RuleCall)cObjectAssignment_4_0.eContents().get(0);
		private final Keyword cFullStopKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAttributeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAttributeEAttributeCrossReference_5_0 = (CrossReference)cAttributeAssignment_5.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_5_0_1 = (RuleCall)cAttributeEAttributeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AttributeSwap:
		//	"swap" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//"swap" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//"swap"
		public Keyword getSwapKeyword_0() { return cSwapKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_2_0() { return cAttributeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_2_0_1() { return cAttributeEAttributeIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//(object=ObSelectionStrategy ".")?
		public Group getGroup_4() { return cGroup_4; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_4_0() { return cObjectAssignment_4_0; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_4_0_0() { return cObjectObSelectionStrategyParserRuleCall_4_0_0; }

		//"."
		public Keyword getFullStopKeyword_4_1() { return cFullStopKeyword_4_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_5() { return cAttributeAssignment_5; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_5_0() { return cAttributeEAttributeCrossReference_5_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_5_0_1() { return cAttributeEAttributeIDTerminalRuleCall_5_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AttributeCopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeCopy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeEAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeEAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cObjectAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_4_0_0 = (RuleCall)cObjectAssignment_4_0.eContents().get(0);
		private final Keyword cFullStopKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAttributeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAttributeEAttributeCrossReference_5_0 = (CrossReference)cAttributeAssignment_5.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_5_0_1 = (RuleCall)cAttributeEAttributeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AttributeCopy:
		//	"copy" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//"copy" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_2_0() { return cAttributeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_2_0_1() { return cAttributeEAttributeIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//(object=ObSelectionStrategy ".")?
		public Group getGroup_4() { return cGroup_4; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_4_0() { return cObjectAssignment_4_0; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_4_0_0() { return cObjectObSelectionStrategyParserRuleCall_4_0_0; }

		//"."
		public Keyword getFullStopKeyword_4_1() { return cFullStopKeyword_4_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_5() { return cAttributeAssignment_5; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_5_0() { return cAttributeEAttributeCrossReference_5_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_5_0_1() { return cAttributeEAttributeIDTerminalRuleCall_5_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AttributeReverseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeReverse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeEAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeEAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeReverse:
		//	"reverse" "(" attribute+=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//"reverse" "(" attribute+=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//"reverse"
		public Keyword getReverseKeyword_0() { return cReverseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_2_0() { return cAttributeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_2_0_1() { return cAttributeEAttributeIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeEAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorArithmeticOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAttributeEvaluationTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttributeOperation:
		//	attribute+=[ecore::EAttribute] operator=ArithmeticOperator value=AttributeEvaluationType;
		@Override public ParserRule getRule() { return rule; }

		//attribute+=[ecore::EAttribute] operator=ArithmeticOperator value=AttributeEvaluationType
		public Group getGroup() { return cGroup; }

		//attribute+=[ecore::EAttribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0_0() { return cAttributeEAttributeCrossReference_0_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_0_1; }

		//operator=ArithmeticOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ArithmeticOperator
		public RuleCall getOperatorArithmeticOperatorEnumRuleCall_1_0() { return cOperatorArithmeticOperatorEnumRuleCall_1_0; }

		//value=AttributeEvaluationType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AttributeEvaluationType
		public RuleCall getValueAttributeEvaluationTypeParserRuleCall_2_0() { return cValueAttributeEvaluationTypeParserRuleCall_2_0; }
	}

	public class ReferenceSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceInitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceSwapParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceAttParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReferenceSet:
		//	ReferenceInit | ReferenceSwap | ReferenceAtt;
		@Override public ParserRule getRule() { return rule; }

		//ReferenceInit | ReferenceSwap | ReferenceAtt
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReferenceInit
		public RuleCall getReferenceInitParserRuleCall_0() { return cReferenceInitParserRuleCall_0; }

		//ReferenceSwap
		public RuleCall getReferenceSwapParserRuleCall_1() { return cReferenceSwapParserRuleCall_1; }

		//ReferenceAtt
		public RuleCall getReferenceAttParserRuleCall_2() { return cReferenceAttParserRuleCall_2; }
	}

	public class ReferenceInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceEReferenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceEReferenceCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		
		//ReferenceInit:
		//	reference+=[ecore::EReference] "=" object=ObSelectionStrategy;
		@Override public ParserRule getRule() { return rule; }

		//reference+=[ecore::EReference] "=" object=ObSelectionStrategy
		public Group getGroup() { return cGroup; }

		//reference+=[ecore::EReference]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_0_0() { return cReferenceEReferenceCrossReference_0_0; }

		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_0_0_1() { return cReferenceEReferenceIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_2_0() { return cObjectObSelectionStrategyParserRuleCall_2_0; }
	}

	public class ReferenceSwapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceSwap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwaprefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceEReferenceCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cObjectAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_4_0_0 = (RuleCall)cObjectAssignment_4_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cReferenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cReferenceEReferenceCrossReference_5_0 = (CrossReference)cReferenceAssignment_5.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_5_0_1 = (RuleCall)cReferenceEReferenceCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReferenceSwap:
		//	"swapref" "(" reference+=[ecore::EReference] "," (object=ObSelectionStrategy "->")? reference+=[ecore::EReference]
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//"swapref" "(" reference+=[ecore::EReference] "," (object=ObSelectionStrategy "->")? reference+=[ecore::EReference] ")"
		public Group getGroup() { return cGroup; }

		//"swapref"
		public Keyword getSwaprefKeyword_0() { return cSwaprefKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//reference+=[ecore::EReference]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_2_0() { return cReferenceEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_2_0_1() { return cReferenceEReferenceIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//(object=ObSelectionStrategy "->")?
		public Group getGroup_4() { return cGroup_4; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_4_0() { return cObjectAssignment_4_0; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_4_0_0() { return cObjectObSelectionStrategyParserRuleCall_4_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_1() { return cHyphenMinusGreaterThanSignKeyword_4_1; }

		//reference+=[ecore::EReference]
		public Assignment getReferenceAssignment_5() { return cReferenceAssignment_5; }

		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_5_0() { return cReferenceEReferenceCrossReference_5_0; }

		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_5_0_1() { return cReferenceEReferenceIDTerminalRuleCall_5_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ReferenceAttElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceAtt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceEReferenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceEReferenceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeEAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeEAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAttributeTypeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ReferenceAtt:
		//	reference+=[ecore::EReference] "." attribute=[ecore::EAttribute] value=AttributeType;
		@Override public ParserRule getRule() { return rule; }

		//reference+=[ecore::EReference] "." attribute=[ecore::EAttribute] value=AttributeType
		public Group getGroup() { return cGroup; }

		//reference+=[ecore::EReference]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_0_0() { return cReferenceEReferenceCrossReference_0_0; }

		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_0_0_1() { return cReferenceEReferenceIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_2_0() { return cAttributeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_2_0_1() { return cAttributeEAttributeIDTerminalRuleCall_2_0_1; }

		//value=AttributeType
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AttributeType
		public RuleCall getValueAttributeTypeParserRuleCall_3_0() { return cValueAttributeTypeParserRuleCall_3_0; }
	}

	public class RandomTypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomTypeSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomTypeSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefTypeEReferenceCrossReference_3_1_0 = (CrossReference)cRefTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cExpressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//RandomTypeSelection:
		//	{RandomTypeSelection} "one" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
		//	expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{RandomTypeSelection} "one" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{" expression=Expression
		//"}")?
		public Group getGroup() { return cGroup; }

		//{RandomTypeSelection}
		public Action getRandomTypeSelectionAction_0() { return cRandomTypeSelectionAction_0; }

		//"one"
		public Keyword getOneKeyword_1() { return cOneKeyword_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_0_1() { return cTypeEClassIDTerminalRuleCall_2_0_1; }

		//("->" refType=[ecore::EReference])?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_3_1() { return cRefTypeAssignment_3_1; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_3_1_0() { return cRefTypeEReferenceCrossReference_3_1_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_3_1_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_2() { return cExpressionAssignment_4_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_2_0() { return cExpressionExpressionParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class SpecificObjectSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificObjectSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificObjectSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cObjSelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjSelObjectEmitterCrossReference_1_0 = (CrossReference)cObjSelAssignment_1.eContents().get(0);
		private final RuleCall cObjSelObjectEmitterIDTerminalRuleCall_1_0_1 = (RuleCall)cObjSelObjectEmitterCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefTypeEReferenceCrossReference_2_1_0 = (CrossReference)cRefTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhereKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_3_2_0 = (RuleCall)cExpressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//SpecificObjectSelection:
		//	{SpecificObjectSelection} objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ("where" "{"
		//	expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificObjectSelection} objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ("where" "{" expression=Expression
		//"}")?
		public Group getGroup() { return cGroup; }

		//{SpecificObjectSelection}
		public Action getSpecificObjectSelectionAction_0() { return cSpecificObjectSelectionAction_0; }

		//objSel=[ObjectEmitter]
		public Assignment getObjSelAssignment_1() { return cObjSelAssignment_1; }

		//[ObjectEmitter]
		public CrossReference getObjSelObjectEmitterCrossReference_1_0() { return cObjSelObjectEmitterCrossReference_1_0; }

		//ID
		public RuleCall getObjSelObjectEmitterIDTerminalRuleCall_1_0_1() { return cObjSelObjectEmitterIDTerminalRuleCall_1_0_1; }

		//("->" refType=[ecore::EReference])?
		public Group getGroup_2() { return cGroup_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_2_1() { return cRefTypeAssignment_2_1; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_2_1_0() { return cRefTypeEReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_2_1_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_2_1_0_1; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"where"
		public Keyword getWhereKeyword_3_0() { return cWhereKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_2() { return cExpressionAssignment_3_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_2_0() { return cExpressionExpressionParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class SpecificClosureSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificClosureSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificClosureSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClosureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjSelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjSelObjectEmitterCrossReference_3_0 = (CrossReference)cObjSelAssignment_3.eContents().get(0);
		private final RuleCall cObjSelObjectEmitterIDTerminalRuleCall_3_0_1 = (RuleCall)cObjSelObjectEmitterCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefTypeEReferenceCrossReference_4_1_0 = (CrossReference)cRefTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExpressionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_6_2_0 = (RuleCall)cExpressionAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//SpecificClosureSelection:
		//	{SpecificClosureSelection} "closure" "(" objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ")" ("where" "{"
		//	expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificClosureSelection} "closure" "(" objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ")" ("where" "{"
		//expression=Expression "}")?
		public Group getGroup() { return cGroup; }

		//{SpecificClosureSelection}
		public Action getSpecificClosureSelectionAction_0() { return cSpecificClosureSelectionAction_0; }

		//"closure"
		public Keyword getClosureKeyword_1() { return cClosureKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//objSel=[ObjectEmitter]
		public Assignment getObjSelAssignment_3() { return cObjSelAssignment_3; }

		//[ObjectEmitter]
		public CrossReference getObjSelObjectEmitterCrossReference_3_0() { return cObjSelObjectEmitterCrossReference_3_0; }

		//ID
		public RuleCall getObjSelObjectEmitterIDTerminalRuleCall_3_0_1() { return cObjSelObjectEmitterIDTerminalRuleCall_3_0_1; }

		//("->" refType=[ecore::EReference])?
		public Group getGroup_4() { return cGroup_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_4_1() { return cRefTypeAssignment_4_1; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_4_1_0() { return cRefTypeEReferenceCrossReference_4_1_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_4_1_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_4_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_6_2() { return cExpressionAssignment_6_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_2_0() { return cExpressionExpressionParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}

	public class CompleteTypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompleteTypeSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompleteTypeSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefTypeEReferenceCrossReference_3_1_0 = (CrossReference)cRefTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cExpressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//CompleteTypeSelection:
		//	{CompleteTypeSelection} "all" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
		//	expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{CompleteTypeSelection} "all" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
		//expression=Expression "}")?
		public Group getGroup() { return cGroup; }

		//{CompleteTypeSelection}
		public Action getCompleteTypeSelectionAction_0() { return cCompleteTypeSelectionAction_0; }

		//"all"
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_0_1() { return cTypeEClassIDTerminalRuleCall_2_0_1; }

		//("->" refType=[ecore::EReference])?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_3_1() { return cRefTypeAssignment_3_1; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_3_1_0() { return cRefTypeEReferenceCrossReference_3_1_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_3_1_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_2() { return cExpressionAssignment_4_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_2_0() { return cExpressionExpressionParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class OtherTypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherTypeSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOtherTypeSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOtherKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefTypeEReferenceCrossReference_3_1_0 = (CrossReference)cRefTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefTypeEReferenceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cExpressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//OtherTypeSelection:
		//	{OtherTypeSelection} "other" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
		//	expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{OtherTypeSelection} "other" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{" expression=Expression
		//"}")?
		public Group getGroup() { return cGroup; }

		//{OtherTypeSelection}
		public Action getOtherTypeSelectionAction_0() { return cOtherTypeSelectionAction_0; }

		//"other"
		public Keyword getOtherKeyword_1() { return cOtherKeyword_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_0_1() { return cTypeEClassIDTerminalRuleCall_2_0_1; }

		//("->" refType=[ecore::EReference])?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//refType=[ecore::EReference]
		public Assignment getRefTypeAssignment_3_1() { return cRefTypeAssignment_3_1; }

		//[ecore::EReference]
		public CrossReference getRefTypeEReferenceCrossReference_3_1_0() { return cRefTypeEReferenceCrossReference_3_1_0; }

		//ID
		public RuleCall getRefTypeEReferenceIDTerminalRuleCall_3_1_0_1() { return cRefTypeEReferenceIDTerminalRuleCall_3_1_0_1; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_2() { return cExpressionAssignment_4_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_2_0() { return cExpressionExpressionParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class EachTypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EachTypeSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEachTypeSelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhereKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_3_2_0 = (RuleCall)cExpressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EachTypeSelection:
		//	{EachTypeSelection} "each" type=[ecore::EClass] ("where" "{" expression=Expression "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{EachTypeSelection} "each" type=[ecore::EClass] ("where" "{" expression=Expression "}")?
		public Group getGroup() { return cGroup; }

		//{EachTypeSelection}
		public Action getEachTypeSelectionAction_0() { return cEachTypeSelectionAction_0; }

		//"each"
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_0_1() { return cTypeEClassIDTerminalRuleCall_2_0_1; }

		//("where" "{" expression=Expression "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"where"
		public Keyword getWhereKeyword_3_0() { return cWhereKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_2() { return cExpressionAssignment_3_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_2_0() { return cExpressionExpressionParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanType:
		//	SpecificBooleanType | RandomBooleanType;
		@Override public ParserRule getRule() { return rule; }

		//SpecificBooleanType | RandomBooleanType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificBooleanType
		public RuleCall getSpecificBooleanTypeParserRuleCall_0() { return cSpecificBooleanTypeParserRuleCall_0; }

		//RandomBooleanType
		public RuleCall getRandomBooleanTypeParserRuleCall_1() { return cRandomBooleanTypeParserRuleCall_1; }
	}

	public class RandomBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cRandomBooleanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RandomBooleanType:
		//	{RandomBooleanType} operator=Operator "random-boolean";
		@Override public ParserRule getRule() { return rule; }

		//{RandomBooleanType} operator=Operator "random-boolean"
		public Group getGroup() { return cGroup; }

		//{RandomBooleanType}
		public Action getRandomBooleanTypeAction_0() { return cRandomBooleanTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"random-boolean"
		public Keyword getRandomBooleanKeyword_2() { return cRandomBooleanKeyword_2; }
	}

	public class SpecificBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEBooleanParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SpecificBooleanType:
		//	{SpecificBooleanType} operator=Operator value=EBoolean;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificBooleanType} operator=Operator value=EBoolean
		public Group getGroup() { return cGroup; }

		//{SpecificBooleanType}
		public Action getSpecificBooleanTypeAction_0() { return cSpecificBooleanTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//value=EBoolean
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_2_0() { return cValueEBooleanParserRuleCall_2_0; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpperStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLowerStringTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCatStartStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCatEndStringTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReplaceStringTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//StringType:
		//	SpecificStringType | RandomStringType | UpperStringType | LowerStringType | CatStartStringType | CatEndStringType |
		//	ReplaceStringType;
		@Override public ParserRule getRule() { return rule; }

		//SpecificStringType | RandomStringType | UpperStringType | LowerStringType | CatStartStringType | CatEndStringType |
		//ReplaceStringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificStringType
		public RuleCall getSpecificStringTypeParserRuleCall_0() { return cSpecificStringTypeParserRuleCall_0; }

		//RandomStringType
		public RuleCall getRandomStringTypeParserRuleCall_1() { return cRandomStringTypeParserRuleCall_1; }

		//UpperStringType
		public RuleCall getUpperStringTypeParserRuleCall_2() { return cUpperStringTypeParserRuleCall_2; }

		//LowerStringType
		public RuleCall getLowerStringTypeParserRuleCall_3() { return cLowerStringTypeParserRuleCall_3; }

		//CatStartStringType
		public RuleCall getCatStartStringTypeParserRuleCall_4() { return cCatStartStringTypeParserRuleCall_4; }

		//CatEndStringType
		public RuleCall getCatEndStringTypeParserRuleCall_5() { return cCatEndStringTypeParserRuleCall_5; }

		//ReplaceStringType
		public RuleCall getReplaceStringTypeParserRuleCall_6() { return cReplaceStringTypeParserRuleCall_6; }
	}

	public class RandomStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cRandomStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinEIntParserRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxEIntParserRuleCall_6_0 = (RuleCall)cMaxAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RandomStringType:
		//	{RandomStringType} operator=Operator "random-string" "(" min=EInt "," max=EInt ")";
		@Override public ParserRule getRule() { return rule; }

		//{RandomStringType} operator=Operator "random-string" "(" min=EInt "," max=EInt ")"
		public Group getGroup() { return cGroup; }

		//{RandomStringType}
		public Action getRandomStringTypeAction_0() { return cRandomStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"random-string"
		public Keyword getRandomStringKeyword_2() { return cRandomStringKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//min=EInt
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_4_0() { return cMinEIntParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//max=EInt
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_0() { return cMaxEIntParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class SpecificStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SpecificStringType:
		//	{SpecificStringType} operator=Operator value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificStringType} operator=Operator value=STRING
		public Group getGroup() { return cGroup; }

		//{SpecificStringType}
		public Action getSpecificStringTypeAction_0() { return cSpecificStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class UpperStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpperStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpperStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cUpperKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UpperStringType:
		//	{UpperStringType} operator=Operator "upper";
		@Override public ParserRule getRule() { return rule; }

		//{UpperStringType} operator=Operator "upper"
		public Group getGroup() { return cGroup; }

		//{UpperStringType}
		public Action getUpperStringTypeAction_0() { return cUpperStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"upper"
		public Keyword getUpperKeyword_2() { return cUpperKeyword_2; }
	}

	public class CatStartStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatStartStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCatStartStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cCatstartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEStringParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CatStartStringType:
		//	{CatStartStringType} operator=Operator "catstart" "(" value=EString ")";
		@Override public ParserRule getRule() { return rule; }

		//{CatStartStringType} operator=Operator "catstart" "(" value=EString ")"
		public Group getGroup() { return cGroup; }

		//{CatStartStringType}
		public Action getCatStartStringTypeAction_0() { return cCatStartStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"catstart"
		public Keyword getCatstartKeyword_2() { return cCatstartKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//value=EString
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EString
		public RuleCall getValueEStringParserRuleCall_4_0() { return cValueEStringParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CatEndStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatEndStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCatEndStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cCatendKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEStringParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CatEndStringType:
		//	{CatEndStringType} operator=Operator "catend" "(" value=EString ")";
		@Override public ParserRule getRule() { return rule; }

		//{CatEndStringType} operator=Operator "catend" "(" value=EString ")"
		public Group getGroup() { return cGroup; }

		//{CatEndStringType}
		public Action getCatEndStringTypeAction_0() { return cCatEndStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"catend"
		public Keyword getCatendKeyword_2() { return cCatendKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//value=EString
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EString
		public RuleCall getValueEStringParserRuleCall_4_0() { return cValueEStringParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ListStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ListStringType:
		//	{ListStringType} operator=Operator "[" value+=EString ("," value+=EString)* "]";
		@Override public ParserRule getRule() { return rule; }

		//{ListStringType} operator=Operator "[" value+=EString ("," value+=EString)* "]"
		public Group getGroup() { return cGroup; }

		//{ListStringType}
		public Action getListStringTypeAction_0() { return cListStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//value+=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }

		//("," value+=EString)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=EString
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_4_1_0() { return cValueEStringParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class LowerStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LowerStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLowerStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cLowerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LowerStringType:
		//	{LowerStringType} operator=Operator "lower";
		@Override public ParserRule getRule() { return rule; }

		//{LowerStringType} operator=Operator "lower"
		public Group getGroup() { return cGroup; }

		//{LowerStringType}
		public Action getLowerStringTypeAction_0() { return cLowerStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"lower"
		public Keyword getLowerKeyword_2() { return cLowerKeyword_2; }
	}

	public class ReplaceStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReplaceStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cReplaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOldstringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOldstringEStringParserRuleCall_4_0 = (RuleCall)cOldstringAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNewstringAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNewstringEStringParserRuleCall_6_0 = (RuleCall)cNewstringAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ReplaceStringType:
		//	{ReplaceStringType} operator=Operator "replace" "(" oldstring=EString "," newstring=EString ")";
		@Override public ParserRule getRule() { return rule; }

		//{ReplaceStringType} operator=Operator "replace" "(" oldstring=EString "," newstring=EString ")"
		public Group getGroup() { return cGroup; }

		//{ReplaceStringType}
		public Action getReplaceStringTypeAction_0() { return cReplaceStringTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"replace"
		public Keyword getReplaceKeyword_2() { return cReplaceKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//oldstring=EString
		public Assignment getOldstringAssignment_4() { return cOldstringAssignment_4; }

		//EString
		public RuleCall getOldstringEStringParserRuleCall_4_0() { return cOldstringEStringParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//newstring=EString
		public Assignment getNewstringAssignment_6() { return cNewstringAssignment_6; }

		//EString
		public RuleCall getNewstringEStringParserRuleCall_6_0() { return cNewstringEStringParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificDoubleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomDoubleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DoubleType:
		//	SpecificDoubleType | RandomDoubleType;
		@Override public ParserRule getRule() { return rule; }

		//SpecificDoubleType | RandomDoubleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificDoubleType
		public RuleCall getSpecificDoubleTypeParserRuleCall_0() { return cSpecificDoubleTypeParserRuleCall_0; }

		//RandomDoubleType
		public RuleCall getRandomDoubleTypeParserRuleCall_1() { return cRandomDoubleTypeParserRuleCall_1; }
	}

	public class RandomDoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomDoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cRandomDoubleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinEDoubleParserRuleCall_3_1_0 = (RuleCall)cMinAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMaxAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMaxEDoubleParserRuleCall_3_3_0 = (RuleCall)cMaxAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//RandomDoubleType:
		//	{RandomDoubleType} operator=Operator "random-double" ("(" min=EDouble "," max=EDouble ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{RandomDoubleType} operator=Operator "random-double" ("(" min=EDouble "," max=EDouble ")")?
		public Group getGroup() { return cGroup; }

		//{RandomDoubleType}
		public Action getRandomDoubleTypeAction_0() { return cRandomDoubleTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"random-double"
		public Keyword getRandomDoubleKeyword_2() { return cRandomDoubleKeyword_2; }

		//("(" min=EDouble "," max=EDouble ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//min=EDouble
		public Assignment getMinAssignment_3_1() { return cMinAssignment_3_1; }

		//EDouble
		public RuleCall getMinEDoubleParserRuleCall_3_1_0() { return cMinEDoubleParserRuleCall_3_1_0; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//max=EDouble
		public Assignment getMaxAssignment_3_3() { return cMaxAssignment_3_3; }

		//EDouble
		public RuleCall getMaxEDoubleParserRuleCall_3_3_0() { return cMaxEDoubleParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class SpecificDoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificDoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEDoubleParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SpecificDoubleType:
		//	{SpecificDoubleType} operator=Operator value=EDouble;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificDoubleType} operator=Operator value=EDouble
		public Group getGroup() { return cGroup; }

		//{SpecificDoubleType}
		public Action getSpecificDoubleTypeAction_0() { return cSpecificDoubleTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//value=EDouble
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_2_0() { return cValueEDoubleParserRuleCall_2_0; }
	}

	public class MinValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeEAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeEAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MinValueType:
		//	operator=Operator "min" "(" attribute=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//operator=Operator "min" "(" attribute=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_3_0() { return cAttributeEAttributeCrossReference_3_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_3_0_1() { return cAttributeEAttributeIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MaxValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeEAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeEAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MaxValueType:
		//	operator=Operator "max" "(" attribute=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//operator=Operator "max" "(" attribute=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }

		//"max"
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_3_0() { return cAttributeEAttributeCrossReference_3_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_3_0_1() { return cAttributeEAttributeIDTerminalRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomIntegerTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerType:
		//	SpecificIntegerType | RandomIntegerType;
		@Override public ParserRule getRule() { return rule; }

		//SpecificIntegerType | RandomIntegerType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificIntegerType
		public RuleCall getSpecificIntegerTypeParserRuleCall_0() { return cSpecificIntegerTypeParserRuleCall_0; }

		//RandomIntegerType
		public RuleCall getRandomIntegerTypeParserRuleCall_1() { return cRandomIntegerTypeParserRuleCall_1; }
	}

	public class SpecificIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SpecificIntegerType:
		//	{SpecificIntegerType} operator=Operator value=EInt;
		@Override public ParserRule getRule() { return rule; }

		//{SpecificIntegerType} operator=Operator value=EInt
		public Group getGroup() { return cGroup; }

		//{SpecificIntegerType}
		public Action getSpecificIntegerTypeAction_0() { return cSpecificIntegerTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//value=EInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_2_0() { return cValueEIntParserRuleCall_2_0; }
	}

	public class RandomIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cRandomIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_3_1_0 = (RuleCall)cMinAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMaxAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMaxEIntParserRuleCall_3_3_0 = (RuleCall)cMaxAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//RandomIntegerType:
		//	{RandomIntegerType} operator=Operator "random-int" ("(" min=EInt "," max=EInt ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{RandomIntegerType} operator=Operator "random-int" ("(" min=EInt "," max=EInt ")")?
		public Group getGroup() { return cGroup; }

		//{RandomIntegerType}
		public Action getRandomIntegerTypeAction_0() { return cRandomIntegerTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"random-int"
		public Keyword getRandomIntKeyword_2() { return cRandomIntKeyword_2; }

		//("(" min=EInt "," max=EInt ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//min=EInt
		public Assignment getMinAssignment_3_1() { return cMinAssignment_3_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_3_1_0() { return cMinEIntParserRuleCall_3_1_0; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//max=EInt
		public Assignment getMaxAssignment_3_3() { return cMaxAssignment_3_3; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_3_3_0() { return cMaxEIntParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class RandomTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cRandomKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RandomType:
		//	{RandomType} operator=Operator "random";
		@Override public ParserRule getRule() { return rule; }

		//{RandomType} operator=Operator "random"
		public Group getGroup() { return cGroup; }

		//{RandomType}
		public Action getRandomTypeAction_0() { return cRandomTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"random"
		public Keyword getRandomKeyword_2() { return cRandomKeyword_2; }
	}

	public class RandomDoubleNumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomDoubleNumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cRandomKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinEDoubleParserRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cObjectAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_5_0_0 = (RuleCall)cObjectAssignment_5_0.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMaxEAttributeCrossReference_6_0 = (CrossReference)cMaxAssignment_6.eContents().get(0);
		private final RuleCall cMaxEAttributeIDTerminalRuleCall_6_0_1 = (RuleCall)cMaxEAttributeCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RandomDoubleNumberType:
		//	operator=Operator "random" "(" min=EDouble "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//operator=Operator "random" "(" min=EDouble "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }

		//"random"
		public Keyword getRandomKeyword_1() { return cRandomKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//min=EDouble
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }

		//EDouble
		public RuleCall getMinEDoubleParserRuleCall_3_0() { return cMinEDoubleParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//(object=ObSelectionStrategy ".")?
		public Group getGroup_5() { return cGroup_5; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_5_0() { return cObjectAssignment_5_0; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_5_0_0() { return cObjectObSelectionStrategyParserRuleCall_5_0_0; }

		//"."
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }

		//max=[ecore::EAttribute]
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }

		//[ecore::EAttribute]
		public CrossReference getMaxEAttributeCrossReference_6_0() { return cMaxEAttributeCrossReference_6_0; }

		//ID
		public RuleCall getMaxEAttributeIDTerminalRuleCall_6_0_1() { return cMaxEAttributeIDTerminalRuleCall_6_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class RandomIntegerNumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomIntegerNumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cRandomKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinEIntParserRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cObjectAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cObjectObSelectionStrategyParserRuleCall_5_0_0 = (RuleCall)cObjectAssignment_5_0.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMaxEAttributeCrossReference_6_0 = (CrossReference)cMaxAssignment_6.eContents().get(0);
		private final RuleCall cMaxEAttributeIDTerminalRuleCall_6_0_1 = (RuleCall)cMaxEAttributeCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RandomIntegerNumberType:
		//	operator=Operator "random" "(" min=EInt "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")";
		@Override public ParserRule getRule() { return rule; }

		//operator=Operator "random" "(" min=EInt "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }

		//"random"
		public Keyword getRandomKeyword_1() { return cRandomKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//min=EInt
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_3_0() { return cMinEIntParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//(object=ObSelectionStrategy ".")?
		public Group getGroup_5() { return cGroup_5; }

		//object=ObSelectionStrategy
		public Assignment getObjectAssignment_5_0() { return cObjectAssignment_5_0; }

		//ObSelectionStrategy
		public RuleCall getObjectObSelectionStrategyParserRuleCall_5_0_0() { return cObjectObSelectionStrategyParserRuleCall_5_0_0; }

		//"."
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }

		//max=[ecore::EAttribute]
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }

		//[ecore::EAttribute]
		public CrossReference getMaxEAttributeCrossReference_6_0() { return cMaxEAttributeCrossReference_6_0; }

		//ID
		public RuleCall getMaxEAttributeIDTerminalRuleCall_6_0_1() { return cMaxEAttributeIDTerminalRuleCall_6_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueEObjectCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cValueEObjectCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueEObjectCrossReference_4_1_0 = (CrossReference)cValueAssignment_4_1.eContents().get(0);
		private final RuleCall cValueEObjectIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValueEObjectCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ListType:
		//	{ListType} operator=Operator "{" value+=[ecore::EObject] ("," value+=[ecore::EObject])* "}";
		@Override public ParserRule getRule() { return rule; }

		//{ListType} operator=Operator "{" value+=[ecore::EObject] ("," value+=[ecore::EObject])* "}"
		public Group getGroup() { return cGroup; }

		//{ListType}
		public Action getListTypeAction_0() { return cListTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//value+=[ecore::EObject]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_3_0() { return cValueEObjectCrossReference_3_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_3_0_1() { return cValueEObjectIDTerminalRuleCall_3_0_1; }

		//("," value+=[ecore::EObject])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=[ecore::EObject]
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//[ecore::EObject]
		public CrossReference getValueEObjectCrossReference_4_1_0() { return cValueEObjectCrossReference_4_1_0; }

		//ID
		public RuleCall getValueEObjectIDTerminalRuleCall_4_1_0_1() { return cValueEObjectIDTerminalRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ObjectAttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectAttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAttributeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cObjSelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjSelObjectEmitterCrossReference_2_0 = (CrossReference)cObjSelAssignment_2.eContents().get(0);
		private final RuleCall cObjSelObjectEmitterIDTerminalRuleCall_2_0_1 = (RuleCall)cObjSelObjectEmitterCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAttributeEAttributeCrossReference_4_0 = (CrossReference)cAttributeAssignment_4.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_4_0_1 = (RuleCall)cAttributeEAttributeCrossReference_4_0.eContents().get(1);
		
		//ObjectAttributeType:
		//	{ObjectAttributeType} operator=Operator objSel=[ObjectEmitter] "." attribute=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }

		//{ObjectAttributeType} operator=Operator objSel=[ObjectEmitter] "." attribute=[ecore::EAttribute]
		public Group getGroup() { return cGroup; }

		//{ObjectAttributeType}
		public Action getObjectAttributeTypeAction_0() { return cObjectAttributeTypeAction_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//objSel=[ObjectEmitter]
		public Assignment getObjSelAssignment_2() { return cObjSelAssignment_2; }

		//[ObjectEmitter]
		public CrossReference getObjSelObjectEmitterCrossReference_2_0() { return cObjSelObjectEmitterCrossReference_2_0; }

		//ID
		public RuleCall getObjSelObjectEmitterIDTerminalRuleCall_2_0_1() { return cObjSelObjectEmitterIDTerminalRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_4_0() { return cAttributeEAttributeCrossReference_4_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_4_0_1() { return cAttributeEAttributeIDTerminalRuleCall_4_0_1; }
	}

	public class MaxCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MaxCardinality returns ecore::EIntegerObject:
		//	EInt | "*";
		@Override public ParserRule getRule() { return rule; }

		//EInt | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EInt
		public RuleCall getEIntParserRuleCall_0() { return cEIntParserRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	
	
	public class LogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOperator:
		//	and | or;
		public EnumRule getRule() { return rule; }

		//and | or
		public Alternatives getAlternatives() { return cAlternatives; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsSignKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDifferentLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cDifferentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInInKeyword_2_0 = (Keyword)cInEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Operator:
		//	equals="=" | different="<>" | in;
		public EnumRule getRule() { return rule; }

		//equals="=" | different="<>" | in
		public Alternatives getAlternatives() { return cAlternatives; }

		//equals="="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEqualsEqualsSignKeyword_0_0() { return cEqualsEqualsSignKeyword_0_0; }

		//different="<>"
		public EnumLiteralDeclaration getDifferentEnumLiteralDeclaration_1() { return cDifferentEnumLiteralDeclaration_1; }

		//"<>"
		public Keyword getDifferentLessThanSignGreaterThanSignKeyword_1_0() { return cDifferentLessThanSignGreaterThanSignKeyword_1_0; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_2() { return cInEnumLiteralDeclaration_2; }

		//"in"
		public Keyword getInInKeyword_2_0() { return cInInKeyword_2_0; }
	}

	public class ArithmeticOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMultiplyAsteriskKeyword_2_0 = (Keyword)cMultiplyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivideSolidusKeyword_3_0 = (Keyword)cDivideEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cModuleEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cModulePercentSignKeyword_4_0 = (Keyword)cModuleEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ArithmeticOperator:
		//	add="+" | subtract="-" | multiply="*" | divide="/" | module="%";
		public EnumRule getRule() { return rule; }

		//add="+" | subtract="-" | multiply="*" | divide="/" | module="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_1() { return cSubtractEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }

		//multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_2() { return cMultiplyEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_2_0() { return cMultiplyAsteriskKeyword_2_0; }

		//divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_3() { return cDivideEnumLiteralDeclaration_3; }

		//"/"
		public Keyword getDivideSolidusKeyword_3_0() { return cDivideSolidusKeyword_3_0; }

		//module="%"
		public EnumLiteralDeclaration getModuleEnumLiteralDeclaration_4() { return cModuleEnumLiteralDeclaration_4; }

		//"%"
		public Keyword getModulePercentSignKeyword_4_0() { return cModulePercentSignKeyword_4_0; }
	}

	public class RepeatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Repeat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cYesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cYesYesKeyword_0_0 = (Keyword)cYesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoNoKeyword_1_0 = (Keyword)cNoEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Repeat:
		//	yes | no;
		public EnumRule getRule() { return rule; }

		//yes | no
		public Alternatives getAlternatives() { return cAlternatives; }

		//yes
		public EnumLiteralDeclaration getYesEnumLiteralDeclaration_0() { return cYesEnumLiteralDeclaration_0; }

		//"yes"
		public Keyword getYesYesKeyword_0_0() { return cYesYesKeyword_0_0; }

		//no
		public EnumLiteralDeclaration getNoEnumLiteralDeclaration_1() { return cNoEnumLiteralDeclaration_1; }

		//"no"
		public Keyword getNoNoKeyword_1_0() { return cNoNoKeyword_1_0; }
	}
	
	private final MutatorEnvironmentElements pMutatorEnvironment;
	private final DefinitionElements pDefinition;
	private final LibraryElements pLibrary;
	private final ProgramElements pProgram;
	private final SourceElements pSource;
	private final BlockElements pBlock;
	private final ConstraintElements pConstraint;
	private final MutatorElements pMutator;
	private final ObSelectionStrategyElements pObSelectionStrategy;
	private final RandomSelectionElements pRandomSelection;
	private final SpecificSelectionElements pSpecificSelection;
	private final CompleteSelectionElements pCompleteSelection;
	private final OtherSelectionElements pOtherSelection;
	private final SubsetSelectionElements pSubsetSelection;
	private final AttributeEvaluationTypeElements pAttributeEvaluationType;
	private final AttributeTypeElements pAttributeType;
	private final NumberTypeElements pNumberType;
	private final RandomNumberTypeElements pRandomNumberType;
	private final LoadElements pLoad;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	private final LogicOperatorElements unknownRuleLogicOperator;
	private final OperatorElements unknownRuleOperator;
	private final ArithmeticOperatorElements unknownRuleArithmeticOperator;
	private final RepeatElements unknownRuleRepeat;
	private final BinaryOperatorElements pBinaryOperator;
	private final AttributeEvaluationElements pAttributeEvaluation;
	private final ReferenceEvaluationElements pReferenceEvaluation;
	private final EvaluationElements pEvaluation;
	private final ExpressionElements pExpression;
	private final RemoveObjectMutatorElements pRemoveObjectMutator;
	private final RemoveReferenceMutatorElements pRemoveReferenceMutator;
	private final RemoveRandomReferenceMutatorElements pRemoveRandomReferenceMutator;
	private final RemoveSpecificReferenceMutatorElements pRemoveSpecificReferenceMutator;
	private final RemoveCompleteReferenceMutatorElements pRemoveCompleteReferenceMutator;
	private final CreateObjectMutatorElements pCreateObjectMutator;
	private final SelectObjectMutatorElements pSelectObjectMutator;
	private final ModifyInformationMutatorElements pModifyInformationMutator;
	private final CreateReferenceMutatorElements pCreateReferenceMutator;
	private final ModifySourceReferenceMutatorElements pModifySourceReferenceMutator;
	private final ModifyTargetReferenceMutatorElements pModifyTargetReferenceMutator;
	private final CompositeMutatorElements pCompositeMutator;
	private final CloneObjectMutatorElements pCloneObjectMutator;
	private final AttributeSetElements pAttributeSet;
	private final AttributeScalarElements pAttributeScalar;
	private final AttributeUnsetElements pAttributeUnset;
	private final AttributeSwapElements pAttributeSwap;
	private final AttributeCopyElements pAttributeCopy;
	private final AttributeReverseElements pAttributeReverse;
	private final AttributeOperationElements pAttributeOperation;
	private final ReferenceSetElements pReferenceSet;
	private final ReferenceInitElements pReferenceInit;
	private final ReferenceSwapElements pReferenceSwap;
	private final ReferenceAttElements pReferenceAtt;
	private final RandomTypeSelectionElements pRandomTypeSelection;
	private final SpecificObjectSelectionElements pSpecificObjectSelection;
	private final SpecificClosureSelectionElements pSpecificClosureSelection;
	private final CompleteTypeSelectionElements pCompleteTypeSelection;
	private final OtherTypeSelectionElements pOtherTypeSelection;
	private final EachTypeSelectionElements pEachTypeSelection;
	private final BooleanTypeElements pBooleanType;
	private final RandomBooleanTypeElements pRandomBooleanType;
	private final SpecificBooleanTypeElements pSpecificBooleanType;
	private final StringTypeElements pStringType;
	private final RandomStringTypeElements pRandomStringType;
	private final SpecificStringTypeElements pSpecificStringType;
	private final UpperStringTypeElements pUpperStringType;
	private final CatStartStringTypeElements pCatStartStringType;
	private final CatEndStringTypeElements pCatEndStringType;
	private final ListStringTypeElements pListStringType;
	private final LowerStringTypeElements pLowerStringType;
	private final ReplaceStringTypeElements pReplaceStringType;
	private final DoubleTypeElements pDoubleType;
	private final RandomDoubleTypeElements pRandomDoubleType;
	private final SpecificDoubleTypeElements pSpecificDoubleType;
	private final MinValueTypeElements pMinValueType;
	private final MaxValueTypeElements pMaxValueType;
	private final IntegerTypeElements pIntegerType;
	private final SpecificIntegerTypeElements pSpecificIntegerType;
	private final RandomIntegerTypeElements pRandomIntegerType;
	private final RandomTypeElements pRandomType;
	private final RandomDoubleNumberTypeElements pRandomDoubleNumberType;
	private final RandomIntegerNumberTypeElements pRandomIntegerNumberType;
	private final ListTypeElements pListType;
	private final ObjectAttributeTypeElements pObjectAttributeType;
	private final MaxCardinalityElements pMaxCardinality;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMutatorEnvironment = new MutatorEnvironmentElements();
		this.pDefinition = new DefinitionElements();
		this.pLibrary = new LibraryElements();
		this.pProgram = new ProgramElements();
		this.pSource = new SourceElements();
		this.pBlock = new BlockElements();
		this.pConstraint = new ConstraintElements();
		this.pMutator = new MutatorElements();
		this.pObSelectionStrategy = new ObSelectionStrategyElements();
		this.pRandomSelection = new RandomSelectionElements();
		this.pSpecificSelection = new SpecificSelectionElements();
		this.pCompleteSelection = new CompleteSelectionElements();
		this.pOtherSelection = new OtherSelectionElements();
		this.pSubsetSelection = new SubsetSelectionElements();
		this.pAttributeEvaluationType = new AttributeEvaluationTypeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pNumberType = new NumberTypeElements();
		this.pRandomNumberType = new RandomNumberTypeElements();
		this.pLoad = new LoadElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
		this.unknownRuleLogicOperator = new LogicOperatorElements();
		this.unknownRuleOperator = new OperatorElements();
		this.unknownRuleArithmeticOperator = new ArithmeticOperatorElements();
		this.unknownRuleRepeat = new RepeatElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pAttributeEvaluation = new AttributeEvaluationElements();
		this.pReferenceEvaluation = new ReferenceEvaluationElements();
		this.pEvaluation = new EvaluationElements();
		this.pExpression = new ExpressionElements();
		this.pRemoveObjectMutator = new RemoveObjectMutatorElements();
		this.pRemoveReferenceMutator = new RemoveReferenceMutatorElements();
		this.pRemoveRandomReferenceMutator = new RemoveRandomReferenceMutatorElements();
		this.pRemoveSpecificReferenceMutator = new RemoveSpecificReferenceMutatorElements();
		this.pRemoveCompleteReferenceMutator = new RemoveCompleteReferenceMutatorElements();
		this.pCreateObjectMutator = new CreateObjectMutatorElements();
		this.pSelectObjectMutator = new SelectObjectMutatorElements();
		this.pModifyInformationMutator = new ModifyInformationMutatorElements();
		this.pCreateReferenceMutator = new CreateReferenceMutatorElements();
		this.pModifySourceReferenceMutator = new ModifySourceReferenceMutatorElements();
		this.pModifyTargetReferenceMutator = new ModifyTargetReferenceMutatorElements();
		this.pCompositeMutator = new CompositeMutatorElements();
		this.pCloneObjectMutator = new CloneObjectMutatorElements();
		this.pAttributeSet = new AttributeSetElements();
		this.pAttributeScalar = new AttributeScalarElements();
		this.pAttributeUnset = new AttributeUnsetElements();
		this.pAttributeSwap = new AttributeSwapElements();
		this.pAttributeCopy = new AttributeCopyElements();
		this.pAttributeReverse = new AttributeReverseElements();
		this.pAttributeOperation = new AttributeOperationElements();
		this.pReferenceSet = new ReferenceSetElements();
		this.pReferenceInit = new ReferenceInitElements();
		this.pReferenceSwap = new ReferenceSwapElements();
		this.pReferenceAtt = new ReferenceAttElements();
		this.pRandomTypeSelection = new RandomTypeSelectionElements();
		this.pSpecificObjectSelection = new SpecificObjectSelectionElements();
		this.pSpecificClosureSelection = new SpecificClosureSelectionElements();
		this.pCompleteTypeSelection = new CompleteTypeSelectionElements();
		this.pOtherTypeSelection = new OtherTypeSelectionElements();
		this.pEachTypeSelection = new EachTypeSelectionElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pRandomBooleanType = new RandomBooleanTypeElements();
		this.pSpecificBooleanType = new SpecificBooleanTypeElements();
		this.pStringType = new StringTypeElements();
		this.pRandomStringType = new RandomStringTypeElements();
		this.pSpecificStringType = new SpecificStringTypeElements();
		this.pUpperStringType = new UpperStringTypeElements();
		this.pCatStartStringType = new CatStartStringTypeElements();
		this.pCatEndStringType = new CatEndStringTypeElements();
		this.pListStringType = new ListStringTypeElements();
		this.pLowerStringType = new LowerStringTypeElements();
		this.pReplaceStringType = new ReplaceStringTypeElements();
		this.pDoubleType = new DoubleTypeElements();
		this.pRandomDoubleType = new RandomDoubleTypeElements();
		this.pSpecificDoubleType = new SpecificDoubleTypeElements();
		this.pMinValueType = new MinValueTypeElements();
		this.pMaxValueType = new MaxValueTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pSpecificIntegerType = new SpecificIntegerTypeElements();
		this.pRandomIntegerType = new RandomIntegerTypeElements();
		this.pRandomType = new RandomTypeElements();
		this.pRandomDoubleNumberType = new RandomDoubleNumberTypeElements();
		this.pRandomIntegerNumberType = new RandomIntegerNumberTypeElements();
		this.pListType = new ListTypeElements();
		this.pObjectAttributeType = new ObjectAttributeTypeElements();
		this.pMaxCardinality = new MaxCardinalityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("wodel.dsls.Wodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MutatorEnvironment:
	//	load+=Load* definition=Definition "with" ("blocks" "{" blocks+=Block blocks+=Block* "}" | "commands" "{"
	//	commands+=Mutator commands+=Mutator* "}") ("constraints" "{" constraints+=Constraint constraints+=Constraint* "}")?;
	public MutatorEnvironmentElements getMutatorEnvironmentAccess() {
		return pMutatorEnvironment;
	}
	
	public ParserRule getMutatorEnvironmentRule() {
		return getMutatorEnvironmentAccess().getRule();
	}

	//Definition:
	//	Library | Program;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Library:
	//	{Library} "library" "for" "metamodel" metamodel=EString;
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//Program:
	//	{Program} "generate" num=EInt? "mutants" "in" output=EString "from" source=Source "metamodel" metamodel=EString;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Source:
	//	{Source} path= / *(multiple?='all')?* / EString;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//Block:
	//	name=ID ("from" from+=[Block] ("," from+=[Block])*)? ("repeat" "=" repeat=Repeat)? "{" commands+=Mutator
	//	commands+=Mutator* "}" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt) "]")?;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Constraint:
	//	"context" type=[ecore::EClass] id=EString ":" rule=EString;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Mutator:
	//	CreateObjectMutator | SelectObjectMutator | CompositeMutator | ModifySourceReferenceMutator |
	//	ModifyTargetReferenceMutator | CreateReferenceMutator | RemoveObjectMutator | RemoveReferenceMutator |
	//	ModifyInformationMutator | CloneObjectMutator;
	public MutatorElements getMutatorAccess() {
		return pMutator;
	}
	
	public ParserRule getMutatorRule() {
		return getMutatorAccess().getRule();
	}

	//ObSelectionStrategy:
	//	RandomSelection | SpecificSelection | CompleteSelection | OtherSelection | SubsetSelection;
	public ObSelectionStrategyElements getObSelectionStrategyAccess() {
		return pObSelectionStrategy;
	}
	
	public ParserRule getObSelectionStrategyRule() {
		return getObSelectionStrategyAccess().getRule();
	}

	//RandomSelection:
	//	RandomTypeSelection;
	public RandomSelectionElements getRandomSelectionAccess() {
		return pRandomSelection;
	}
	
	public ParserRule getRandomSelectionRule() {
		return getRandomSelectionAccess().getRule();
	}

	//SpecificSelection:
	//	SpecificObjectSelection | SpecificClosureSelection;
	public SpecificSelectionElements getSpecificSelectionAccess() {
		return pSpecificSelection;
	}
	
	public ParserRule getSpecificSelectionRule() {
		return getSpecificSelectionAccess().getRule();
	}

	//CompleteSelection:
	//	CompleteTypeSelection;
	public CompleteSelectionElements getCompleteSelectionAccess() {
		return pCompleteSelection;
	}
	
	public ParserRule getCompleteSelectionRule() {
		return getCompleteSelectionAccess().getRule();
	}

	//OtherSelection:
	//	OtherTypeSelection;
	public OtherSelectionElements getOtherSelectionAccess() {
		return pOtherSelection;
	}
	
	public ParserRule getOtherSelectionRule() {
		return getOtherSelectionAccess().getRule();
	}

	//SubsetSelection:
	//	EachTypeSelection;
	public SubsetSelectionElements getSubsetSelectionAccess() {
		return pSubsetSelection;
	}
	
	public ParserRule getSubsetSelectionRule() {
		return getSubsetSelectionAccess().getRule();
	}

	//AttributeEvaluationType:
	//	AttributeType | ObjectAttributeType;
	public AttributeEvaluationTypeElements getAttributeEvaluationTypeAccess() {
		return pAttributeEvaluationType;
	}
	
	public ParserRule getAttributeEvaluationTypeRule() {
		return getAttributeEvaluationTypeAccess().getRule();
	}

	//AttributeType:
	//	NumberType | BooleanType | StringType | ListStringType | RandomType | ListType;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//NumberType:
	//	IntegerType | DoubleType | MinValueType | MaxValueType | RandomNumberType;
	public NumberTypeElements getNumberTypeAccess() {
		return pNumberType;
	}
	
	public ParserRule getNumberTypeRule() {
		return getNumberTypeAccess().getRule();
	}

	//RandomNumberType:
	//	RandomDoubleNumberType | RandomIntegerNumberType;
	public RandomNumberTypeElements getRandomNumberTypeAccess() {
		return pRandomNumberType;
	}
	
	public ParserRule getRandomNumberTypeRule() {
		return getRandomNumberTypeAccess().getRule();
	}

	//Load:
	//	{Load} "import" file=EString;
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//enum LogicOperator:
	//	and | or;
	public LogicOperatorElements getLogicOperatorAccess() {
		return unknownRuleLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}

	//enum Operator:
	//	equals="=" | different="<>" | in;
	public OperatorElements getOperatorAccess() {
		return unknownRuleOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//enum ArithmeticOperator:
	//	add="+" | subtract="-" | multiply="*" | divide="/" | module="%";
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return unknownRuleArithmeticOperator;
	}
	
	public EnumRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}

	//enum Repeat:
	//	yes | no;
	public RepeatElements getRepeatAccess() {
		return unknownRuleRepeat;
	}
	
	public EnumRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//BinaryOperator:
	//	{BinaryOperator} type=LogicOperator;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//AttributeEvaluation:
	//	{AttributeEvaluation} name=[ecore::EAttribute] value=AttributeEvaluationType;
	public AttributeEvaluationElements getAttributeEvaluationAccess() {
		return pAttributeEvaluation;
	}
	
	public ParserRule getAttributeEvaluationRule() {
		return getAttributeEvaluationAccess().getRule();
	}

	//ReferenceEvaluation:
	//	{ReferenceEvaluation} (name=[ecore::EReference] | "self") ("->" refName=[ecore::EReference])? operator=Operator
	//	(value=ObSelectionStrategy | "null");
	public ReferenceEvaluationElements getReferenceEvaluationAccess() {
		return pReferenceEvaluation;
	}
	
	public ParserRule getReferenceEvaluationRule() {
		return getReferenceEvaluationAccess().getRule();
	}

	//Evaluation:
	//	AttributeEvaluation | ReferenceEvaluation;
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//Expression:
	//	{Expression} first=Evaluation (operator+=BinaryOperator second+=Evaluation)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	/// *
	//RemoveObjectMutator returns RemoveObjectMutator:	
	//	'remove' object=ObSelectionStrategy
	//	('[' (min=EInt '..')? max=MaxCardinality ']')?
	//	;
	//	
	//RemoveReferenceMutator returns RemoveReferenceMutator:	
	//	'remove' 'reference' refType=[ecore::EReference|ID]
	//	'in' container=ObSelectionStrategy
	//	('[' (min=EInt '..')? max=MaxCardinality ']')?
	//	;	
	// * / RemoveObjectMutator:
	//	{RemoveObjectMutator} "remove" object=ObSelectionStrategy ("from" container=ObSelectionStrategy)? ("[" (min=EInt
	//	"..")? max=MaxCardinality "]")?;
	public RemoveObjectMutatorElements getRemoveObjectMutatorAccess() {
		return pRemoveObjectMutator;
	}
	
	public ParserRule getRemoveObjectMutatorRule() {
		return getRemoveObjectMutatorAccess().getRule();
	}

	//RemoveReferenceMutator:
	//	RemoveRandomReferenceMutator | RemoveSpecificReferenceMutator | RemoveCompleteReferenceMutator;
	public RemoveReferenceMutatorElements getRemoveReferenceMutatorAccess() {
		return pRemoveReferenceMutator;
	}
	
	public ParserRule getRemoveReferenceMutatorRule() {
		return getRemoveReferenceMutatorAccess().getRule();
	}

	//RemoveRandomReferenceMutator:
	//	{RemoveRandomReferenceMutator} "remove" "one" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass] ("["
	//	(min=EInt "..")? max=MaxCardinality "]")?;
	public RemoveRandomReferenceMutatorElements getRemoveRandomReferenceMutatorAccess() {
		return pRemoveRandomReferenceMutator;
	}
	
	public ParserRule getRemoveRandomReferenceMutatorRule() {
		return getRemoveRandomReferenceMutatorAccess().getRule();
	}

	//RemoveSpecificReferenceMutator:
	//	{RemoveSpecificReferenceMutator} "remove" "reference" refType=[ecore::EReference] "in" container=ObSelectionStrategy
	//	("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public RemoveSpecificReferenceMutatorElements getRemoveSpecificReferenceMutatorAccess() {
		return pRemoveSpecificReferenceMutator;
	}
	
	public ParserRule getRemoveSpecificReferenceMutatorRule() {
		return getRemoveSpecificReferenceMutatorAccess().getRule();
	}

	//RemoveCompleteReferenceMutator:
	//	{RemoveCompleteReferenceMutator} "remove" "all" "reference" refType=[ecore::EReference] "in" type=[ecore::EClass];
	public RemoveCompleteReferenceMutatorElements getRemoveCompleteReferenceMutatorAccess() {
		return pRemoveCompleteReferenceMutator;
	}
	
	public ParserRule getRemoveCompleteReferenceMutatorRule() {
		return getRemoveCompleteReferenceMutatorAccess().getRule();
	}

	//CreateObjectMutator:
	//	(name=ID "=")? "create" type=[ecore::EClass] ("in" container=ObSelectionStrategy)? ("with" "{"
	//	(attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet | references+=ReferenceSet))*
	//	"}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public CreateObjectMutatorElements getCreateObjectMutatorAccess() {
		return pCreateObjectMutator;
	}
	
	public ParserRule getCreateObjectMutatorRule() {
		return getCreateObjectMutatorAccess().getRule();
	}

	//SelectObjectMutator:
	//	name=ID "=" "select" object=ObSelectionStrategy ("in" container=ObSelectionStrategy)?;
	public SelectObjectMutatorElements getSelectObjectMutatorAccess() {
		return pSelectObjectMutator;
	}
	
	public ParserRule getSelectObjectMutatorRule() {
		return getSelectObjectMutatorAccess().getRule();
	}

	//ModifyInformationMutator:
	//	(name=ID "=")? "modify" object=ObSelectionStrategy ("with" "{" (attributes+=AttributeSet | references+=ReferenceSet)?
	//	("," (attributes+=AttributeSet | references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public ModifyInformationMutatorElements getModifyInformationMutatorAccess() {
		return pModifyInformationMutator;
	}
	
	public ParserRule getModifyInformationMutatorRule() {
		return getModifyInformationMutatorAccess().getRule();
	}

	//CreateReferenceMutator:
	//	(name=ID "=")? "create" "reference" refType=[ecore::EReference] ("to" target=ObSelectionStrategy)? ("in"
	//	source=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public CreateReferenceMutatorElements getCreateReferenceMutatorAccess() {
		return pCreateReferenceMutator;
	}
	
	public ParserRule getCreateReferenceMutatorRule() {
		return getCreateReferenceMutatorAccess().getRule();
	}

	//ModifySourceReferenceMutator:
	//	"modify" "source" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to"
	//	newSource=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public ModifySourceReferenceMutatorElements getModifySourceReferenceMutatorAccess() {
		return pModifySourceReferenceMutator;
	}
	
	public ParserRule getModifySourceReferenceMutatorRule() {
		return getModifySourceReferenceMutatorAccess().getRule();
	}

	//ModifyTargetReferenceMutator:
	//	"modify" "target" refType=[ecore::EReference] ("from" source=ObSelectionStrategy)? ("to"
	//	newTarget=ObSelectionStrategy)? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public ModifyTargetReferenceMutatorElements getModifyTargetReferenceMutatorAccess() {
		return pModifyTargetReferenceMutator;
	}
	
	public ParserRule getModifyTargetReferenceMutatorRule() {
		return getModifyTargetReferenceMutatorAccess().getRule();
	}

	//CompositeMutator:
	//	(name=ID "=")? "[" commands+=Mutator commands+=Mutator* "]" ("[" (min=EInt ".." max=MaxCardinality | fixed=EInt)
	//	"]")?;
	public CompositeMutatorElements getCompositeMutatorAccess() {
		return pCompositeMutator;
	}
	
	public ParserRule getCompositeMutatorRule() {
		return getCompositeMutatorAccess().getRule();
	}

	//CloneObjectMutator:
	//	(name=ID "=")? "clone" contents?="contents"? object=ObSelectionStrategy ("in" container=ObSelectionStrategy)? ("with"
	//	"{" (attributes+=AttributeSet | references+=ReferenceSet)? ("," (attributes+=AttributeSet |
	//	references+=ReferenceSet))* "}")? ("[" (min=EInt "..")? max=MaxCardinality "]")?;
	public CloneObjectMutatorElements getCloneObjectMutatorAccess() {
		return pCloneObjectMutator;
	}
	
	public ParserRule getCloneObjectMutatorRule() {
		return getCloneObjectMutatorAccess().getRule();
	}

	//AttributeSet:
	//	AttributeScalar | AttributeUnset | AttributeSwap | AttributeCopy | AttributeReverse | AttributeOperation;
	public AttributeSetElements getAttributeSetAccess() {
		return pAttributeSet;
	}
	
	public ParserRule getAttributeSetRule() {
		return getAttributeSetAccess().getRule();
	}

	//AttributeScalar:
	//	attribute+=[ecore::EAttribute] value=AttributeType;
	public AttributeScalarElements getAttributeScalarAccess() {
		return pAttributeScalar;
	}
	
	public ParserRule getAttributeScalarRule() {
		return getAttributeScalarAccess().getRule();
	}

	//AttributeUnset:
	//	"unset" "(" attribute+=[ecore::EAttribute] ")";
	public AttributeUnsetElements getAttributeUnsetAccess() {
		return pAttributeUnset;
	}
	
	public ParserRule getAttributeUnsetRule() {
		return getAttributeUnsetAccess().getRule();
	}

	//AttributeSwap:
	//	"swap" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")";
	public AttributeSwapElements getAttributeSwapAccess() {
		return pAttributeSwap;
	}
	
	public ParserRule getAttributeSwapRule() {
		return getAttributeSwapAccess().getRule();
	}

	//AttributeCopy:
	//	"copy" "(" attribute+=[ecore::EAttribute] "," (object=ObSelectionStrategy ".")? attribute+=[ecore::EAttribute] ")";
	public AttributeCopyElements getAttributeCopyAccess() {
		return pAttributeCopy;
	}
	
	public ParserRule getAttributeCopyRule() {
		return getAttributeCopyAccess().getRule();
	}

	//AttributeReverse:
	//	"reverse" "(" attribute+=[ecore::EAttribute] ")";
	public AttributeReverseElements getAttributeReverseAccess() {
		return pAttributeReverse;
	}
	
	public ParserRule getAttributeReverseRule() {
		return getAttributeReverseAccess().getRule();
	}

	//AttributeOperation:
	//	attribute+=[ecore::EAttribute] operator=ArithmeticOperator value=AttributeEvaluationType;
	public AttributeOperationElements getAttributeOperationAccess() {
		return pAttributeOperation;
	}
	
	public ParserRule getAttributeOperationRule() {
		return getAttributeOperationAccess().getRule();
	}

	//ReferenceSet:
	//	ReferenceInit | ReferenceSwap | ReferenceAtt;
	public ReferenceSetElements getReferenceSetAccess() {
		return pReferenceSet;
	}
	
	public ParserRule getReferenceSetRule() {
		return getReferenceSetAccess().getRule();
	}

	//ReferenceInit:
	//	reference+=[ecore::EReference] "=" object=ObSelectionStrategy;
	public ReferenceInitElements getReferenceInitAccess() {
		return pReferenceInit;
	}
	
	public ParserRule getReferenceInitRule() {
		return getReferenceInitAccess().getRule();
	}

	//ReferenceSwap:
	//	"swapref" "(" reference+=[ecore::EReference] "," (object=ObSelectionStrategy "->")? reference+=[ecore::EReference]
	//	")";
	public ReferenceSwapElements getReferenceSwapAccess() {
		return pReferenceSwap;
	}
	
	public ParserRule getReferenceSwapRule() {
		return getReferenceSwapAccess().getRule();
	}

	//ReferenceAtt:
	//	reference+=[ecore::EReference] "." attribute=[ecore::EAttribute] value=AttributeType;
	public ReferenceAttElements getReferenceAttAccess() {
		return pReferenceAtt;
	}
	
	public ParserRule getReferenceAttRule() {
		return getReferenceAttAccess().getRule();
	}

	//RandomTypeSelection:
	//	{RandomTypeSelection} "one" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
	//	expression=Expression "}")?;
	public RandomTypeSelectionElements getRandomTypeSelectionAccess() {
		return pRandomTypeSelection;
	}
	
	public ParserRule getRandomTypeSelectionRule() {
		return getRandomTypeSelectionAccess().getRule();
	}

	//SpecificObjectSelection:
	//	{SpecificObjectSelection} objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ("where" "{"
	//	expression=Expression "}")?;
	public SpecificObjectSelectionElements getSpecificObjectSelectionAccess() {
		return pSpecificObjectSelection;
	}
	
	public ParserRule getSpecificObjectSelectionRule() {
		return getSpecificObjectSelectionAccess().getRule();
	}

	//SpecificClosureSelection:
	//	{SpecificClosureSelection} "closure" "(" objSel=[ObjectEmitter] ("->" refType=[ecore::EReference])? ")" ("where" "{"
	//	expression=Expression "}")?;
	public SpecificClosureSelectionElements getSpecificClosureSelectionAccess() {
		return pSpecificClosureSelection;
	}
	
	public ParserRule getSpecificClosureSelectionRule() {
		return getSpecificClosureSelectionAccess().getRule();
	}

	//CompleteTypeSelection:
	//	{CompleteTypeSelection} "all" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
	//	expression=Expression "}")?;
	public CompleteTypeSelectionElements getCompleteTypeSelectionAccess() {
		return pCompleteTypeSelection;
	}
	
	public ParserRule getCompleteTypeSelectionRule() {
		return getCompleteTypeSelectionAccess().getRule();
	}

	//OtherTypeSelection:
	//	{OtherTypeSelection} "other" type=[ecore::EClass] ("->" refType=[ecore::EReference])? ("where" "{"
	//	expression=Expression "}")?;
	public OtherTypeSelectionElements getOtherTypeSelectionAccess() {
		return pOtherTypeSelection;
	}
	
	public ParserRule getOtherTypeSelectionRule() {
		return getOtherTypeSelectionAccess().getRule();
	}

	//EachTypeSelection:
	//	{EachTypeSelection} "each" type=[ecore::EClass] ("where" "{" expression=Expression "}")?;
	public EachTypeSelectionElements getEachTypeSelectionAccess() {
		return pEachTypeSelection;
	}
	
	public ParserRule getEachTypeSelectionRule() {
		return getEachTypeSelectionAccess().getRule();
	}

	//BooleanType:
	//	SpecificBooleanType | RandomBooleanType;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//RandomBooleanType:
	//	{RandomBooleanType} operator=Operator "random-boolean";
	public RandomBooleanTypeElements getRandomBooleanTypeAccess() {
		return pRandomBooleanType;
	}
	
	public ParserRule getRandomBooleanTypeRule() {
		return getRandomBooleanTypeAccess().getRule();
	}

	//SpecificBooleanType:
	//	{SpecificBooleanType} operator=Operator value=EBoolean;
	public SpecificBooleanTypeElements getSpecificBooleanTypeAccess() {
		return pSpecificBooleanType;
	}
	
	public ParserRule getSpecificBooleanTypeRule() {
		return getSpecificBooleanTypeAccess().getRule();
	}

	//StringType:
	//	SpecificStringType | RandomStringType | UpperStringType | LowerStringType | CatStartStringType | CatEndStringType |
	//	ReplaceStringType;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//RandomStringType:
	//	{RandomStringType} operator=Operator "random-string" "(" min=EInt "," max=EInt ")";
	public RandomStringTypeElements getRandomStringTypeAccess() {
		return pRandomStringType;
	}
	
	public ParserRule getRandomStringTypeRule() {
		return getRandomStringTypeAccess().getRule();
	}

	//SpecificStringType:
	//	{SpecificStringType} operator=Operator value=STRING;
	public SpecificStringTypeElements getSpecificStringTypeAccess() {
		return pSpecificStringType;
	}
	
	public ParserRule getSpecificStringTypeRule() {
		return getSpecificStringTypeAccess().getRule();
	}

	//UpperStringType:
	//	{UpperStringType} operator=Operator "upper";
	public UpperStringTypeElements getUpperStringTypeAccess() {
		return pUpperStringType;
	}
	
	public ParserRule getUpperStringTypeRule() {
		return getUpperStringTypeAccess().getRule();
	}

	//CatStartStringType:
	//	{CatStartStringType} operator=Operator "catstart" "(" value=EString ")";
	public CatStartStringTypeElements getCatStartStringTypeAccess() {
		return pCatStartStringType;
	}
	
	public ParserRule getCatStartStringTypeRule() {
		return getCatStartStringTypeAccess().getRule();
	}

	//CatEndStringType:
	//	{CatEndStringType} operator=Operator "catend" "(" value=EString ")";
	public CatEndStringTypeElements getCatEndStringTypeAccess() {
		return pCatEndStringType;
	}
	
	public ParserRule getCatEndStringTypeRule() {
		return getCatEndStringTypeAccess().getRule();
	}

	//ListStringType:
	//	{ListStringType} operator=Operator "[" value+=EString ("," value+=EString)* "]";
	public ListStringTypeElements getListStringTypeAccess() {
		return pListStringType;
	}
	
	public ParserRule getListStringTypeRule() {
		return getListStringTypeAccess().getRule();
	}

	//LowerStringType:
	//	{LowerStringType} operator=Operator "lower";
	public LowerStringTypeElements getLowerStringTypeAccess() {
		return pLowerStringType;
	}
	
	public ParserRule getLowerStringTypeRule() {
		return getLowerStringTypeAccess().getRule();
	}

	//ReplaceStringType:
	//	{ReplaceStringType} operator=Operator "replace" "(" oldstring=EString "," newstring=EString ")";
	public ReplaceStringTypeElements getReplaceStringTypeAccess() {
		return pReplaceStringType;
	}
	
	public ParserRule getReplaceStringTypeRule() {
		return getReplaceStringTypeAccess().getRule();
	}

	//DoubleType:
	//	SpecificDoubleType | RandomDoubleType;
	public DoubleTypeElements getDoubleTypeAccess() {
		return pDoubleType;
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//RandomDoubleType:
	//	{RandomDoubleType} operator=Operator "random-double" ("(" min=EDouble "," max=EDouble ")")?;
	public RandomDoubleTypeElements getRandomDoubleTypeAccess() {
		return pRandomDoubleType;
	}
	
	public ParserRule getRandomDoubleTypeRule() {
		return getRandomDoubleTypeAccess().getRule();
	}

	//SpecificDoubleType:
	//	{SpecificDoubleType} operator=Operator value=EDouble;
	public SpecificDoubleTypeElements getSpecificDoubleTypeAccess() {
		return pSpecificDoubleType;
	}
	
	public ParserRule getSpecificDoubleTypeRule() {
		return getSpecificDoubleTypeAccess().getRule();
	}

	//MinValueType:
	//	operator=Operator "min" "(" attribute=[ecore::EAttribute] ")";
	public MinValueTypeElements getMinValueTypeAccess() {
		return pMinValueType;
	}
	
	public ParserRule getMinValueTypeRule() {
		return getMinValueTypeAccess().getRule();
	}

	//MaxValueType:
	//	operator=Operator "max" "(" attribute=[ecore::EAttribute] ")";
	public MaxValueTypeElements getMaxValueTypeAccess() {
		return pMaxValueType;
	}
	
	public ParserRule getMaxValueTypeRule() {
		return getMaxValueTypeAccess().getRule();
	}

	//IntegerType:
	//	SpecificIntegerType | RandomIntegerType;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//SpecificIntegerType:
	//	{SpecificIntegerType} operator=Operator value=EInt;
	public SpecificIntegerTypeElements getSpecificIntegerTypeAccess() {
		return pSpecificIntegerType;
	}
	
	public ParserRule getSpecificIntegerTypeRule() {
		return getSpecificIntegerTypeAccess().getRule();
	}

	//RandomIntegerType:
	//	{RandomIntegerType} operator=Operator "random-int" ("(" min=EInt "," max=EInt ")")?;
	public RandomIntegerTypeElements getRandomIntegerTypeAccess() {
		return pRandomIntegerType;
	}
	
	public ParserRule getRandomIntegerTypeRule() {
		return getRandomIntegerTypeAccess().getRule();
	}

	//RandomType:
	//	{RandomType} operator=Operator "random";
	public RandomTypeElements getRandomTypeAccess() {
		return pRandomType;
	}
	
	public ParserRule getRandomTypeRule() {
		return getRandomTypeAccess().getRule();
	}

	//RandomDoubleNumberType:
	//	operator=Operator "random" "(" min=EDouble "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")";
	public RandomDoubleNumberTypeElements getRandomDoubleNumberTypeAccess() {
		return pRandomDoubleNumberType;
	}
	
	public ParserRule getRandomDoubleNumberTypeRule() {
		return getRandomDoubleNumberTypeAccess().getRule();
	}

	//RandomIntegerNumberType:
	//	operator=Operator "random" "(" min=EInt "," (object=ObSelectionStrategy ".")? max=[ecore::EAttribute] ")";
	public RandomIntegerNumberTypeElements getRandomIntegerNumberTypeAccess() {
		return pRandomIntegerNumberType;
	}
	
	public ParserRule getRandomIntegerNumberTypeRule() {
		return getRandomIntegerNumberTypeAccess().getRule();
	}

	//ListType:
	//	{ListType} operator=Operator "{" value+=[ecore::EObject] ("," value+=[ecore::EObject])* "}";
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//ObjectAttributeType:
	//	{ObjectAttributeType} operator=Operator objSel=[ObjectEmitter] "." attribute=[ecore::EAttribute];
	public ObjectAttributeTypeElements getObjectAttributeTypeAccess() {
		return pObjectAttributeType;
	}
	
	public ParserRule getObjectAttributeTypeRule() {
		return getObjectAttributeTypeAccess().getRule();
	}

	//MaxCardinality returns ecore::EIntegerObject:
	//	EInt | "*";
	public MaxCardinalityElements getMaxCardinalityAccess() {
		return pMaxCardinality;
	}
	
	public ParserRule getMaxCardinalityRule() {
		return getMaxCardinalityAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
