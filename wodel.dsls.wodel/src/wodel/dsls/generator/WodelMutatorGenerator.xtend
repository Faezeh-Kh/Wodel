/*
 * generated by Xtext
 */
package wodel.dsls.generator

import mutatorenvironment.AttributeScalar
import mutatorenvironment.AttributeType
import mutatorenvironment.BooleanType
import mutatorenvironment.CompositeMutator
import mutatorenvironment.CreateObjectMutator
import mutatorenvironment.DoubleType
import mutatorenvironment.IntegerType
import mutatorenvironment.ModifySourceReferenceMutator
import mutatorenvironment.Mutator
import mutatorenvironment.MutatorEnvironment
import mutatorenvironment.RandomTypeSelection
import mutatorenvironment.SpecificObjectSelection
import mutatorenvironment.StringType
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import mutatorenvironment.Program
import mutatorenvironment.Definition
import mutatorenvironment.ModifyTargetReferenceMutator
import mutatorenvironment.CreateReferenceMutator
import mutatorenvironment.ModifyInformationMutator
import java.util.ArrayList
import mutatorenvironment.SpecificStringType
import mutatorenvironment.RandomStringType
import mutatorenvironment.SpecificDoubleType
import mutatorenvironment.RandomDoubleType
import mutatorenvironment.SpecificBooleanType
import mutatorenvironment.RandomBooleanType
import mutatorenvironment.SpecificIntegerType
import mutatorenvironment.RandomIntegerType
import mutatorenvironment.UpperStringType
import mutatorenvironment.LowerStringType
import mutatorenvironment.ListStringType
import mutatorenvironment.CatStartStringType
import mutatorenvironment.CatEndStringType
import mutatorenvironment.AttributeUnset
import mutatorenvironment.AttributeSet
import mutatorenvironment.AttributeSwap
import mutatorenvironment.ReplaceStringType
import org.eclipse.emf.ecore.EAttribute
import mutatorenvironment.AttributeCopy
import mutatorenvironment.RemoveRandomReferenceMutator
import mutatorenvironment.RemoveSpecificReferenceMutator
import mutatorenvironment.CompleteTypeSelection
import mutatorenvironment.RemoveCompleteReferenceMutator
import mutatorenvironment.OtherTypeSelection
import mutatorenvironment.SelectObjectMutator
import mutatorenvironment.RemoveObjectMutator
import mutatorenvironment.AttributeReverse
import mutatorenvironment.Expression
import mutatorenvironment.ReferenceSet
import org.eclipse.emf.ecore.EReference
import mutatorenvironment.ReferenceInit
import mutatorenvironment.ObSelectionStrategy
import mutatorenvironment.ReferenceSwap
import mutatorenvironment.AttributeEvaluation
import mutatorenvironment.ReferenceEvaluation
import org.eclipse.emf.ecore.EStructuralFeature
import mutatorenvironment.Block
import java.io.File
import mutatorenvironment.Repeat
import manager.ModelManager
import wodel.dsls.WodelUtils
import mutatorenvironment.RandomType
import mutatorenvironment.CloneObjectMutator
import mutatorenvironment.ReferenceAtt
import mutatorenvironment.ListType
import mutatorenvironment.ObjectAttributeType
import mutatorenvironment.MaxValueType
import mutatorenvironment.MinValueType
import mutator.MutatorUtils
import mutatorenvironment.AttributeOperation
import mutatorenvironment.ArithmeticOperator
import mutatorenvironment.RandomIntegerNumberType
import mutatorenvironment.RandomDoubleNumberType
import mutatorenvironment.SpecificClosureSelection
import mutatorenvironment.SelectSampleMutator
import mutatorenvironment.SampleClause
import mutatorenvironment.ReferenceAdd
import mutatorenvironment.ReferenceRemove

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class WodelMutatorGenerator implements IGenerator {
	
	private int nMethod = 0;
	private int nCompositeMethod = 0;
	private int nRegistryMethod = 0;
	private int nCompositeRegistryMethod = 0;
	private ArrayList<String> compositeCommands;
	private ArrayList<String> compositeRegistryCommands;
	private int nCommands = 0;
	private int nMutation = 0;
	private int nRegistryMutation = 0;
	private int nCompositeCommands = 0;
	private int nExpression = 0;
	private ArrayList<Integer> expressionList;
	private int nReference = 0;
	private String methodName;
	private String registryMethodName;
	private String commandName;
	private String attributeName;
	private String referenceName;
	private String compositeMethodName;
	private String compositeRegistryMethodName;
	private String compositeCommandName;
	private boolean executeMutation = true;
	private String fileName;
	private String className;
	private String path;
	private String xmiFileName;
	private int nMut;
	
	def String getMutatorPath(File[] files) {
		var String mutatorPath = null
		var int i = 0
		while (mutatorPath == null && i < files.size) {
			var File file = files.get(i)
			if (file.isFile == true) {
				if (file.getName().equals(fileName)) {
					var mutatorFolderAndFile = file.path.substring(file.path.indexOf(manager.WodelContext.getProject)).replace("\\", "/")
					mutatorPath = "file:/" + ModelManager.getWorkspaceAbsolutePath+'/'+mutatorFolderAndFile
				}
			}
			else {
				mutatorPath = getMutatorPath(file.listFiles)
			}
			i++
		}
		return mutatorPath
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		manager.WodelContext.setProject(null)
		manager.WodelContext.getProject
		path = ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject		

		for(e: resource.allContents.toIterable.filter(MutatorEnvironment)) {
			
			fileName = resource.URI.lastSegment
			var projectFolderName = ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject + '/'
			var File projectFolder = new File(projectFolderName)
			var File[] files = projectFolder.listFiles
			var String xTextFileName = getMutatorPath(files)
			
			//"file:/" + ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ "/src/" + fileName
			//var File file = new File(xTextFileName)
			//if (file.exists() == false) {
			//	xTextFileName = "file:/" + ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject + "/" + fileName
			//}
			xmiFileName = "file:/" + ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ '/' + ((e as MutatorEnvironment).definition as Program).output + fileName.replaceAll("mutator", "model")
			WodelUtils.serialize(xTextFileName, xmiFileName)
			/* Write the EObject into a file */
					
			fileName = fileName.replaceAll(".mutator", ".java")
			className = fileName.replaceAll(".java", "")
     		fsa.generateFile(fileName, e.compile)
		}
	}
	
	def getRandom(int range) {
		if(range==1) return 0
		
        var int value = System.nanoTime().intValue % range
        if (value<0) value= value*-1
        
        return value
	}
	
	def method(Mutator mut)'''
		private ArrayList<Mutator> «methodName»(ArrayList<EPackage> packages, Resource model, HashMap<String, EObject> hmObjects, HashMap<String, List<EObject>> hmList) throws ReferenceNonExistingException {
			ArrayList<Mutator> mutations = new ArrayList<Mutator>();
		«IF mut instanceof ModifyInformationMutator»
		//MODIFY INFORMATION «methodName»
		«IF mut.object instanceof RandomTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»");
			«IF mut.object.expression == null»
				EObject object = rts.getObject();
			«ELSE»
				List<EObject> objects = rts.getObjects();
			   	//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
			   	//EXPRESSION LEVEL: «nExpression = 0»
			   	//EXPRESSION LEVEL: «expressionList.add(0)»
			   	Expression exp«expressionList.get(0)» = new Expression();
			   	«mut.object.expression.method»
		   		List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
				EObject object = null;
				if (selectedObjects.size() > 0) {
					object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
				}
			«ENDIF»
			ObSelectionStrategy objectSelection = null; 
			if (object != null) {
			«IF mut.name!= null»
				hmObjects.put("«mut.name»", object);
			«ENDIF»
				objectSelection = new SpecificObjectSelection(packages, model, object);
			}
		«ELSEIF mut.object instanceof CompleteTypeSelection»
			CompleteTypeSelection cts = new CompleteTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
			List<EObject> objects = cts.getObjects();
			«IF mut.name!= null»
				hmList.put("«mut.name»", objects);
			«ENDIF»
			List<ObSelectionStrategy> listSelection = new ArrayList<ObSelectionStrategy>();
			for (EObject obj : objects) {
				ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);
				listSelection.add(objectSelection);
			}
		«ELSEIF mut.object instanceof SpecificObjectSelection»
			ObSelectionStrategy objectSelection = null;
			if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
				objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
			} else {
				return mutations;
			}
		«ELSEIF mut.object instanceof SpecificClosureSelection»
			«IF ((mut.object as SpecificClosureSelection).objSel != null && (mut.object as SpecificClosureSelection).refType != null)»
			ObSelectionStrategy objectSelection = null;
			if (hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»") != null) {
				objectSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»"), "«(mut.object as SpecificClosureSelection).refType.name»");
			}
			else {
				return mutations;
			}
			«ENDIF»
		«ENDIF»
				
		HashMap<String, List<AttributeConfigurationStrategy>> attsList = new HashMap<String, List<AttributeConfigurationStrategy>>();
		//COUNTER:«var counter = 0»
		«FOR c : mut.attributes »
			//COUNTER:«counter++»
			«IF c.attribute.get(0) !=null»
				«val EAttribute attribute = c.attribute.get(0)»
				//NAME:«attributeName = attribute.name»
			«ELSE»
				//NAME:«attributeName = ""»
			«ENDIF»
			«IF c instanceof AttributeSwap»
			   	«val attributeSwap = c as AttributeSwap»
			   	«IF attributeSwap.object != null»
			   		«IF attributeSwap.object instanceof RandomTypeSelection»
			   		if (hmObjects.get("«(attributeSwap.object as RandomTypeSelection).name»") != null) {
			   			List<AttributeConfigurationStrategy> atts = null;
			   			if (attsList.get("«attributeName»") != null) {
			   				atts = attsList.get("«attributeName»");
			   			}
			   			else {
			   				atts = new ArrayList<AttributeConfigurationStrategy>();
			   			}
			   			atts.add(new SwapAttributeConfigurationStrategy(hmObjects.get("«(attributeSwap.object as RandomTypeSelection).name»"), "«(attributeSwap.object as RandomTypeSelection).type.name»", "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»", model));
		   				attsList.put("«attributeName»", atts);
		   			}
		   			«ELSEIF attributeSwap.object instanceof SpecificObjectSelection»
			   		if (objectSelection != null && objectSelection.getObject() != null) {
			   			if (hmObjects.get("«(attributeSwap.object as SpecificObjectSelection).objSel.name»") != null) {
			   				List<AttributeConfigurationStrategy> atts = null;
			   				if (attsList.get("«attributeName»") != null) {
			   					atts = attsList.get("«attributeName»");
				   			}
				   			else {
				   				atts = new ArrayList<AttributeConfigurationStrategy>();
				   			}
			   				atts.add(new SwapAttributeConfigurationStrategy(objectSelection.getObject(), hmObjects.get("«(attributeSwap.object as SpecificObjectSelection).objSel.name»"), "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»"));
			   				attsList.put("«attributeName»", atts);
			   			} else {
							return mutations;
						}
		   			}
		   			«ENDIF»
		   		«ELSE»
		   		if (objectSelection != null && objectSelection.getObject() != null) {
	   				List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
	   					atts = attsList.get("«attributeName»");
		   			}
		   			else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
		   			atts.add(new SwapAttributeConfigurationStrategy(objectSelection.getObject(), "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»"));
	   				attsList.put("«attributeName»", atts);
		   		}
				«ENDIF»
			«ELSEIF c instanceof AttributeCopy»
		   		«val attributeCopy = c as AttributeCopy»
		   		«IF attributeCopy.object != null»
					«IF attributeCopy.object instanceof RandomTypeSelection»
					if (objectSelection != null && objectSelection.getObject() != null) {
						List<AttributeConfigurationStrategy> atts = null;
	   					if (attsList.get("«attributeName»") != null) {
	   						atts = attsList.get("«attributeName»");
		   				}
		   				else {
		   					atts = new ArrayList<AttributeConfigurationStrategy>();
		   				}
		   				atts.add(new CopyAttributeConfigurationStrategy(objectSelection.getObject(), "«(attributeCopy.object as RandomTypeSelection).type.name»", "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»", model));
		   				attsList.put("«attributeName»", atts);
		   			}
					«ELSEIF attributeCopy.object instanceof SpecificObjectSelection»
						if (objectSelection != null && objectSelection.getObject() != null) {
							if (hmObjects.get("«(attributeCopy.object as SpecificObjectSelection).objSel.name»") != null) {
	   							List<AttributeConfigurationStrategy> atts = null;
	   							if (attsList.get("«attributeName»") != null) {
				   					atts = attsList.get("«attributeName»");
		   						}
					   			else {
		   							atts = new ArrayList<AttributeConfigurationStrategy>();
					   			}
			   					atts.add(new CopyAttributeConfigurationStrategy(objectSelection.getObject(), hmObjects.get("«(attributeCopy.object as SpecificObjectSelection).objSel.name»"), "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»"));
				   				attsList.put("«attributeName»", atts);
							} else {
								return mutations;
							}
						}
					«ENDIF»
	   			«ELSE»
		   		if (objectSelection != null && objectSelection.getObject() != null) {
					List<AttributeConfigurationStrategy> atts = null;
					if (attsList.get("«attributeName»") != null) {
	   					atts = attsList.get("«attributeName»");
					}
		   			else {
						atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				atts.add(new CopyAttributeConfigurationStrategy(objectSelection.getObject(), "«c.getAttribute().get(0).name»", "«c.getAttribute().get(1).name»"));
	   				attsList.put("«attributeName»", atts);
	   			}
	   		«ENDIF»
	   		«ELSEIF c instanceof AttributeOperation»
	   			«val attributeOperation = c as AttributeOperation»
	   			if (objectSelection != null && objectSelection.getObject() != null) {
	   			«IF attributeOperation.value instanceof ObjectAttributeType»
	   				//«val ObjectAttributeType objectAtt = attributeOperation.value as ObjectAttributeType»
	   				Object value = ModelManager.getAttribute("«objectAtt.attribute.name»", hmObjects.get("«objectAtt.objSel.name»"));
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof SpecificIntegerType»
	   				//«val SpecificIntegerType specInt = attributeOperation.value as SpecificIntegerType»
	   				Object value = «specInt.value»;
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof RandomIntegerType»
	   				//«val RandomIntegerType rnInt = attributeOperation.value as RandomIntegerType»
	   				int min = «rnInt.min»;
	   				int max = «rnInt.max»;
	   				Object value = (min == 0 && max == 0) ? 0 : ModelManager.rn.nextInt(max - min) + min;
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof RandomIntegerNumberType»
	   				//«val RandomIntegerNumberType rnNumInt = attributeOperation.value as RandomIntegerNumberType»
	   				int min = «rnNumInt.min»;
	   				int max = 0;
	   				«IF rnNumInt.object instanceof SpecificObjectSelection»
	   				//«val SpecificObjectSelection sel = rnNumInt.object as SpecificObjectSelection»
	   				max = ModelManager.getIntAttribute("«rnNumInt.max.name»", hmObjects.get("«sel.objSel.name»"));
	   				«ENDIF»
	   				Object value = (min == 0 && max == 0) ? 0 : ModelManager.rn.nextInt(max - min) + min;
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof SpecificDoubleType»
	   				//«val SpecificDoubleType specDouble = attributeOperation.value as SpecificDoubleType»
	   				Object value = «specDouble.value»;
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof RandomDoubleType»
	   				//«val RandomDoubleType rnDouble = attributeOperation.value as RandomDoubleType»
	   				int min = (int) Math.floor(«rnDouble.min» * 100);
					int max = (int) Math.floor(«rnDouble.max» * 100);
					Object value = 0.0;
					if (min != 0 || max != 0) {
						int rn = ModelManager.rn.nextInt(max - min) + min;
	   					value = rn / 100.0;
	   				}
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof RandomDoubleNumberType»
	   				//«val RandomDoubleNumberType rnNumDouble = attributeOperation.value as RandomDoubleNumberType»
	   				int min = (int) Math.floor(«rnNumDouble.min» * 100);
	   				int max = 0;
	   				«IF rnNumDouble.object instanceof SpecificObjectSelection»
	   				//«val SpecificObjectSelection sel = rnNumDouble.object as SpecificObjectSelection»
	   				max = (int) Math.floor(ModelManager.getDoubleAttribute("«rnNumDouble.max.name»", hmObjects.get("«sel.objSel.name»")) * 100);
	   				«ENDIF»
					Object value = 0.0;
					if (min != 0 || max != 0) {
						int rn = ModelManager.rn.nextInt(max - min) + min;
	   					value = rn / 100.0;
	   				}
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof MinValueType»
	   				//«val MinValueType minValue = attributeOperation.value as MinValueType»
	   				MinValueConfigurationStrategy minStrategy = new MinValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(minValue)»", "«minValue.attribute.name»");
	   				Object value = minStrategy.getValue(); 
	   			«ENDIF»
	   			«IF attributeOperation.value instanceof MaxValueType»
	   				//«val MaxValueType maxValue = attributeOperation.value as MaxValueType»
	   				MaxValueConfigurationStrategy maxStrategy = new MaxValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(maxValue)»", "«maxValue.attribute.name»");
	   				Object value = maxStrategy.getValue(); 
	   			«ENDIF»
	   			«IF attributeOperation.operator == ArithmeticOperator.ADD»
		   			List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
				   		atts = attsList.get("«attributeName»");
		   			}
					else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				«attributeOperation.add()»
	   			«ENDIF»
	   			«IF attributeOperation.operator == ArithmeticOperator.SUBTRACT»
		   			List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
				   		atts = attsList.get("«attributeName»");
		   			}
					else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				«attributeOperation.subtract()»
	   			«ENDIF»
	   			«IF attributeOperation.operator == ArithmeticOperator.MULTIPLY»
		   			List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
				   		atts = attsList.get("«attributeName»");
		   			}
					else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				«attributeOperation.multiply()»
	   			«ENDIF»
	   			«IF attributeOperation.operator == ArithmeticOperator.DIVIDE»
		   			List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
				   		atts = attsList.get("«attributeName»");
		   			}
					else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				«attributeOperation.divide()»
	   			«ENDIF»
	   			«IF attributeOperation.operator == ArithmeticOperator.MODULE»
		   			List<AttributeConfigurationStrategy> atts = null;
	   				if (attsList.get("«attributeName»") != null) {
				   		atts = attsList.get("«attributeName»");
		   			}
					else {
		   				atts = new ArrayList<AttributeConfigurationStrategy>();
		   			}
	   				«attributeOperation.module()»
	   			«ENDIF»
	   			}
			«ELSE»
			if (objectSelection != null) {
				«c.method(false, true)»
			}
			«ENDIF»
   		«ENDFOR»
		   				
		HashMap<String, List<ReferenceConfigurationStrategy>> refsList = new HashMap<String, List<ReferenceConfigurationStrategy>>();
		HashMap<String, List<AttributeConfigurationStrategy>> attsRefList = new HashMap<String, List<AttributeConfigurationStrategy>>();
		ArrayList<EObject> objsAttRef = new ArrayList<EObject>();
		//COUNTER:«counter = 0»
		«FOR c : mut.references »
			//COUNTER:«counter++»
			«IF c.reference.get(0) !=null»
				«val EReference reference = c.reference.get(0)»
				//NAME:«referenceName = reference.name»
			«ELSE»
				//NAME:«referenceName = ""»
			«ENDIF»
		  	«IF c instanceof ReferenceSwap»
	   			«val referenceSwap = c as ReferenceSwap»
	   			«IF referenceSwap.object != null»
					«IF referenceSwap.object instanceof RandomTypeSelection»
					if (hmObjects.get("«(referenceSwap.object as RandomTypeSelection).name»") != null) {
						List<ReferenceConfigurationStrategy> refs = null;
	   					if (refsList.get("«referenceName»") != null) {
				   			refs = refsList.get("«referenceName»");
		   				}
					   	else {
		   					refs = new ArrayList<ReferenceConfigurationStrategy>();
					   	}
	   					refs.add(new SwapReferenceConfigurationStrategy(hmObjects.get("«(referenceSwap.object as RandomTypeSelection).name»"), "«(referenceSwap.object as RandomTypeSelection).type.name»", "«c.getReference().get(0).name»", "«c.getReference().get(1).name»", model));
	   					refsList.put("«referenceName», refs);
	   				}
	   				«ELSEIF referenceSwap.object instanceof SpecificObjectSelection»
	   				if (objectSelection != null && objectSelection.getObject() != null) {
	   					if (hmObjects.get("«(referenceSwap.object as SpecificObjectSelection).objSel.name»") != null) {
	   						List<ReferenceConfigurationStrategy> refs = null;
	   						if (refsList.get("«referenceName»") != null) {
				   				refs = refsList.get("«referenceName»");
		   					}
					   		else {
		   						refs = new ArrayList<ReferenceConfigurationStrategy>();
					   		}
		   					refs.add(new SwapReferenceConfigurationStrategy(objectSelection.getObject(), hmObjects.get("«(referenceSwap.object as SpecificObjectSelection).objSel.name»"), "«c.getReference().get(0).name»", "«c.getReference().get(1).name»"));
			   				refsList.put("«referenceName»", refs);
			   			} else {
							return mutations;
						}
	   				}
	   				«ENDIF»
		   		«ELSE»
				if (objectSelection != null && objectSelection.getObject() != null) {
					List<ReferenceConfigurationStrategy> refs = null;
	   				if (refsList.get("«referenceName»") != null) {
				   		refs = refsList.get("«referenceName»");
		   			}
					else {
		   				refs = new ArrayList<ReferenceConfigurationStrategy>();
					}
					refs.add(new SwapReferenceConfigurationStrategy(objectSelection.getObject(), "«c.getReference().get(0).name»", "«c.getReference().get(1).name»"));
					refsList.put("«referenceName»", refs);
	   			}
		   		«ENDIF»
		   	«ENDIF»
	   		«IF c instanceof ReferenceInit»
	   		«val referenceInit = c as ReferenceInit»
	   			«IF referenceInit.object instanceof SpecificObjectSelection»
	   				if (objectSelection != null && objectSelection.getObject() != null) {
	   					if (hmObjects.get("«(referenceInit.object as SpecificObjectSelection).objSel.name»") != null) {
							List<ReferenceConfigurationStrategy> refs = null;
	   						if (refsList.get("«referenceName»") != null) {
				   				refs = refsList.get("«referenceName»");
		   					}
							else {
				   				refs = new ArrayList<ReferenceConfigurationStrategy>();
							}
		   					refs.add(new SpecificReferenceConfigurationStrategy(model, objectSelection.getObject(), hmObjects.get("«(referenceInit.object as SpecificObjectSelection).objSel.name»"), "«referenceInit.getReference().get(0).name»"));
		   					refsList.put("«referenceName»", refs);
			   			} else {
							return mutations;
						}
	   				}
	   			«ENDIF»
	   			«IF referenceInit.object instanceof OtherTypeSelection»
	   			if (objectSelection != null && objectSelection.getObject() != null) {
	   				List<ReferenceConfigurationStrategy> refs = null;
	   				if (refsList.get("«referenceName»") != null) {
				   		refs = refsList.get("«referenceName»");
		   			}
					else {
				   		refs = new ArrayList<ReferenceConfigurationStrategy>();
					}
	   				refs.add(new RandomReferenceConfigurationStrategy(model, objectSelection.getObject(), "«referenceInit.getReference().get(0).name»", "«(referenceInit.object as OtherTypeSelection).type.name»"));
	   				refsList.put("«referenceName»", refs);
	   			}
	   			«ENDIF»
			«ENDIF»
			«IF c instanceof ReferenceAdd»
	   		«val referenceAdd = c as ReferenceAdd»
	   			«IF referenceAdd.object instanceof SpecificObjectSelection»
	   				if (objectSelection != null && objectSelection.getObject() != null) {
	   					if (hmObjects.get("«(referenceAdd.object as SpecificObjectSelection).objSel.name»") != null) {
							List<ReferenceConfigurationStrategy> refs = null;
	   						if (refsList.get("«referenceName»") != null) {
				   				refs = refsList.get("«referenceName»");
		   					}
							else {
				   				refs = new ArrayList<ReferenceConfigurationStrategy>();
							}
							refs.add(new SpecificReferenceConfigurationStrategy(model, objectSelection.getObject(), hmObjects.get("«(referenceAdd.object as SpecificObjectSelection).objSel.name»"), "«referenceAdd.getReference().get(0).name»", false));
			   				refsList.put("«referenceName»", refs);
			   			} else {
							return mutations;
						}
	   				}
	   			«ENDIF»
	   			«IF referenceAdd.object instanceof OtherTypeSelection»
	   			if (objectSelection != null && objectSelection.getObject() != null) {
					List<ReferenceConfigurationStrategy> refs = null;
					if (refsList.get("«referenceName»") != null) {
		   				refs = refsList.get("«referenceName»");
					}
					else {
		   				refs = new ArrayList<ReferenceConfigurationStrategy>();
					}
	   				refs.add(new RandomReferenceConfigurationStrategy(model, objectSelection.getObject(), "«referenceAdd.getReference().get(0).name»", "«(referenceAdd.object as OtherTypeSelection).type.name»", false));
	   				refsList.put("«referenceName»", refs);
	   			}
	   			«ENDIF»
			«ENDIF»
			«IF c instanceof ReferenceRemove»
	   		«val referenceRemove = c as ReferenceRemove»
	   			«IF referenceRemove.object instanceof SpecificObjectSelection»
	   				if (objectSelection != null && objectSelection.getObject() != null) {
	   					if (hmObjects.get("«(referenceRemove.object as SpecificObjectSelection).objSel.name»") != null) {
							List<ReferenceConfigurationStrategy> refs = null;
							if (refsList.get("«referenceName»") != null) {
				   				refs = refsList.get("«referenceName»");
							}
							else {
				   				refs = new ArrayList<ReferenceConfigurationStrategy>();
							}
		   					refs.add(new SpecificReferenceConfigurationStrategy(model, objectSelection.getObject(), hmObjects.get("«(referenceRemove.object as SpecificObjectSelection).objSel.name»"), "«referenceRemove.getReference().get(0).name»", true));
			   				refsList.put("«referenceName»", refs);
			   			} else {
							return mutations;
						}
	   				}
	   			«ENDIF»
	   			«IF referenceRemove.object instanceof OtherTypeSelection»
	   			if (objectSelection != null && objectSelection.getObject() != null) {
					List<ReferenceConfigurationStrategy> refs = null;
					if (refsList.get("«referenceName»") != null) {
		   				refs = refsList.get("«referenceName»");
					}
					else {
		   				refs = new ArrayList<ReferenceConfigurationStrategy>();
					}
	   				refs.add(new RandomReferenceConfigurationStrategy(model, objectSelection.getObject(), "«referenceRemove.getReference().get(0).name»", "«(referenceRemove.object as OtherTypeSelection).type.name»", true));
	   				refsList.put("«referenceName»", refs);
	   			}
	   			«ENDIF»
			«ENDIF»
			«IF c instanceof ReferenceAtt»
	   			«val referenceAtt = c as ReferenceAtt»
	   			«IF referenceAtt.reference != null»
					«IF referenceAtt.attribute != null»
					//NAME:«attributeName = referenceAtt.attribute.name»
					«IF referenceAtt.value != null»
					«IF (referenceAtt.eContainer as ModifyInformationMutator).object instanceof SpecificObjectSelection»
					EObject refObjectSelected = null;
					if (hmObjects.get("«((referenceAtt.eContainer as ModifyInformationMutator).object as SpecificObjectSelection).objSel.name»") != null) {
						for (EReference ref : hmObjects.get("«((referenceAtt.eContainer as ModifyInformationMutator).object as SpecificObjectSelection).objSel.name»").eClass().getEReferences()) {
							if (ref.getName().equals("«referenceAtt.reference.get(0).name»")) {
								refObjectSelected = (EObject) hmObjects.get("«((referenceAtt.eContainer as ModifyInformationMutator).object as SpecificObjectSelection).objSel.name»").eGet(ref);
								break;
							}
						}
					}
					«ELSEIF (referenceAtt.eContainer as ModifyInformationMutator).object instanceof RandomTypeSelection»
					EObject refObjectSelected = null;
					if (objectSelection != null) {
						if (objectSelection.getObject() != null) {
							for (EReference ref : objectSelection.getObject().eClass().getEReferences()) {
								if (ref.getName().equals("«referenceAtt.reference.get(0).name»")) {
									refObjectSelected = (EObject) objectSelection.getObject().eGet(ref);
									break;
								}
							}
						}
					}
					«ENDIF»
					if (refObjectSelected != null) {
						objsAttRef.add(refObjectSelected);
						List<ReferenceConfigurationStrategy> attsRef = null;
						if (attsRefList.get("«attributeName»") != null) {
		   					attsRef = attsRefList.get("«attributeName»");
						}
						else {
			   				attsRef = new ArrayList<ReferenceConfigurationStrategy>();
						}
						attsRef.add(«referenceAtt.value.method(true)»);
						attsRefList.put("«attributeName»", attsRef);
					}
					«ENDIF»
					«ENDIF»
		   		«ENDIF»
		   	«ENDIF»
		«ENDFOR»
		«IF mut.object instanceof CompleteTypeSelection»
	   	for (ObSelectionStrategy objectSelection : listSelection) {
	   		ModifyInformationMutator mut = new ModifyInformationMutator(model, packages, objectSelection, attsList, refsList, objsAttRef, attsRefList);
	   		//INC COUNTER: «nMutation++»
	   		if (mut != null) {
	   			mut.setId("m«nMutation»");
				mutations.add(mut);
			}
	   	}
	   	«ELSE»
	   	if (objectSelection != null) {
	   		ModifyInformationMutator mut = new ModifyInformationMutator(model, packages, objectSelection, attsList, refsList, objsAttRef, attsRefList);
	   		//INC COUNTER: «nMutation++»
	   		if (mut != null) {
	   			mut.setId("m«nMutation»");
				mutations.add(mut);
			}
	   	}
		«ENDIF»
		//END MODIFY INFORMATION «methodName»
	«ENDIF»
	«IF mut instanceof CreateObjectMutator»
		//CREATE OBJECT «methodName»
		«IF mut.container == null»
			ArrayList<EObject> containers = ModelManager.getParentObjects(packages, model, "«mut.type.name»");
			EObject container = containers.get(ModelManager.getRandomIndex(containers));
			ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);
			SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
		«ELSE»
			«IF mut.container instanceof RandomTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as RandomTypeSelection).type.name»");
				EObject container = rts.getObject();
				ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);
				«IF mut.container.refType != null»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
				«ELSE»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
			«ENDIF»
			«IF mut.container instanceof CompleteTypeSelection»
				«/* THE SAME AS RANDOM */»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as CompleteTypeSelection).type.name»");
				EObject container = rts.getObject();
				ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, container);
				«IF mut.container.refType != null»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
				«ELSE»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
			«ENDIF»
			«IF mut.container instanceof SpecificObjectSelection»
				ObSelectionStrategy containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
				«IF mut.container.refType != null»
					SpecificReferenceSelection referenceSelection = null;
					if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
				«ELSE»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
			«ENDIF»
			«IF mut.container instanceof SpecificClosureSelection»
				ObSelectionStrategy containerSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"), "«(mut.container as SpecificClosureSelection).refType.name»");
				«IF mut.container.refType != null»
					SpecificReferenceSelection referenceSelection = null;
					if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
				«ELSE»
					SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
			«ENDIF»
		«ENDIF»
		HashMap<String, AttributeConfigurationStrategy> atts = new HashMap<String, AttributeConfigurationStrategy>();
		ObSelectionStrategy objectSelection = null;
		«FOR c : mut.attributes»
			«c.method(false, false)»
		«ENDFOR»
		HashMap<String, ObSelectionStrategy> refs = new HashMap<String, ObSelectionStrategy>();
		«FOR c : mut.references»
			«c.method»
		«ENDFOR»
		CreateObjectMutator mut = new CreateObjectMutator(model, packages, referenceSelection, containerSelection, atts, refs, "«mut.type.name»");
		//INC COUNTER: «nMutation++»
		if (mut != null) {
			mut.setId("m«nMutation»");
			mutations.add(mut);
		}
		//END CREATE OBJECT «methodName»
	«ENDIF»	
	«IF mut instanceof SelectObjectMutator»
	//SELECT OBJECT «methodName»
		ObSelectionStrategy containerSelection = null;
		SpecificReferenceSelection referenceSelection = null;
		«IF mut.object instanceof RandomTypeSelection || mut.object instanceof CompleteTypeSelection»
			«IF mut.container == null»
			«IF mut.object instanceof RandomTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»");
			«ENDIF»
			«IF mut.object instanceof CompleteTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
			«ENDIF»
			«ELSE»
				«IF mut.container instanceof RandomTypeSelection»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as RandomTypeSelection).type.name»");
					EObject container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
					«IF mut.container.refType != null»
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
					«ELSE»
						referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
					«ENDIF»
				«ELSEIF mut.container instanceof CompleteTypeSelection»
					«/* THE SAME AS RANDOM */»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as CompleteTypeSelection).type.name»");
					EObject container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
					«IF mut.container.refType != null»
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
					«ELSE»
						referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
					«ENDIF»
				«ELSEIF mut.container instanceof SpecificObjectSelection»
					if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
						containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   			} else {
		   				if (hmList.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
		   					containerSelection = new SpecificObjectSelection(packages, model, hmList.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   				}
		   				else {
							return mutations;
						}
					}
					«IF mut.container.refType != null»
						if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
							referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
			   			} else {
			   				return mutations;
						}
					«ELSE»
						referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
					«ENDIF»
				«ELSEIF mut.container instanceof SpecificClosureSelection»
					if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
						containerSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"), "«(mut.container as SpecificClosureSelection).refType.name»");
		   			} else {
						return mutations;
					}
					«IF mut.container.refType != null»
						if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
							referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"));
			   			} else {
							return mutations;
						}
					«ELSE»
						referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
					«ENDIF»
				«ENDIF»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«mut.object.type.name»", referenceSelection, containerSelection);	
				«IF ((mut.object.expression == null) && (mut.container.expression == null))»
					EObject object = rts.getObject();
				«ENDIF»
			«ENDIF»
			«IF ((mut.object.expression == null) && (mut.container == null))»
				EObject object = rts.getObject();
			«ENDIF»
			
			«IF (mut.object.expression != null)»
				«IF (mut.container == null)»
				List<EObject> objects = rts.getObjects();
				//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
				//EXPRESSION LEVEL: «nExpression = 0»
				//EXPRESSION LEVEL: «expressionList.add(0)»
				Expression exp«expressionList.get(0)» = new Expression();
				«mut.object.expression.method»
   				List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
				«IF mut.object instanceof RandomTypeSelection»
				EObject object = null;
				if (selectedObjects.size() > 0) {
					object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
				}
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
				objects = selectedObjects;
				«ENDIF»
				«ELSEIF (mut.container.expression == null)»
				List<EObject> objects = rts.getObjects();
				//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
				//EXPRESSION LEVEL: «nExpression = 0»
				//EXPRESSION LEVEL: «expressionList.add(0)»
				Expression exp«expressionList.get(0)» = new Expression();
				«mut.object.expression.method»
   				List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
   				«IF mut.object instanceof RandomTypeSelection»
				EObject object = null;
				if (selectedObjects.size() > 0) {
					object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
				}
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
				objects = selectedObjects;
				«ENDIF»
				«ENDIF»
			«ENDIF»
			«IF (mut.object.expression == null)»
				«IF ((mut.container != null) && (mut.container.expression != null))»
				List<EObject> objects = rts.getObjects();
				//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
				//EXPRESSION LEVEL: «nExpression = 0»
				//EXPRESSION LEVEL: «expressionList.add(0)»
				Expression exp«expressionList.get(0)» = new Expression();
				«mut.container.expression.method»
   				List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
   				«IF mut.object instanceof RandomTypeSelection»
				EObject object = null;
				if (selectedObjects.size() > 0) {
					object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
				}
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
				objects = selectedObjects;
				«ENDIF»
				«ENDIF»
			«ENDIF»
			«IF mut.object instanceof RandomTypeSelection»
			ObSelectionStrategy objectSelection = null; 
			if (object != null) {
				objectSelection = new SpecificObjectSelection(packages, model, object);
			}
			«ENDIF»
			«ELSEIF mut.object instanceof CompleteTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
				EObject object = rts.getObject();
				ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object);
			«ELSEIF mut.object instanceof SpecificObjectSelection»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
					objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSEIF mut.object instanceof SpecificClosureSelection»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»") != null) {
					objectSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»"), "«(mut.object as SpecificClosureSelection).refType.name»");
	   			} else {
					return mutations;
				}
			«ELSE»
				ArrayList<EObject> objects = ModelManager.getParentObjects(packages, model, "«mut.type.name»");
				EObject container = containers.get(ModelManager.getRandomIndex(objects));
				ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object);
			«ENDIF»
			«IF mut.object instanceof CompleteTypeSelection»
			for (EObject obj : objects) {
				SelectObjectMutator mut = new SelectObjectMutator(model, packages, referenceSelection, containerSelection, obj);
			   	//INC COUNTER: «nMutation++»
			   	if (mut != null) {
			   		mut.setId("m«nMutation»");
					mutations.add(mut);
				}
			}
			«ELSE»
			SelectObjectMutator mut = new SelectObjectMutator(model, packages, referenceSelection, containerSelection, objectSelection);
			//INC COUNTER: «nMutation++»
			if (mut != null) {
				mut.setId("m«nMutation»");
				mutations.add(mut);
			}
			«ENDIF»
			//END SELECT OBJECT «methodName»
		«ENDIF»
		«IF mut instanceof SelectSampleMutator»
 		//SELECT SAMPLE OBJECT «methodName»
		SpecificReferenceSelection referenceSelection = null;
		«IF mut.object instanceof RandomTypeSelection || mut.object instanceof CompleteTypeSelection»
			«IF mut.object instanceof RandomTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»");
			«ENDIF»
			«IF mut.object instanceof CompleteTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
			«ENDIF»
			«IF (mut.object.expression == null)»
				EObject object = rts.getObject();
			«ELSE»
				List<EObject> objects = rts.getObjects();
				//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
				//EXPRESSION LEVEL: «nExpression = 0»
				//EXPRESSION LEVEL: «expressionList.add(0)»
				Expression exp«expressionList.get(0)» = new Expression();
				«mut.object.expression.method»
				List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
				«IF mut.object instanceof RandomTypeSelection»
				EObject object = null;
				if (selectedObjects.size() > 0) {
					object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
				}
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
				objects = selectedObjects;
				«ENDIF»
			«ENDIF»
		«IF mut.object instanceof RandomTypeSelection»
		ObSelectionStrategy objectSelection = null; 
		if (object != null) {
			objectSelection = new SpecificObjectSelection(packages, model, object);
		}
		«ENDIF»
		«ELSEIF mut.object instanceof CompleteTypeSelection»
			RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
			EObject object = rts.getObject();
			ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object);
		«ELSEIF mut.object instanceof SpecificObjectSelection»
			ObSelectionStrategy objectSelection = null;
			if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
				objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
   			} else {
   				if (hmList.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
   					objectSelection = new SpecificObjectSelection(packages, model, hmList.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
   				}
   				else {
					return mutations;
				}
			}
		«ELSEIF mut.object instanceof SpecificClosureSelection»
			ObSelectionStrategy objectSelection = null;
			if (hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»") != null) {
				objectSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»"), "«(mut.object as SpecificClosureSelection).refType.name»");
   			} else {
				return mutations;
			}
		«ELSE»
			ArrayList<EObject> objects = ModelManager.getParentObjects(packages, model, "«mut.type.name»");
			EObject container = containers.get(ModelManager.getRandomIndex(objects));
			ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object);
		«ENDIF»
		«IF mut.object.refType != null»
			referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.object.refType.name»", objectSelection.getObject());
		«ELSE»
			referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
		«ENDIF»
		List<String> features = new ArrayList<String>();
		«IF mut.clause == SampleClause.EQUALS»
		boolean equals = true;
		«ENDIF»
		«IF mut.clause == SampleClause.DISTINCT»
		boolean equals = false;
		«ENDIF»
		«IF mut.features.size > 0»
		«FOR EStructuralFeature feature : mut.features»
		if (!features.contains("«feature.name»")) {
			features.add("«feature.name»");	
		}
		«ENDFOR»
		«ELSE»
		equals = false;
		«ENDIF»
		«IF mut.object.expression != null»
		«IF mut.object.expression.first instanceof ReferenceEvaluation»
		//«var ReferenceEvaluation ev = mut.object.expression.first as ReferenceEvaluation»
		if (!features.contains("«ev.name.name»")) {
			features.add("«ev.name.name»");
		}
		«ENDIF»
		«IF mut.object.expression.first instanceof AttributeEvaluation»
		//«var AttributeEvaluation ev = mut.object.expression.first as AttributeEvaluation»
		if (!features.contains("«ev.name.name»")) {
			features.add("«ev.name.name»");
		}
		«ENDIF»
		«IF mut.object.expression.second != null && mut.object.expression.second.size > 0»
		«FOR ev : mut.object.expression.second»
		«IF ev instanceof ReferenceEvaluation»
		if (!features.contains("«ev.name.name»")) {
			features.add("«ev.name.name»");
		}
		«ENDIF»
		«IF ev instanceof AttributeEvaluation»
		if (!features.contains("«ev.name.name»")) {
			features.add("«ev.name.name»");
		}
		«ENDIF»
		«ENDFOR»
		«ENDIF»
		«ENDIF»
		SelectSampleMutator mut = new SelectSampleMutator(model, packages, referenceSelection, objectSelection, equals, features);
		//INC COUNTER: «nMutation++»
		if (mut != null) {
			mut.setId("m«nMutation»");
			mutations.add(mut);
		}
		//END SELECT SAMPLE OBJECT «methodName»
		«ENDIF»
		«IF mut instanceof CloneObjectMutator»
			//CLONE OBJECT «methodName»
			«IF mut.object instanceof RandomTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»");
				«IF mut.object.expression == null»
					EObject object = rts.getObject();
				«ELSE»
					List<EObject> objects = rts.getObjects();
	   				//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
	   				//EXPRESSION LEVEL: «nExpression = 0»
	   				//EXPRESSION LEVEL: «expressionList.add(0)»
	   				Expression exp«expressionList.get(0)» = new Expression();
	   				«mut.object.expression.method»
   					List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
					EObject object = null;
					if (selectedObjects.size() > 0) {
						object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
					}
				«ENDIF»
				ObSelectionStrategy objectSelection = null; 
				if (object != null) {
					objectSelection = new SpecificObjectSelection(packages, model, object);
				}
			«ELSEIF mut.object instanceof CompleteTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
				EObject object = rts.getObject();
				ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, object»);
			«ELSEIF mut.object instanceof SpecificObjectSelection»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
					objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
	   			} else {
					if (hmList.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
   						objectSelection = new SpecificObjectSelection(packages, model, hmList.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
   					}
   					else {
						return mutations;
					}
				}
			«ELSEIF mut.object instanceof SpecificClosureSelection»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»") != null) {
					objectSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.object as SpecificClosureSelection).objSel.name»"), "«(mut.object as SpecificClosureSelection).refType.name»");
	   			} else {
					return mutations;
				}
			«ENDIF»
			EObject container = null;
			ObSelectionStrategy containerSelection = null;
			if (objectSelection != null) {
			«IF mut.container == null»
				container = ModelManager.getContainer(model, objectSelection.getObject());
				containerSelection = new SpecificObjectSelection(packages, model, container);
			«ELSE»
				«IF mut.container instanceof RandomTypeSelection»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as RandomTypeSelection).type.name»");
					container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
				«ENDIF»
				«IF mut.container instanceof CompleteTypeSelection»
					«/* THE SAME AS RANDOM */»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as CompleteTypeSelection).type.name»");
					container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
				«ENDIF»
				«IF mut.container instanceof SpecificObjectSelection»
					«IF mut.refType != null»
					if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
						containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
					«ENDIF»
				«ENDIF»
				«IF mut.container instanceof SpecificClosureSelection»
					«IF mut.refType != null»
					if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
						containerSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"), "«(mut.container as SpecificClosureSelection).refType.name»");
		   			} else {
						return mutations;
					}
					«ENDIF»
				«ENDIF»
			«ENDIF»
			}
			«IF mut.refType != null»
				SpecificReferenceSelection referenceSelection = null;
				«IF mut.container instanceof SpecificObjectSelection»
				if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
					referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.refType.name»", hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
				«ELSEIF mut.container instanceof SpecificClosureSelection»
				if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
					referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.refType.name»", hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
				«ELSE»
				SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.refType.name»", containerSelection);
				«ENDIF»
			«ELSE»
				SpecificReferenceSelection referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
			«ENDIF»
			HashMap<String, AttributeConfigurationStrategy> atts = new HashMap<String, AttributeConfigurationStrategy>();
			«FOR c : mut.attributes»
				«c.method(false, false)»
			«ENDFOR»
			HashMap<String, ObSelectionStrategy> refs = new HashMap<String, ObSelectionStrategy>();
			«FOR c : mut.references»
				«c.method»
			«ENDFOR»
			CloneObjectMutator mut = null;
			if (objectSelection != null && objectSelection.getObject() != null) {
			«IF mut.object instanceof SpecificObjectSelection»
			«IF (mut.object as SpecificObjectSelection).objSel instanceof SelectObjectMutator»
				mut = new CloneObjectMutator(model, packages, objectSelection.getObject(), «mut.contents», referenceSelection, containerSelection, atts, refs, "«((mut.object as SpecificObjectSelection).objSel as SelectObjectMutator).object.type.name»");
			«ENDIF»
			«IF (mut.object as SpecificObjectSelection).objSel instanceof CreateObjectMutator»
				mut = new CloneObjectMutator(model, packages, objectSelection.getObject(), «mut.contents», referenceSelection, containerSelection, atts, refs, "«((mut.object as SpecificObjectSelection).objSel as CreateObjectMutator).type.name»");
			«ENDIF»
			«IF (mut.object as SpecificObjectSelection).objSel instanceof CloneObjectMutator»
				mut = new CloneObjectMutator(model, packages, objectSelection.getObject(), «mut.contents», referenceSelection, containerSelection, atts, refs, "«((mut.object as SpecificObjectSelection).objSel as CloneObjectMutator).object.type.name»");
			«ENDIF»
			«ENDIF»
			«IF mut.object instanceof RandomTypeSelection»
				mut = new CloneObjectMutator(model, packages, objectSelection.getObject(), «mut.contents», referenceSelection, containerSelection, atts, refs, "«(mut.object as RandomTypeSelection).type.name»");
			«ENDIF»
			}
		  	//INC COUNTER: «nMutation++»
		  	if (mut != null) {
		   		mut.setId("m«nMutation»");
				mutations.add(mut);
			}
			//END CLONE OBJECT «methodName»
		«ENDIF»	
		«IF mut instanceof ModifySourceReferenceMutator»
		//MODIFY SOURCE REFERENCE «methodName»
			«IF mut.source instanceof RandomTypeSelection»
				RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, "«(mut.source as RandomTypeSelection).type.name»");
			«ELSEIF mut.source instanceof CompleteTypeSelection»
				List<EObject> objects = hmList.get("«(mut.source as CompleteTypeSelection).type.name»");
				List<ObSelectionStrategy> listSourceSelection = new ArrayList<ObSelectionStrategy>();
				for (EObject obj : objects) {
					ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);
					listSourceSelection.add(objectSelection);
				}
			«ELSEIF mut.source instanceof SpecificObjectSelection»
				ObSelectionStrategy sourceSelection = null;
				if (hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»") != null) {
					sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			«IF mut.newSource instanceof RandomTypeSelection»
				RandomTypeSelection newSourceSelection = new RandomTypeSelection(packages, model, "«(mut.newSource as RandomTypeSelection).type.name»");
			«ELSEIF mut.newSource instanceof OtherTypeSelection»
				EObject otherSourceSelection = null; 
				«IF mut.source instanceof CompleteTypeSelection»
					otherSourceSelection = sourceSelection.get(0).getObject();
				«ELSE»
					otherSourceSelection = sourceSelection.getObject();
				«ENDIF»
				Object otherRef = null;
				if (otherSourceSelection != null) {
					for (EReference ref : otherSourceSelection.eClass().getEAllReferences()) {
						if (ref.getName().equals("«mut.refType.name»")) {
							otherRef = otherSourceSelection.eGet(ref);
							break;
						}
					}
				}
				OtherTypeSelection newSourceSelection = new OtherTypeSelection(packages, model, "«(mut.newSource as OtherTypeSelection).type.name»", otherRef);
			«ELSEIF mut.newSource instanceof CompleteTypeSelection»
				«/*THE SAME AS RANDOM*/»
				RandomTypeSelection newSourceSelection = new RandomTypeSelection(packages, model, "«(mut.newSource as CompleteTypeSelection).type.name»");
			«ELSEIF mut.newSource instanceof SpecificObjectSelection»
				ObSelectionStrategy newSourceSelection = null;
				if (hmObjects.get("«(mut.newSource as SpecificObjectSelection).objSel.name»") != null) {
					newSourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.newSource as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy newSourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			«IF mut.source instanceof CompleteTypeSelection»
   				for (ObSelectionStrategy sourceSelection : listSourceSelection) {
					ModifySourceReferenceMutator mut = new ModifySourceReferenceMutator(model, packages, sourceSelection, newSourceSelection, "«mut.refType.name»");
				   	//INC COUNTER: «nMutation++»
				   	if (mut != null) {
				   		mut.setId("m«nMutation»");
						mutations.add(mut);
					}
				}
			«ELSE»
				ModifySourceReferenceMutator mut = new ModifySourceReferenceMutator(model, packages, sourceSelection, newSourceSelection, "«mut.refType.name»");
			   	//INC COUNTER: «nMutation++»
			   	if (mut != null) {
			   		mut.setId("m«nMutation»");
					mutations.add(mut);
				}
		   	«ENDIF»
			//END MODIFY SOURCE REFERENCE «methodName»
		«ENDIF»
		«IF mut instanceof ModifyTargetReferenceMutator»
		//MODIFY TARGET REFERENCE «methodName»
			«IF mut.source instanceof RandomTypeSelection»
				RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, "«(mut.source as RandomTypeSelection).type.name»");			
			«ELSEIF mut.source instanceof CompleteTypeSelection»
				List<EObject> objects = hmList.get("«(mut.source as CompleteTypeSelection).type.name»");
				List<ObSelectionStrategy> listSourceSelection = new ArrayList<ObSelectionStrategy>();
				for (EObject obj : objects) {
					ObSelectionStrategy objectSelection = new SpecificObjectSelection(packages, model, obj);
					listSourceSelection.add(objectSelection);
				}
			«ELSEIF mut.source instanceof SpecificObjectSelection»
				ObSelectionStrategy sourceSelection = null;
				if (hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»") != null) { 
					sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			«IF mut.newTarget instanceof RandomTypeSelection»
				RandomTypeSelection newTargetSelection = new RandomTypeSelection(packages, model, "«(mut.newTarget as RandomTypeSelection).type.name»");
			«ELSEIF mut.newTarget instanceof OtherTypeSelection»
				EObject otherSourceSelection = null; 
				«IF mut.source instanceof CompleteTypeSelection»
					otherSourceSelection = sourceSelection.get(0).getObject();
				«ELSE»
					otherSourceSelection = sourceSelection.getObject();
				«ENDIF»
				Object otherRef = null;
				if (otherSourceSelection != null) {
					for (EReference ref : otherSourceSelection.eClass().getEAllReferences()) {
						if (ref.getName().equals("«mut.refType.name»")) {
							otherRef = otherSourceSelection.eGet(ref);
							break;
						}
					}
				}
				OtherTypeSelection newTargetSelection = new OtherTypeSelection(packages, model, "«(mut.newTarget as OtherTypeSelection).type.name»", otherRef);
			«ELSEIF mut.newTarget instanceof CompleteTypeSelection»
				RandomTypeSelection newTargetSelection = new RandomTypeSelection(packages, model, "«(mut.newTarget as CompleteTypeSelection).type.name»");			
			«ELSEIF mut.newTarget instanceof SpecificObjectSelection»
				ObSelectionStrategy newTargetSelection = null;
				if (hmObjects.get("«(mut.newTarget as SpecificObjectSelection).objSel.name»") != null) {
					newTargetSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.newTarget as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy newTargetSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			«IF mut.source instanceof CompleteTypeSelection»
   				for (ObSelectionStrategy sourceSelection : listSourceSelection) {
   					mutations.add(ModifyTargetReferenceMutator(model, packages, sourceSelection, newTargetSelection, "«mut.refType.name»"));
	   			}
   			«ELSE»
				ModifyTargetReferenceMutator mut = new ModifyTargetReferenceMutator(model, packages, sourceSelection, newTargetSelection, "«mut.refType.name»");
			   	//INC COUNTER: «nMutation++»
			   	if (mut != null) {
			   		mut.setId("m«nMutation»");
					mutations.add(mut);
				}
		«ENDIF»
		//END MODIFY TARGET REFERENCE «methodName»
		«ENDIF»
		«IF mut instanceof CreateReferenceMutator»
		//CREATE REFERENCE «methodName»
			«IF mut.source instanceof RandomTypeSelection»
				RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, "«(mut.source as RandomTypeSelection).type.name»");			
			«ELSEIF mut.source instanceof CompleteTypeSelection»
				RandomTypeSelection sourceSelection = new RandomTypeSelection(packages, model, "«(mut.source as CompleteTypeSelection).type.name»");
			«ELSEIF mut.source instanceof SpecificObjectSelection»
				ObSelectionStrategy sourceSelection = null;
				if (hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»") != null) {
					sourceSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.source as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy sourceSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			«IF mut.target instanceof RandomTypeSelection»
				RandomTypeSelection targetSelection = new RandomTypeSelection(packages, model, "«(mut.target as RandomTypeSelection).type.name»");			
			«ELSEIF mut.target instanceof CompleteTypeSelection»
				RandomTypeSelection targetSelection = new RandomTypeSelection(packages, model, "«(mut.target as CompleteTypeSelection).type.name»");
			«ELSEIF mut.target instanceof SpecificObjectSelection»
				ObSelectionStrategy targetSelection = null;
				if (hmObjects.get("«(mut.target as SpecificObjectSelection).objSel.name»") != null) {
					targetSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.target as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
			«ELSE»
				ObSelectionStrategy targetSelection = new SpecificObjectSelection(packages, model, (EObject) null);
			«ENDIF»
			CreateReferenceMutator mut = new CreateReferenceMutator(model, packages, sourceSelection, targetSelection, "«mut.refType.name»");
		   	//INC COUNTER: «nMutation++»
		   	if (mut != null) {
		   		mut.setId("m«nMutation»");
				mutations.add(mut);
			}
			//END CREATE REFERENCE «methodName»
		«ENDIF»
		«IF mut instanceof RemoveObjectMutator»
		// REMOVE OBJECT «methodName»
			ObSelectionStrategy containerSelection = null;
			SpecificReferenceSelection referenceSelection = null;
			«IF mut.object instanceof RandomTypeSelection || mut.object instanceof CompleteTypeSelection»
				«IF mut.container == null»
				«IF mut.object instanceof RandomTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»");
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
				RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
				«ENDIF»
				«ELSE»
					«IF mut.container instanceof RandomTypeSelection»
						RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as RandomTypeSelection).type.name»");
						EObject container = rts.getObject();
						containerSelection = new SpecificObjectSelection(packages, model, container);
						«IF mut.container.refType != null»
							referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
						«ELSE»
							referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
						«ENDIF»
					«ELSEIF mut.container instanceof CompleteTypeSelection»
						«/* THE SAME AS RANDOM */»
						RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as CompleteTypeSelection).type.name»");
						EObject container = rts.getObject();
						containerSelection = new SpecificObjectSelection(packages, model, container);
						«IF mut.container.refType != null»
							referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
						«ELSE»
							referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
						«ENDIF»
					«ELSEIF mut.container instanceof SpecificObjectSelection»
						if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
							containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
			   			} else {
							return mutations;
						}
						«IF mut.container.refType != null»
							if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
								referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
				   			} else {
								return mutations;
							}
						«ELSE»
							referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
						«ENDIF»
					«ENDIF»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.object as RandomTypeSelection).type.name»", referenceSelection, containerSelection);
					«IF ((mut.object.expression == null) && (mut.container.expression == null))»
						EObject object = rts.getObject();
					«ENDIF»	
				«ENDIF»
				«IF ((mut.object.expression == null) && (mut.container == null))»
					EObject object = rts.getObject();
				«ENDIF»
				«IF mut.object.expression != null»
					«IF mut.container == null»
					List<EObject> objects = rts.getObjects();
   					//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
   					//EXPRESSION LEVEL: «nExpression = 0»
   					//EXPRESSION LEVEL: «expressionList.add(0)»
   					Expression exp«expressionList.get(0)» = new Expression();
   					«mut.object.expression.method»
					List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
					«IF mut.object instanceof RandomTypeSelection»
					EObject object = null;
					if (selectedObjects.size() > 0) {
						object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
					}
					«ENDIF»
					«IF mut.object instanceof CompleteTypeSelection»
					objects = selectedObjects;
					«ENDIF»
					«ELSEIF mut.container.expression == null»
					List<EObject> objects = rts.getObjects();
					//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
					//EXPRESSION LEVEL: «nExpression = 0»
					//EXPRESSION LEVEL: «expressionList.add(0)»
					Expression exp«expressionList.get(0)» = new Expression();
					«mut.object.expression.method»
   					List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
					«IF mut.object instanceof RandomTypeSelection»
					EObject object = null;
					if (selectedObjects.size() > 0) {
						object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
					}
					«ENDIF»
					«IF mut.object instanceof CompleteTypeSelection»
					objects = selectedObjects;
					«ENDIF»
					«ENDIF»
				«ENDIF»
				«IF (mut.object.expression == null)»
					«IF ((mut.container != null) && (mut.container.expression != null))»
					List<EObject> objects = rts.getObjects();
					//EXPRESSION LIST: «expressionList = new ArrayList<Integer>()»
					//EXPRESSION LEVEL: «nExpression = 0»
					//EXPRESSION LEVEL: «expressionList.add(0)»
					Expression exp«expressionList.get(0)» = new Expression();
					«mut.container.expression.method»
   					List<EObject> selectedObjects = evaluate(objects, exp«expressionList.get(0)»);
					«IF mut.object instanceof RandomTypeSelection»
					EObject object = null;
					if (selectedObjects.size() > 0) {
						object = selectedObjects.get(ModelManager.getRandomIndex(selectedObjects));
					}
					«ENDIF»
					«IF mut.object instanceof CompleteTypeSelection»
					objects = selectedObjects;
					«ENDIF»
					«ENDIF»
				«ENDIF»
				«IF mut.object instanceof RandomTypeSelection»
				ObSelectionStrategy objectSelection = null; 
					if (object != null) {
					objectSelection = new SpecificObjectSelection(packages, model, object);
				}
				«ENDIF»
				«ELSEIF mut.object instanceof SpecificObjectSelection»
				«IF mut.container == null»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
					objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"));
	   			} else {
					return mutations;
				}
				«ELSE»
				«IF mut.container instanceof RandomTypeSelection»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as RandomTypeSelection).type.name»");
					EObject container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
				«IF mut.container.refType != null»
					referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
				«ELSE»
					referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
				«ELSEIF mut.container instanceof CompleteTypeSelection»
					«/* THE SAME AS RANDOM */»
					RandomTypeSelection rts = new RandomTypeSelection(packages, model, "«(mut.container as CompleteTypeSelection).type.name»");
					EObject container = rts.getObject();
					containerSelection = new SpecificObjectSelection(packages, model, container);
				«IF mut.container.refType != null»
					referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", containerSelection);
				«ELSE»
					referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
				«ELSEIF mut.container instanceof SpecificObjectSelection»
					if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
						containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
				«IF mut.container.refType != null»
					if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
				«ELSE»
					referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
				«ELSEIF mut.container instanceof SpecificClosureSelection»
					if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
						containerSelection = new SpecificClosureSelection(packages, model, hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"), "«(mut.container as SpecificClosureSelection).refType.name»");
		   			} else {
						return mutations;
					}
				«IF mut.container.refType != null»
					if (hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»") != null) {
						referenceSelection = new SpecificReferenceSelection(packages, model, "«mut.container.refType.name»", hmObjects.get("«(mut.container as SpecificClosureSelection).objSel.name»"));
		   			} else {
						return mutations;
					}
				«ELSE»
					referenceSelection = new SpecificReferenceSelection(packages, model, null, null);
				«ENDIF»
				«ENDIF»
				ObSelectionStrategy objectSelection = null;
				if (hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»") != null) {
					objectSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.object as SpecificObjectSelection).objSel.name»"), referenceSelection, containerSelection);
	   			} else {
					return mutations;
				}
				«ENDIF»
				«ELSEIF mut.object instanceof CompleteTypeSelection»
					«IF mut.object.expression == null»
						CompleteTypeSelection objectsSelection = new CompleteTypeSelection(packages, model, "«(mut.object as CompleteTypeSelection).type.name»");
						List<EObject> objects = objectsSelection.getObjects();
					«ELSE»
						List<EObject> objects = selectedObjects;
					«ENDIF»
				«ENDIF»
				«IF mut.object instanceof CompleteTypeSelection»
					if (objects != null) {
						for (EObject obj : objects) {
							RemoveObjectMutator mut = new RemoveObjectMutator(model, packages, obj, referenceSelection, containerSelection);
					   		//INC COUNTER: «nMutation++»
					   		if (mut != null) {
					   			mut.setId("m«nMutation»");
								mutations.add(mut);
							}
						}
					}
				«ELSE»
					RemoveObjectMutator mut = new RemoveObjectMutator(model, packages, objectSelection, referenceSelection, containerSelection);
			   		//INC COUNTER: «nMutation++»
			   		if (mut != null) {
				   		mut.setId("m«nMutation»");
						mutations.add(mut);
					}
			«ENDIF»
			//END REMOVE OBJECT «methodName»
		«ENDIF»
		«IF mut instanceof RemoveRandomReferenceMutator»
		// REMOVE RANDOM REFERENCE «methodName»
			RandomTypeSelection containerSelection = new RandomTypeSelection(packages, model, "«mut.type.name»");			
			RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, containerSelection, "«mut.refType.name»");
		  	//INC COUNTER: «nMutation++»
		  	if (mut != null) {
		  		mut.setId("m«nMutation»");
				mutations.add(mut);
			}
				
			//END REMOVE RANDOM REFERENCE «methodName»
		«ENDIF»
		«IF mut instanceof RemoveSpecificReferenceMutator»
		// REMOVE SPECIFIC REFERENCE «methodName»
			ObSelectioNStrategy containerSelection = null;
			«IF mut.container instanceof RandomTypeSelection»
				if (hmObjects.get("«(mut.container as RandomTypeSelection).type.name»") != null) {
					containerSelection = new RandomTypeSelection(packages, model, hmObjects.get("«(mut.container as RandomTypeSelection).type.name»"));
				} else {
					return mutations;
				}
			«ELSEIF mut.container instanceof SpecificObjectSelection»
				if (hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»") != null) {
					containerSelection = new SpecificObjectSelection(packages, model, hmObjects.get("«(mut.container as SpecificObjectSelection).objSel.name»"));
				} else {
					return mutations;
				}
			«ELSEIF mut.container instanceof CompleteTypeSelection»
				if (hmObjects.get("«(mut.container as CompleteTypeSelection).type.name»") != null) {
					containerSelection = new CompleteTypeSelection(packages, model, hmObjects.get("«(mut.container as CompleteTypeSelection).type.name»"));
				} else {
					return mutations;
				}
			«ENDIF»
			RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, containerSelection, "«mut.refType.name»");
		   	//INC COUNTER: «nMutation++»
		   	if (mut != null) {
		   		mut.setId("m«nMutation»");
				mutations.add(mut);
			}
		//END REMOVE SPECIFIC REFERENCE «methodName»
		«ENDIF»
		«IF mut instanceof RemoveCompleteReferenceMutator»
		// REMOVE COMPLETE REFERENCE «methodName»
			CompleteTypeSelection containersSelection = new CompleteTypeSelection(packages, model, "«mut.type.name»");
			List<EObject> objects = containersSelection.getObjects();
			for (EObject obj : objects) {
				RemoveReferenceMutator mut = new RemoveReferenceMutator(model, packages, obj, "«mut.refType.name»");
			   	//INC COUNTER: «nMutation++»
			   	if (mut != null) {
			   		mut.setId("m«nMutation»");
					mutations.add(mut);
				}
			}
		//END REMOVE COMPLETE REFERENCE «methodName»
		«ENDIF»
			return mutations;	
		}
	'''
	
	def compositeMethod(CompositeMutator mut)'''
		«IF mut.eContainer instanceof MutatorEnvironment»
		//INC COUNTER: «nMutation++»
		«ENDIF»
		private ArrayList<Mutator> «compositeMethodName»(ArrayList<EPackage> packages, Resource model, HashMap<String, EObject> hmObjects, HashMap<String, List<EObject>> hmList) throws ReferenceNonExistingException {
			ArrayList<Mutator> mutations = new ArrayList<Mutator>();
			«var localNCompositeMethod = nCompositeMethod + 1»
			«var localNMethod = nMethod + 1»
			«FOR c : mut.commands»
			«IF c instanceof CompositeMutator»
				//COMMAND: «nCompositeCommands = nCompositeCommands + 1»
				«IF c.fixed == 0»
				«IF (c.max - c.min > 0)»
				int cmax«nCompositeCommands» = getRandom(«c.max - c.min») + «c.min»;
				«ENDIF»
				«IF (c.min == 0) && (c.max == 0)»
				int cmax«nCompositeCommands» = 1;
				«ELSEIF (c.min == c.max)»
				int cmax«nCompositeCommands» = «c.min»;
				«ENDIF»
				«ELSE»
				int cmax«nCompositeCommands» = «c.fixed»;
				«ENDIF»
				for (int j«nCompositeCommands» = 0; j«nCompositeCommands» < cmax«nCompositeCommands»; j«nCompositeCommands»++) {
					//COMPOSITE METHOD NAME:«compositeMethodName = "compositeMutation" + localNCompositeMethod.toString()»
					ArrayList<Mutator> l«compositeMethodName» = «compositeMethodName»(packages, model, hmObjects, hmList);
					//COMPOSITE METHOD INC: «localNCompositeMethod++»
					if (l«compositeMethodName» != null) {
						if (l«compositeMethodName».size() > 0) {
							mutations.addAll(l«compositeMethodName»);
						}
					}
				}
				//COMPOSITE METHOD INC: «localNCompositeMethod+= ModelManager.compositeMutatorSize(c) - 1»
			«ELSE»
			//COMMAND: «nCommands = nCommands + 1»
			«IF c.fixed == 0»
			«IF (c.max - c.min > 0)»
			int max«nCommands» = getRandom(«c.max - c.min») + «c.min»;
			«ENDIF»
			«IF (c.max == 0) && (c.min == 0)»
			int max«nCommands» = 1;
			«ELSEIF (c.min == c.max)»
			int max«nCommands» = «c.min»;
			«ENDIF»
			«ELSE»
			int max«nCommands» = «c.fixed»;
			«ENDIF»
			for (int j = 0; j < max«nCommands»; j++) {
				«IF c.name != null»
				//NAME:«commandName = c.name + nCommands.toString()»
				«ELSE»
				//NAME:«commandName = nCommands.toString()»
				«ENDIF»
				//METHOD NAME:«methodName = "mutation" + localNMethod.toString()»
					
				ArrayList<Mutator> l«commandName» = «methodName»(packages, model, hmObjects, hmList);
				if (l«commandName» != null) {
					if (l«commandName».size() > 0) {
						mutations.addAll(l«commandName»);
					}
				}
			}
			//METHOD INC: «localNMethod++»
			«ENDIF»
			«ENDFOR»
			return mutations;	
		}
	'''
	def generateMethods(Mutator mut) '''
		«IF mut instanceof CompositeMutator»
			//COUNTER COMPOSITE: «nCompositeMethod = nCompositeMethod + 1»
			//COMPOSITE METHOD NAME:«compositeMethodName = "compositeMutation" + nCompositeMethod.toString()»
			«IF compositeCommands == null»
			//CREATION ARRAYLIST NUM COMMANDS: «compositeCommands = new ArrayList<String>()»
			«ENDIF»
			//ADDING NUM COMMANDS: «compositeCommands.add(compositeMethodName)»
			«mut.compositeMethod»
			«FOR c : mut.commands»
				«c.generateMethods»
			«ENDFOR»
		«ELSE»
			//COUNTER: «nMethod = nMethod + 1»
			//METHOD NAME:«methodName = "mutation" + nMethod.toString()»
			«mut.method»			
		«ENDIF»
	'''
	def registryMethod(Mutator mut)'''
	//REGISTRY COUNTER: «nRegistryMutation++»
	private AppMutation «registryMethodName»(Mutator mut, HashMap<String, EObject> hmMutator, Resource seed, List<String> mutPaths, ArrayList<EPackage> packages) {
		AppMutation appMut = null;
	«IF mut instanceof CreateObjectMutator»
		ObjectCreated cMut = AppliedMutationsFactory.eINSTANCE.createObjectCreated();
		if ((mutPaths != null) && (packages != null)) {
			try {
				Resource mutant = null;
				EObject object = null;
				for (String mutatorPath : mutPaths) {
					mutant = ModelManager.loadModel(packages, mutatorPath);
					object = ModelManager.getObject(mutant, mut.getObject());
					if (object != null) {
						System.out.println("FOUND!!!");
						break;
					}
					//Reload input
	    			try {
						mutant.unload();
						mutant.load(null); 
					} catch (Exception e) {}
				}
				if (object != null) {
					cMut.getObject().add(object);
				}
				else {
					cMut.getObject().add(mut.getObject());
				}
			} catch (ModelNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		cMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = cMut;
	«ENDIF»
	«IF mut instanceof CloneObjectMutator»
		ObjectCloned cMut = AppliedMutationsFactory.eINSTANCE.createObjectCloned();
		if (mut.getObject() != null) {
			cMut.getObject().add(mut.getObject());
		}
		cMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = cMut;
	«ENDIF»
	«IF mut instanceof RemoveObjectMutator»
		ObjectRemoved rMut = AppliedMutationsFactory.eINSTANCE.createObjectRemoved();
		System.out.println("ModelManager.getObject(seed, mut.getObject()): " + ModelManager.getObject(seed, mut.getObject()));
		if (ModelManager.getObject(seed, mut.getObject()) != null) {
			rMut.getObject().add(ModelManager.getObject(seed, mut.getObject()));
		}
		else {
			if ((mutPaths != null) && (packages != null)) {
				try {
					Resource mutant = null;
					EObject object = null;
					for (String mutatorPath : mutPaths) {
						mutant = ModelManager.loadModel(packages, mutatorPath);
						object = ModelManager.getObject(mutant, mut.getObject());
						if (object != null) {
							System.out.println("FOUND!!!");
							break;
						}
						//Reload input
	    				try {
							mutant.unload();
							mutant.load(null); 
						} catch (Exception e) {}
					}
					if (object != null) {
						rMut.getObject().add(object);
					}
					else {
						rMut.getObject().add(mut.getObject());
					}
				} catch (ModelNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		rMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = rMut;
	«ENDIF»
	«IF mut instanceof CreateReferenceMutator»
		ReferenceCreated rMut = AppliedMutationsFactory.eINSTANCE.createReferenceCreated();
		if (mut.getObject() != null) {
			rMut.getObject().add(mut.getObject());
		}
		if (((CreateReferenceMutator) mut).getReference() != null) {
			rMut.getRef().add(((CreateReferenceMutator) mut).getReference());
			rMut.setRefName(((CreateReferenceMutator) mut).getRefName());
		}
		rMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = rMut;
	«ENDIF»
	«IF mut instanceof RemoveRandomReferenceMutator»
		ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();
		List<EObject> objects = new ArrayList<EObject>();
		for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {
			if (ModelManager.getObject(seed, obj) != null) {
				objects.add(ModelManager.getObject(seed, obj));
			}
		}
		rMut.getObject().addAll(objects);
		if (((RemoveReferenceMutator) mut).getReference() != null) {
			rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());
			rMut.setRefName(((RemoveReferenceMutator) mut).getRefName());
		}
		rMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = rMut;
	«ENDIF»
	«IF mut instanceof RemoveSpecificReferenceMutator»
		ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();
		List<EObject> objects = new ArrayList<EObject>();
		for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {
			if (ModelManager.getObject(seed, obj) != null) {
				objects.add(ModelManager.getObject(seed, obj));
			}
		}
		rMut.getObject().addAll(objects);
		if (((RemoveReferenceMutator) mut).getReference() != null) {
			rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());
			rMut.setRefName(((RemoveReferenceMutator) mut).getRefName());
		}
		rMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = rMut;
	«ENDIF»
	«IF mut instanceof RemoveCompleteReferenceMutator»
		ReferenceRemoved rMut = AppliedMutationsFactory.eINSTANCE.createReferenceRemoved();
		List<EObject> objects = new ArrayList<EObject>();
		for (EObject obj : ((RemoveReferenceMutator) mut).getObjects()) {
			if (ModelManager.getObject(seed, obj) != null) {
				objects.add(ModelManager.getObject(seed, obj));
			}
		}
		rMut.getObject().addAll(objects);
		if (((RemoveReferenceMutator) mut).getReference() != null) {
			rMut.getRef().add(((RemoveReferenceMutator) mut).getReference());
			rMut.setRefName(((RemoveReferenceMutator) mut).getRefName());
		}
		rMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		appMut = rMut;
	«ENDIF»
	«IF mut instanceof ModifyInformationMutator»
			InformationChanged icMut = AppliedMutationsFactory.eINSTANCE.createInformationChanged();
			icMut.setObject(mut.getObject());
		«IF (mut as ModifyInformationMutator).attributes.size > 0»
			EList<AttributeChanged> attsMut = icMut.getAttChanges();
			Object oldAttVal = null;
			Object newAttVal = null;
			//ATTRIBUTE COUNTER: «var attCounter = 0»
		«FOR AttributeSet att : (mut as ModifyInformationMutator).attributes»
			//«var EAttribute eattfirst = att.attribute.get(0)»
			//«var EAttribute eattsec = eattfirst»
			«IF att instanceof AttributeScalar»
			AttributeChanged attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();
			attMut«attCounter».setAttName("«eattfirst.name»");
			«ENDIF»
			«IF att instanceof AttributeOperation»
			AttributeChanged attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();
			attMut«attCounter».setAttName("«eattfirst.name»");
			«ENDIF»
			«IF att instanceof AttributeSwap»
			//«eattsec = att.attribute.get(1)»
			appliedMutations.AttributeSwap attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeSwap();
			attMut«attCounter».setFirstName("«eattfirst.name»");
			if (ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getOtherObject()) != null) {
				attMut«attCounter».setAttObject(ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getOtherObject()));
			}
			attMut«attCounter».setAttName("«eattsec.name»");
			«ENDIF»
			«IF att instanceof AttributeCopy»
			//«eattsec = att.attribute.get(1)»
			AttributeChanged attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();
			attMut«attCounter».setAttName("«eattsec.name»");
			«ENDIF»
			«IF att instanceof AttributeUnset»
			AttributeChanged attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();
			attMut«attCounter».setAttName("«eattsec.name»");
			«ENDIF»
			«IF att instanceof AttributeReverse»
			AttributeChanged attMut«attCounter» = null;
			attMut«attCounter» = AppliedMutationsFactory.eINSTANCE.createAttributeChanged();
			attMut«attCounter».setAttName("«eattsec.name»");
			«ENDIF»
			oldAttVal = ((ModifyInformationMutator) mut).getOldAttValue("«eattfirst.name»");
			newAttVal = ((ModifyInformationMutator) mut).getNewAttValue("«eattsec.name»");
			if (oldAttVal != null) {
				attMut«attCounter».setOldVal(oldAttVal.toString());
			}
			if (newAttVal != null) {
				attMut«attCounter».setNewVal(newAttVal.toString());
			}
			attMut«attCounter».setDef(hmMutator.get("m«nRegistryMutation»"));
			attsMut.add(attMut«attCounter»);
			icMut.setDef(hmMutator.get("m«nRegistryMutation»"));
			//ATTRIBUTE COUNTER INC: «attCounter++»
		«ENDFOR»
		«ENDIF»
		«IF (mut as ModifyInformationMutator).references.size > 0»
			EList<ReferenceChanged> refsMut = icMut.getRefChanges();
			EObject previous = null;
			EObject next = null;
			//REFERENCE COUNTER: «var refCounter = 0»
		«FOR ReferenceSet ref : (mut as ModifyInformationMutator).references»
			«IF ref instanceof ReferenceInit || ref instanceof ReferenceAdd || ref instanceof ReferenceRemove»
			//«var EReference eref = ref.reference.get(0)»
			ReferenceChanged refMut«refCounter» = null;
			refMut«refCounter» = AppliedMutationsFactory.eINSTANCE.createReferenceChanged();
			refMut«refCounter».setRefName("«ref.reference.get(0).name»");
			refMut«refCounter».getObject().add(((ModifyInformationMutator) mut).getObject());
			«ENDIF»
			«IF ref instanceof ReferenceSwap»
			//«var ereffirst = ref.reference.get(0)»
			//«var erefsec = ref.reference.get(1)»
			appliedMutations.ReferenceSwap refMut«refCounter» = null;
			refMut«refCounter» = AppliedMutationsFactory.eINSTANCE.createReferenceSwap();
			refMut«refCounter».setFirstName("«ereffirst.name»");
			if (ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getRefObject()) != null) {
				refMut«refCounter».setRefObject(ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getRefObject()));
			}
			refMut«refCounter».setRefName("«erefsec.name»");
			refMut«refCounter».setOtherFrom(((ModifyInformationMutator) mut).getOtherSource());
			refMut«refCounter».setOtherFromName(((ModifyInformationMutator) mut).getOtherSourceName());
			refMut«refCounter».setOtherTo(((ModifyInformationMutator) mut).getOtherTarget());
			refMut«refCounter».setOtherToName(((ModifyInformationMutator) mut).getOtherTargetName());
			«ENDIF»
			«IF ref instanceof ReferenceAtt»
			//«var att = ref.attribute»
			appliedMutations.ReferenceAtt refMut«refCounter» = null;
			refMut«refCounter» = AppliedMutationsFactory.eINSTANCE.createReferenceAtt();
			refMut«refCounter».setAttName("«att.name»");
			if (ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getRefAttObject()) != null) {
				refMut«refCounter».getObject().add(ModelManager.getObject(seed, ((ModifyInformationMutator) mut).getRefAttObject()));
			}
			refMut«refCounter».setRefName("«ref.reference.get(0).name»");
			Object oldRefAttVal«refCounter» = null;
			Object newRefAttVal«refCounter» = null;
			if (((ModifyInformationMutator) mut).getOldRefAttValue("«att.name»") != null) {
				oldRefAttVal«refCounter» = ((ModifyInformationMutator) mut).getOldRefAttValue("«att.name»");
			}
			if (((ModifyInformationMutator) mut).getNewRefAttValue("«att.name»") != null) {
				newRefAttVal«refCounter» = ((ModifyInformationMutator) mut).getNewRefAttValue("«att.name»");
			}
			if (oldRefAttVal«refCounter» != null) {
				refMut«refCounter».setOldVal(oldRefAttVal«refCounter».toString());
			}
			if (newRefAttVal«refCounter» != null) {
				refMut«refCounter».setNewVal(newRefAttVal«refCounter».toString());
			}
			refMut«refCounter».setDef(hmMutator.get("m«nRegistryMutation»"));
			«ENDIF»
			previous = ((ModifyInformationMutator) mut).getPrevious();
			next = ((ModifyInformationMutator) mut).getNext();
			if (previous != null) {
				refMut«refCounter».setFrom(previous);
			}
			if (next != null) {
				refMut«refCounter».setTo(next);
			}
			refMut«refCounter».setSrcRefName(((ModifyInformationMutator) mut).getSrcRefType());
			refMut«refCounter».setDef(hmMutator.get("m«nRegistryMutation»"));
			refsMut.add(refMut«refCounter»);
			icMut.setDef(hmMutator.get("m«nRegistryMutation»"));
			//REFERENCE COUNTER INC: «refCounter++»
		«ENDFOR»
		«ENDIF»
			appMut = icMut;
	«ENDIF»
	«IF mut instanceof ModifySourceReferenceMutator»
			SourceReferenceChanged srcMut = AppliedMutationsFactory.eINSTANCE.createSourceReferenceChanged();
			srcMut.getObject().add(mut.getObject());
			srcMut.setFrom(((ModifySourceReferenceMutator) mut).getSource());
			srcMut.setTo(((ModifySourceReferenceMutator) mut).getNewSource());
			srcMut.setRefName(((ModifySourceReferenceMutator) mut).getRefType());
			srcMut.setDef(hmMutator.get("m«nRegistryMutation»"));
			appMut = srcMut;
	«ENDIF»
	«IF mut instanceof ModifyTargetReferenceMutator»
			TargetReferenceChanged trcMut = AppliedMutationsFactory.eINSTANCE.createTargetReferenceChanged();
			trcMut.getObject().add(mut.getObject());
			trcMut.setFrom(((ModifyTargetReferenceMutator) mut).getSource());
			trcMut.setSrcRefName(((ModifyTargetReferenceMutator) mut).getSrcRefType());
			trcMut.setTo(((ModifyTargetReferenceMutator) mut).getNewTarget());
			trcMut.setOldTo(((ModifyTargetReferenceMutator) mut).getOldTarget());
			trcMut.setRefName(((ModifyTargetReferenceMutator) mut).getRefType());
			trcMut.setDef(hmMutator.get("m«nRegistryMutation»"));
			appMut = trcMut;
	«ENDIF»
	«IF mut instanceof SelectObjectMutator»
		appMut = AppliedMutationsFactory.eINSTANCE.createAppMutation();
		appMut.setDef(hmMutator.get("m«nRegistryMutation»"));
	«ENDIF»
	«IF mut instanceof SelectSampleMutator»
		appMut = AppliedMutationsFactory.eINSTANCE.createAppMutation();
		appMut.setDef(hmMutator.get("m«nRegistryMutation»"));
	«ENDIF»
		return appMut;
	}
   '''
   
   	def compositeRegistryMethod(CompositeMutator mut)'''
   	«IF mut.eContainer instanceof MutatorEnvironment»
	//REGISTRY COUNTER: «nRegistryMutation = nRegistryMutation + 1»
	//LOCAL COPY REGISTRY COUNTER: «var localNRegistryMutation = nRegistryMutation»
	private AppMutation «compositeRegistryMethodName»(ArrayList<Mutator> muts, HashMap<String, EObject> hmMutator, Resource seed) {
		CompositeMutation appMut = AppliedMutationsFactory.eINSTANCE.createCompositeMutation();
		appMut.setSize(«ModelManager.mutatorSize(mut)»);
		ArrayList<AppMutation> appMuts = new ArrayList<AppMutation>();
		«var localNRegistryMethod = nRegistryMethod + 1»
		«var mutCounter = 0»
		«FOR c : mut.commands»
		//REGISTRY METHOD NAME:«registryMethodName = "registry" + localNRegistryMethod.toString()»
		//REGISTRY COUNTER INC: «localNRegistryMutation++»
		AppMutation appMut«mutCounter + 1» = «registryMethodName»(muts.get(«mutCounter»), hmMutator, seed, null, null);
		appMut«mutCounter + 1».setDef(hmMutator.get("m«localNRegistryMutation»"));
		appMuts.add(appMut«mutCounter + 1»);
		//REGISTRY METHOD INC: «localNRegistryMethod++»
		//COUNTER: «mutCounter++»
		«ENDFOR»
		appMut.getMuts().addAll(appMuts);
		appMut.setDef(hmMutator.get("m«nRegistryMutation»"));
		return appMut;
	}
	«ENDIF»
   '''
	def generateRegistryMethods(Mutator mut) '''
		«IF mut instanceof CompositeMutator»
			//COUNTER COMPOSITE REGISTRY: «nCompositeRegistryMethod = nCompositeRegistryMethod + 1»
			//COMPOSITE REGISTRY METHOD NAME:«compositeRegistryMethodName = "compositeRegistry" + nCompositeRegistryMethod.toString()»
			«IF compositeRegistryCommands == null»
			//CREATION ARRAYLIST NUM REGISTRY COMMANDS: «compositeRegistryCommands = new ArrayList<String>()»
			«ENDIF»
			//ADDING NUM COMMANDS: «compositeRegistryCommands.add(compositeRegistryMethodName)»
			«mut.compositeRegistryMethod»
			«FOR c : mut.commands»
				«c.generateRegistryMethods»
			«ENDFOR»
			//COUNTER REGISTRY: «nRegistryMethod = nRegistryMethod + ModelManager.mutatorSize(mut)»
		«ELSE»
			//COUNTER: «nRegistryMethod = nRegistryMethod + 1»
			//METHOD NAME:«registryMethodName = "registry" + nRegistryMethod.toString()»
			«mut.registryMethod»			
		«ENDIF»
	'''
	
	def generateBlock(Block b,
		int numMethod,
		int numCompositeMethod,
		int numMutation,
		int numRegistryMutation,
		int numRegistryMethod,
		int numCompositeRegistryMethod,
		int numCompositeCommands
	) '''
		«FOR c : b.commands»
			«c.generateMethods»
			«c.generateRegistryMethods»
		«ENDFOR»
		public void block_«b.name»(int maxAttempts, int numMutants, boolean registry, ArrayList<String> fromNames, HashMap<String, HashSet<String>> hashmapMutants, HashMap<String, List<String>> hashmapMutVersions, IProgressMonitor monitor) throws ReferenceNonExistingException, WrongAttributeTypeException, 
												  MaxSmallerThanMinException, AbstractCreationException, ObjectNoTargetableException, 
 												  ObjectNotContainedException, MetaModelNotFoundException, ModelNotFoundException, IOException {
		if (maxAttempts <= 0) {
			maxAttempts = 1;
		}
		//«var e = b.eContainer as MutatorEnvironment»
		«IF e.definition instanceof Program»
		«val program = e.definition as Program»
		«e.multipleBlock(b, numMethod, numCompositeMethod, numMutation, numRegistryMutation, numRegistryMethod, numCompositeRegistryMethod, numCompositeCommands)»
		«ENDIF»
	}
	'''
	
	def compile(MutatorEnvironment e) ''' 

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;

import manager.ModelManager;
import metrics.MutatorMetrics;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;

import commands.*;
import commands.selection.strategies.*;
import commands.strategies.*;

import exceptions.*;

import appliedMutations.*;

import mutatorenvironment.MutatorEnvironment;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.EList;
import org.osgi.framework.Bundle;

import org.eclipse.core.runtime.IProgressMonitor;

public class «className» extends mutator.MutatorUtils implements manager.IMutatorExecutor {
	
	«IF e.definition instanceof Program»
   	//RESET COUNTER: «nMethod = 0»
   	//RESET COUNTER: «nCompositeMethod = 0»
   	//RESET COUNTER: «nRegistryMethod = 0»
   	//RESET COUNTER: «nCompositeRegistryMethod = 0»
   	//RESET COUNTER: «nMutation = 0»
   	//RESET COUNTER: «nRegistryMutation = 0»
	//RESET COUNTER: «nCompositeCommands = 0»
   	«IF e.commands.length > 0»
	«FOR c : e.commands»
		«c.generateMethods»
		«c.generateRegistryMethods»
	«ENDFOR»
	public void execute(int maxAttempts, int numMutants, boolean registry, boolean metrics, boolean debugMetrics, IProgressMonitor monitor) throws ReferenceNonExistingException, WrongAttributeTypeException, 
												  MaxSmallerThanMinException, AbstractCreationException, ObjectNoTargetableException, 
 												  ObjectNotContainedException, MetaModelNotFoundException, ModelNotFoundException, IOException {
 		
		if (maxAttempts <= 0) {
			maxAttempts = 1;
		}
		int totalTasks = 0;
		if (metrics == true) {
			totalTasks++;
		}
		if (debugMetrics == true) {
			totalTasks++;
		}
		//«nMut = (e.definition as Program).num»
	   	«IF nMut != 0»
	   	numMutants = «nMut»;
	   	«ENDIF»

	   	int totalMutants = numMutants * «MutatorUtils.getNumberOfSeedModels(e, path)»;
		totalTasks += totalMutants;
		monitor.beginTask("Generating mutants", totalTasks);
		HashMap<String, List<String>> hashmapMutVersions = new HashMap<String, List<String>>();
		
		«IF e.definition instanceof Program»
		«e.multiple»
		«ENDIF»

		//Generate metrics model
		Bundle bundle = Platform.getBundle("wodel.models");
	   	URL fileURL = bundle.getEntry("/models/MutatorMetrics.ecore");
	   	String metricsecore = FileLocator.resolve(fileURL).getFile();
   		//String metricsecore = "«path + "/resources/MutatorMetrics.ecore"»";
   		
   		if (metrics == true) {
   			ArrayList<EPackage> metricspackages = ModelManager.loadMetaModel(metricsecore);
   			monitor.subTask("Generating dynamic net metrics");
   			MutatorMetrics.generateMetrics(metricspackages, "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ '/' + ((e as MutatorEnvironment).definition as Program).output»", "«((e as MutatorEnvironment).definition as Program).metamodel»", "«path+'/'+((e as MutatorEnvironment).definition as Program).source.path»", "«manager.WodelContext.getProject»", "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject»", hashmapMutVersions);
   			monitor.worked(1);
   		}
   		if (debugMetrics == true) {
			ArrayList<EPackage> metricspackages = ModelManager.loadMetaModel(metricsecore);
   			monitor.subTask("Generating dynamic debug metrics");
   			MutatorMetrics.generateDebugMetrics(metricspackages, "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ '/' + ((e as MutatorEnvironment).definition as Program).output»", "«((e as MutatorEnvironment).definition as Program).metamodel»", "«path+'/'+((e as MutatorEnvironment).definition as Program).source.path»", "«manager.WodelContext.getProject»", "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject»", hashmapMutVersions);
   			monitor.worked(1);   			
   		}
   	}
}
	«ENDIF»
	«ENDIF»
	«IF e.blocks.length > 0»
	«FOR b : e.blocks»
		«b.generateBlock(nMethod, nCompositeMethod, nMutation, nRegistryMutation, nRegistryMethod, nCompositeRegistryMethod, nCompositeCommands)»
	«ENDFOR»
	public void execute(int maxAttempts, int numMutants, boolean registry, boolean metrics, boolean debugMetrics, IProgressMonitor monitor) throws ReferenceNonExistingException, WrongAttributeTypeException, 
												  MaxSmallerThanMinException, AbstractCreationException, ObjectNoTargetableException, 
 												  ObjectNotContainedException, MetaModelNotFoundException, ModelNotFoundException, IOException {
 		
 		if (maxAttempts <= 0) {
			maxAttempts = 1;
		}
		int totalTasks = «e.blocks.size»;
		if (metrics == true) {
			totalTasks++;
		}
		if (debugMetrics == true) {
			totalTasks++;
		}
		monitor.beginTask("Generating mutants", totalTasks);
 		HashMap<String, HashSet<String>> hashmapMutants = new HashMap<String, HashSet<String>>();
 		HashMap<String, List<String>> hashmapMutVersions = new HashMap<String, List<String>>();
 		
		ArrayList<String> fromNames = null;
		//«var int i = 0»
		«FOR b : e.blocks»
		fromNames = new ArrayList<String>();
		«FOR from : b.from»
		fromNames.add("«from.name»");
		«ENDFOR»
		monitor.subTask("Generating mutants for block «b.name» («i+1»/«e.blocks.size»)"); 
		block_«b.name»(maxAttempts, numMutants, registry, fromNames, hashmapMutants, hashmapMutVersions, monitor);
		monitor.worked(1);
		//«i++»
		«ENDFOR»
		
   		//Generate metrics model
		Bundle bundle = Platform.getBundle("wodel.models");
	   	URL fileURL = bundle.getEntry("/models/MutatorMetrics.ecore");
	   	String metricsecore = FileLocator.resolve(fileURL).getFile();
   		//String metricsecore = "«path + "/resources/MutatorMetrics.ecore"»";
   		
   		if (metrics == true) {
   			ArrayList<EPackage> metricspackages = ModelManager.loadMetaModel(metricsecore);
   			monitor.subTask("Generating dynamic net metrics");
   			MutatorMetrics.generateMetrics(metricspackages, "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ '/' + ((e as MutatorEnvironment).definition as Program).output»", "«((e as MutatorEnvironment).definition as Program).metamodel»", "«path+'/'+((e as MutatorEnvironment).definition as Program).source.path»", "«manager.WodelContext.getProject»", "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject»", hashmapMutVersions);
   			monitor.worked(1);
   		}
   		if (debugMetrics == true) {
			ArrayList<EPackage> metricspackages = ModelManager.loadMetaModel(metricsecore);
   			monitor.subTask("Generating dynamic debug metrics");
   			MutatorMetrics.generateDebugMetrics(metricspackages, "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject+ '/' + ((e as MutatorEnvironment).definition as Program).output»", "«((e as MutatorEnvironment).definition as Program).metamodel»", "«path+'/'+((e as MutatorEnvironment).definition as Program).source.path»", "«manager.WodelContext.getProject»", "«ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject»", hashmapMutVersions);
   			monitor.worked(1);   			
   		}
	}
}
	«ENDIF»

	'''
	def multiple(MutatorEnvironment e) '''
	
	    «e.definition.multipleCompile»
	   	«e.execute»

	}
	'''
	
	def multipleBlock(MutatorEnvironment e,
		Block b,
		int numMethod,
		int numCompositeMethod,
		int numMutation,
		int numRegistryMutation,
		int numRegistryMethod,
		int numCompositeRegistryMethod,
		int numCompositeCommands
	) '''
	
	   «e.definition.multipleBlockCompile(b)»
	   «var nMut = 0»
	   «IF (b.fixed == 0)»
	   «IF (b.max - b.min > 0)»
			//«nMut = b.min + (b.max - b.min).getRandom»
		«ENDIF»
		«IF (b.min == 0) && (b.max == 0)»
			//«nMut = (e.definition as Program).num»
		«ELSEIF (b.min == b.max)»
			//«nMut = b.min»
		«ENDIF»
		«ELSE»
			//«nMut = b.fixed»
		«ENDIF»
	   	«IF nMut != 0»
	   	numMutants = «nMut»;
	   	«ENDIF»
	   	
	   	
	   	«e.executeBlock(b,
	   		numMethod,
	   		numCompositeMethod,
	   		numMutation,
	   		numRegistryMutation,
	   		numRegistryMethod,
	   		numCompositeRegistryMethod,
	   		numCompositeCommands
	   	)»

	}
	'''
   
	def multipleCompile(Definition e) '''
		String ecoreURI = "«e.metamodel»";
		«IF e instanceof Program»
		«/*IF e.source.multiple == true*/»
		«var String modelPath = path+'/'+e.source.path»
		«var String outputPath = path+'/'+e.output» 
		String modelURI = "«modelPath»";
		String modelsURI = "«outputPath»";
		//String resourcesURI = "«path + '/resources/'»";

		HashMap<String, String> hashmapModelFilenames = new HashMap<String, String>();
		«IF (e.source.path.endsWith("/"))»
		File[] files = new File(modelURI).listFiles();
		«ELSE»
		File[] files = new File[1];
		files[0] = new File(modelURI);
		«ENDIF»
		for (int i = 0; i < files.length; i++) {
			if (files[i].isFile() == true) {
				String pathfile = files[i].getPath();
				if (pathfile.endsWith(".model") == true) {
					hashmapModelFilenames.put(pathfile, modelsURI + files[i].getName().substring(0, files[i].getName().length() - ".model".length()));
				}
			}
		}
		«ENDIF»
		
		«IF e instanceof Program»
		//Load MetaModel
		ArrayList<EPackage> packages = ModelManager.loadMetaModel(ecoreURI);
		
		//Load Model
		Set<String> modelFilenames = hashmapModelFilenames.keySet();
		int count = 0;
		for (String modelFilename : modelFilenames) {
			HashSet<String> hashsetMutants = new HashSet<String>();
			hashsetMutants.add(modelFilename);
			Resource model = ModelManager.loadModel(packages, modelFilename);
			Resource seed = ModelManager.loadModel(packages, modelFilename);

		«ENDIF»
   '''
   
	def multipleBlockCompile(Definition e, Block b) '''
		String ecoreURI = "«e.metamodel»";
		«IF e instanceof Program»
		«var String modelPath = path+'/'+e.source.path»
		«var String outputPath = path+'/'+e.output» 
		String modelURI = "«modelPath»";
		String modelsURI = "«outputPath»";
		//String resourcesURI = "«path + '/resources/'»";
		
		HashMap<String, String> hashmapModelFilenames = new HashMap<String, String>();
		HashMap<String, String> hashmapModelFolders = new HashMap<String, String>();
		HashMap<String, String> seedModelFilenames = new HashMap<String, String>();
		«IF (e.source.path.endsWith("/"))»
		File[] files = new File(modelURI).listFiles();
		«ELSE»
		File[] files = new File[1];
		files[0] = new File(modelURI);
		«ENDIF»
		for (int i = 0; i < files.length; i++) {
			if (files[i].isFile() == true) {
				if (files[i].getName().endsWith(".model") == true) {
					if (fromNames.size() == 0) {
						String pathfile = files[i].getPath();
						if (pathfile.endsWith(".model") == true) {
							hashmapModelFilenames.put(pathfile, modelsURI + files[i].getName().substring(0, files[i].getName().length() - ".model".length()));
							seedModelFilenames.put(pathfile, files[i].getPath());
						}
					}
					else {
						for (String fromName : fromNames) {
							String modelFolder = modelsURI + files[i].getName().substring(0, files[i].getName().length() - ".model".length()) + "/" + fromName + "/";
							System.out.println("modelFolder: " + modelFolder);
							File[] mutFiles = new File(modelFolder).listFiles();
							if (mutFiles != null) {
								for (int j = 0; j < mutFiles.length; j++) {
									if (mutFiles[j].isFile() == true) {
										String pathfile = mutFiles[j].getPath();
										if (pathfile.endsWith(".model") == true) {
											hashmapModelFilenames.put(pathfile, modelsURI + files[i].getName().substring(0, files[i].getName().length() - ".model".length()));
											hashmapModelFolders.put(pathfile, fromName + "/" + mutFiles[j].getName().substring(0, mutFiles[j].getName().length() - ".model".length()));
											seedModelFilenames.put(pathfile, files[i].getPath());
										}
									}
									else {
										generateModelPaths(fromName, mutFiles[j], mutFiles[j].getName(), hashmapModelFilenames, hashmapModelFolders, seedModelFilenames, modelsURI, files[i]);
									}
								}
							}
						}
					}
				}
			}
		}
		«ENDIF»
		
		«IF e instanceof Program»
		//Load MetaModel
		ArrayList<EPackage> packages = ModelManager.loadMetaModel(ecoreURI);
		
		//Load Model
		Set<String> modelFilenames = hashmapModelFilenames.keySet();
		for (String modelFilename : modelFilenames) {
			String seedModelFilename = seedModelFilenames.get(modelFilename);
			HashSet<String> hashsetMutantsBlock = null;
			«IF b.repeat == Repeat.YES»
			hashsetMutantsBlock = new HashSet<String>();
			«ELSEIF b.repeat == Repeat.NO»
			if (seedModelFilename != null) {
				if (hashmapMutants.get(seedModelFilename) != null) {
					hashsetMutantsBlock = hashmapMutants.get(seedModelFilename);
				}
			}
			if (hashsetMutantsBlock == null) {
				hashsetMutantsBlock = new HashSet<String>();
			}
			«ENDIF»
			if (hashsetMutantsBlock.contains(seedModelFilename) == false) {
				hashsetMutantsBlock.add(seedModelFilename);
			}
			Resource model = ModelManager.loadModel(packages, modelFilename);
			Resource seed = ModelManager.loadModel(packages, modelFilename);

		«ENDIF»
   '''

    def method(AttributeSet e, boolean flag, boolean isList) '''
   		«IF isList == true»
    	«IF e.attribute.get(0) !=null»
		«val EAttribute attribute = e.attribute.get(0)»
		List<AttributeConfigurationStrategy> atts = null;
		if (attsList.get("«attributeName»") != null) {
			atts = attsList.get("«attributeName»");
		}
		else {
			atts = new ArrayList<AttributeConfigurationStrategy>();
		}
		//NAME:«attributeName = attribute.name»
		«ELSE»
		//NAME:«attributeName = ""»
		«ENDIF»
		«IF e instanceof AttributeScalar»
   		atts.add(«e.value.method(flag)»);
   		«ENDIF»
   		«IF e instanceof AttributeUnset»
   		atts.add(null);
   		«ENDIF»
   		«IF e instanceof AttributeReverse»
   		atts.add(new ReverseBooleanConfigurationStrategy("«attributeName»"));
   		«ENDIF»
   		attsList.put("«attributeName»", atts);
   		«ELSE»
    	«IF e.attribute.get(0) !=null»
		«val EAttribute attribute = e.attribute.get(0)»
		//NAME:«attributeName = attribute.name»
		«ELSE»
		//NAME:«attributeName = ""»
		«ENDIF»
		«IF e instanceof AttributeScalar»
   		atts.put("«attributeName»", «e.value.method(flag)»);
   		«ENDIF»
   		«IF e instanceof AttributeUnset»
   		atts.put("«attributeName»", null);
   		«ENDIF»
   		«IF e instanceof AttributeReverse»
   		atts.put("«attributeName»", new ReverseBooleanConfigurationStrategy("«attributeName»"));
   		«ENDIF»
   		«ENDIF»
	'''
	
	def method(ReferenceSet e) '''
		«IF e.reference.get(0) !=null»
		«val EReference reference = e.reference.get(0)»
		//NAME:«referenceName = reference.name»
		«ELSE»
		//NAME:«referenceName = ""»
		«ENDIF»
		«IF e instanceof ReferenceInit || e instanceof ReferenceRemove || e instanceof ReferenceAdd»
		«e.object.method»
   		refs.put("«referenceName»", refSelection«nReference»);
   		«ENDIF»
	'''	
	def method(AttributeType e, boolean flag) '''
	«IF e instanceof StringType»
		«(e as StringType).method»
	«ELSEIF e instanceof DoubleType»
		«(e as DoubleType).method»
	«ELSEIF e instanceof BooleanType»
		«(e as BooleanType).method»
	«ELSEIF e instanceof IntegerType»
		«(e as IntegerType).method»
	«ELSEIF e instanceof ListStringType»
		«(e as ListStringType).method(flag)»
	«ELSEIF e instanceof ListType»
		«(e as ListType).method(flag)»
	«ELSEIF e instanceof RandomType»
		«(e as RandomType).method(flag)»
	«ELSEIF e instanceof MinValueType»
		«(e as MinValueType).method»
	«ELSEIF e instanceof MaxValueType»
		«(e as MaxValueType).method»
	«ELSEIF e instanceof RandomIntegerNumberType»
		«(e as RandomIntegerNumberType).method»
	«ELSEIF e instanceof RandomDoubleNumberType»
		«(e as RandomDoubleNumberType).method»
	«ENDIF»
	'''
	
	//********************
	//DATA TYPES COMPILES
	def method(StringType e) ''' 
		«IF e instanceof SpecificStringType»
			new SpecificStringConfigurationStrategy("«(e as SpecificStringType).value»")
		«ELSEIF e instanceof RandomStringType»
		    «var RandomStringType r = (e as RandomStringType)»
			new RandomStringConfigurationStrategy(«r.min», «r.max», false)
		«ELSEIF e instanceof UpperStringType»
			«IF !attributeName.equals("")»
			new UpperStringConfigurationStrategy("«attributeName»")
			«ELSE»
			null
			«ENDIF»
		«ELSEIF e instanceof LowerStringType»
			«IF !attributeName.equals("")»
			new LowerStringConfigurationStrategy("«attributeName»")
			«ELSE»
			null
			«ENDIF»
		«ELSEIF e instanceof CatStartStringType»
			«IF !attributeName.equals("")»
			new CatStartStringConfigurationStrategy("«(e as CatStartStringType).value»", "«attributeName»")
			«ELSE»
			null
			«ENDIF»
		«ELSEIF e instanceof CatEndStringType»
			«IF !attributeName.equals("")»
			new CatEndStringConfigurationStrategy("«(e as CatEndStringType).value»", "«attributeName»")
			«ELSE»
			null
			«ENDIF»
		«ELSEIF e instanceof ReplaceStringType»
			«IF !attributeName.equals("")»
			new ReplaceStringConfigurationStrategy("«attributeName»", "«(e as ReplaceStringType).oldstring»", "«(e as ReplaceStringType).newstring»")
			«ELSE»
			null
			«ENDIF»
		«ENDIF»
	'''
				
	def method(DoubleType e) ''' 
		«IF e instanceof SpecificDoubleType»
			new SpecificDoubleConfigurationStrategy(«(e as SpecificDoubleType).value»)
		«ELSEIF e instanceof RandomDoubleType»
			«var RandomDoubleType r = (e as RandomDoubleType)»
			new RandomDoubleConfigurationStrategy(«r.min», «r.max», false)
		«ENDIF»
	'''	
	def method(BooleanType e) ''' 
		«IF e instanceof SpecificBooleanType»
			new SpecificBooleanConfigurationStrategy(«(e as SpecificBooleanType).value»)
		«ELSEIF e instanceof RandomBooleanType»
			new RandomBooleanConfigurationStrategy()
		«ENDIF»
		'''	
	def method(IntegerType e) '''
		«IF e instanceof SpecificIntegerType» 		
			new SpecificIntegerConfigurationStrategy(«(e as SpecificIntegerType).value»)
		«ELSEIF e instanceof RandomIntegerType»
			«var RandomIntegerType r = (e as RandomIntegerType)»
			new RandomIntegerConfigurationStrategy(«r.min», «r.max», false)		
		«ENDIF»
		'''
	def method(ListStringType e, boolean flag) '''
		«IF e instanceof ListStringType»
			«IF !attributeName.equals("")»
				«IF flag == false»
					(ModelManager.getAttribute("«attributeName»", (objectSelection != null) ? objectSelection.getObject() : null) instanceof String) ? new ListStringConfigurationStrategy((String) ModelManager.getAttribute("«attributeName»", (objectSelection != null) ? objectSelection.getObject() : null), "«(e as ListStringType).value»", "«attributeName»") : null
				«ELSE»
					(ModelManager.getAttribute("«attributeName»", refObjectSelected) instanceof String) ? new ListStringConfigurationStrategy((String) ModelManager.getAttribute("«attributeName»", refObjectSelected), "«(e as ListStringType).value»", "«attributeName»") : null
				«ENDIF»
			«ELSE»
				null
			«ENDIF»
		«ENDIF»
		'''
		
	def method(ListType e, boolean flag) '''
		«IF e instanceof ListType»
			«IF !attributeName.equals("")»
				«IF flag == false»
					(ModelManager.getAttribute("«attributeName»", (objectSelection != null) ? objectSelection.getObject() : null) instanceof EObject) ? new ListConfigurationStrategy((EObject) ModelManager.getAttribute("«attributeName»", (objectSelection != null) ? objectSelection.getObject() : null), "«(e as ListType).value»", "«attributeName»") : null
				«ELSE»
					(ModelManager.getAttribute("«attributeName»", refObjectSelected) instanceof EObject) ? new ListConfigurationStrategy((EObject) ModelManager.getAttribute("«attributeName»", refObjectSelected), "«(e as ListType).value»", "«attributeName»") : null
				«ENDIF»
			«ELSE»
				null
			«ENDIF»
		«ENDIF»
		'''
	def method(RandomType e, boolean flag) '''
		«IF e instanceof RandomType»
			«IF !attributeName.equals("")»
				«IF flag == false»
					new RandomConfigurationStrategy(ModelManager.getAttribute("«attributeName»", objectSelection.getObject()), "«attributeName»")
				«ELSE»
					new RandomConfigurationStrategy(ModelManager.getAttribute("«attributeName»", refObjectSelected), "«attributeName»")
				«ENDIF»
			«ELSE»
				null
			«ENDIF»
		«ENDIF»
		'''
	def method(MinValueType e) '''
		new MinValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(e)»", "«e.attribute.name»")
		'''
	def method(MaxValueType e) '''
		new MaxValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(e)»", "«e.attribute.name»")
		'''
	def method(RandomIntegerNumberType e) '''
		«IF e.object instanceof SpecificObjectSelection»
		//«var SpecificObjectSelection sel = e.object as SpecificObjectSelection»
		new RandomIntegerConfigurationStrategy(«e.min», ModelManager.getIntAttribute("«e.max.name»", hmObjects.get("«sel.objSel.name»")), false)
		«ENDIF»
		'''
	
	def method(RandomDoubleNumberType e) '''
		«IF e.object instanceof SpecificObjectSelection»
		//«var SpecificObjectSelection sel = e.object as SpecificObjectSelection»
		new RandomDoubleConfigurationStrategy(«e.min», ModelManager.getDoubleAttribute("«e.max.name»", hmObjects.get("«sel.objSel.name»")), false)
		«ENDIF»
	'''

	def add(AttributeOperation op) '''
		atts.add(new AddOperationConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(op)»", "«attributeName»", objectSelection.getObject(), value));
		attsList.put("«attributeName»", atts); 
	'''

	def subtract(AttributeOperation op) '''
		atts.add(new SubtractOperationConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(op)»", "«attributeName»", objectSelection.getObject(), value));
		attsList.put("«attributeName»", atts); 
	'''

	def multiply(AttributeOperation op) '''
		atts.add(new MultiplyOperationConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(op)»", "«attributeName»", objectSelection.getObject(), value));
		attsList.put("«attributeName»", atts); 
	'''

	def divide(AttributeOperation op) '''
		atts.add(new DivideOperationConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(op)»", "«attributeName»", objectSelection.getObject(), value));
		attsList.put("«attributeName»", atts); 
	'''

	def module(AttributeOperation op) '''
		atts.add(new ModuleOperationConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(op)»", "«attributeName»", objectSelection.getObject(), value));
		attsList.put("«attributeName»", atts); 
	'''
	//END DATA TYPES COMPILES
	//************************
	//********************
	//REFERENCES COMPILES
	def method(ObSelectionStrategy e) '''
  		//REFERENCES COMPILES	«nReference=nReference+1»
		«IF e instanceof RandomTypeSelection»
			RandomTypeSelection refRts«nReference» = new RandomTypeSelection(packages, model, "«(e as RandomTypeSelection).type.name»");
			«IF e.expression != null && expressionList != null»
			List<EObject> refObjects«nReference» = refRts«nReference».getObjects();
			//INDEX EXPRESSION: « var indexExpression = expressionList.size() - 1»
			Expression exp«expressionList.get(indexExpression)» = new Expression();
	   		«e.expression.method»
   			List<EObject> refSelectedObjects«nReference» = evaluate(refObjects«nReference», exp«expressionList.get(indexExpression)»);
			EObject refObject«nReference» = null;
			if (refSelectedObjects«nReference».size() > 0) {
				refObject«nReference» = refSelectedObjects«nReference».get(ModelManager.getRandomIndex(refSelectedObjects«nReference»));
			}
			«ELSE»
			EObject refObject«nReference» = refRts«nReference».getObject();
			«ENDIF»
			ObSelectionStrategy refSelection«nReference» = null;
			if (refObject«nReference» != null) {
			refSelection«nReference» = 
				new SpecificObjectSelection(packages, model, refObject«nReference»);
			}
		«ELSEIF e instanceof CompleteTypeSelection»
			RandomTypeSelection refRts«nReference» = new RandomTypeSelection(packages, model, "«(e as CompleteTypeSelection).type.name»");
			EObject refObject«nReference» = refRts«nReference».getObject();
			ObSelectionStrategy refSelection«nReference» = new SpecificObjectSelection(packages, model,	refObject«nReference»);
		«ELSEIF e instanceof SpecificObjectSelection»
			ObSelectionStrategy refSelection«nReference» = null;
			if (hmObjects.get("«(e as SpecificObjectSelection).objSel.name»") != null) {
			«IF e.refType != null»
				refSelection«nReference» = new SpecificObjectSelection(packages, model, hmObjects.get("«(e as SpecificObjectSelection).objSel.name»"), "«e.refType.name»");
			«ELSE»
				refSelection«nReference» = new SpecificObjectSelection(packages, model, hmObjects.get("«(e as SpecificObjectSelection).objSel.name»"));
			«ENDIF»
			} else {
				if (hmList.get("«(e as SpecificObjectSelection).objSel.name»") != null) {
				«IF e.refType != null»
					refSelection«nReference» = new SpecificObjectSelection(packages, model, hmList.get("«(e as SpecificObjectSelection).objSel.name»"), "«e.refType.name»");
				«ELSE»
					refSelection«nReference» = new SpecificObjectSelection(packages, model, hmList.get("«(e as SpecificObjectSelection).objSel.name»"));
				«ENDIF»
				}
				else {
					return mutations;
				}
			}
		«ENDIF»
	'''
	//END REFERENCES COMPILES
	//************************
   
   //*********
   // CLAUSES
   def method(Expression exp) '''
  		//INDEX EXPRESSION: «val indexExpression = expressionList.size() - 1»
  		«IF exp.first instanceof AttributeEvaluation»
  		«IF (exp.first as AttributeEvaluation).value instanceof ObjectAttributeType»
  		exp«expressionList.get(indexExpression)».first = new AttributeEvaluation();
  		//ATTRIBUTE: «val attev = exp.first as AttributeEvaluation»
  		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).name = "«attev.name.name»";
   		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).operator = "«(attev.value as ObjectAttributeType).operator»";
		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values = new ArrayList<String>();
   		«ENDIF»
   		«IF (exp.first as AttributeEvaluation).value instanceof AttributeType»
  		exp«expressionList.get(indexExpression)».first = new AttributeEvaluation();
  		//ATTRIBUTE: «val attev = exp.first as AttributeEvaluation»
   		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).name = "«attev.name.name»";
   		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).operator = "«(attev.value as AttributeType).operator»";
		((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values = new ArrayList<String>();
   		«IF attev.value instanceof StringType»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add("«(attev.value as SpecificStringType).value»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "String";
		«ENDIF»
		«IF attev.value instanceof DoubleType»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add("«(attev.value as SpecificDoubleType).value»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "double";
		«ENDIF»
		«IF attev.value instanceof BooleanType»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add("«(attev.value as SpecificBooleanType).value»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "Boolean";
		«ENDIF»
		«IF attev.value instanceof IntegerType»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add("«(attev.value as SpecificIntegerType).value»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "int";
		«ENDIF»
		«IF attev.value instanceof MinValueType»
			MinValueConfigurationStrategy min«expressionList.get(indexExpression)» = new MinValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(attev.value as MinValueType)»", "«(attev.value as MinValueType).attribute.name»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add(min«expressionList.get(indexExpression)».getValue().toString());
   			«IF (attev.value as MinValueType).attribute.getEType.name.equals("EInt")»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "int";
   			«ENDIF»
   			«IF (attev.value as MinValueType).attribute.getEType.name.equals("EDouble")»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "double";
   			«ENDIF»
		«ENDIF»
		«IF attev.value instanceof MaxValueType»
			MaxValueConfigurationStrategy max«expressionList.get(indexExpression)» = new MaxValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(attev.value as MaxValueType)»", "«(attev.value as MaxValueType).attribute.name»");
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add(max«expressionList.get(indexExpression)».getValue().toString());
   			«IF (attev.value as MaxValueType).attribute.getEType.name.equals("EInt")»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "int";
   			«ENDIF»
   			«IF (attev.value as MaxValueType).attribute.getEType.name.equals("EDouble")»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "double";
   			«ENDIF»
		«ENDIF»
		«IF attev.value instanceof ListStringType»
			//«val list = attev.value as ListStringType»
			«FOR item : list.value»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).values.add("«item»");
   			«ENDFOR»
   			((AttributeEvaluation) exp«expressionList.get(indexExpression)».first).type = "String";
		«ENDIF»
   		«ENDIF»
   		«ENDIF»
   		«IF exp.first instanceof ReferenceEvaluation»
		exp«expressionList.get(indexExpression)».first = new ReferenceEvaluation();
		//REFERENCE: «val refev = exp.first as ReferenceEvaluation»
	   	«IF refev.name != null»
   			((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).name = "«refev.name.name»";
   		«ELSE»
			((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).name = null;
		«ENDIF»
		«IF refev.refName != null»
			((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).refName = "«refev.refName.name»";
		«ELSE»
			((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).refName = null;
		«ENDIF»
		((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).operator = "«refev.operator»";
		«IF refev.value == null»
	   		((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = null;
   		«ELSEIF refev.value instanceof SpecificObjectSelection»
   			«IF refev.refType == null && refev.value.refType == null»
	   		((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = new SpecificObjectSelection(packages, model, hmObjects.get("«(refev.value as SpecificObjectSelection).objSel.name»")).getObject();
	   		«ELSE»
	   		«IF refev.refType != null»
	   		EObject srcObjExp = hmObjects.get("«(refev.value as SpecificObjectSelection).objSel.name»");
	   		for (EReference ref : srcObjExp.eClass().getEAllReferences()) {
				if (ref.getName().equals("«refev.refType.name»")) {
					((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = srcObjExp.eGet(ref);		
				}
			}
			«ENDIF»
	   		«IF refev.value.refType != null»
	   		EObject srcObjExp = hmObjects.get("«(refev.value as SpecificObjectSelection).objSel.name»");
	   		for (EReference ref : srcObjExp.eClass().getEAllReferences()) {
				if (ref.getName().equals("«refev.value.refType.name»")) {
					((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = srcObjExp.eGet(ref);		
				}
			}
			«ENDIF»
	   		«ENDIF»
		«ELSE»
		«IF refev.value instanceof RandomTypeSelection»
		«IF refev.value.expression instanceof Expression»
			//EXPRESSION LEVEL: «nExpression = nExpression + 1»
	   		//EXPRESSION LEVEL: «expressionList.add(nExpression)»
	   		//INDEX EXPRESSION: «val nestedIndexExpression = expressionList.size() - 1»
			RandomTypeSelection expRts«expressionList.get(nestedIndexExpression)» = new RandomTypeSelection(packages, model, "«(refev.value as RandomTypeSelection).type.name»");
   			List<EObject> expObjects«expressionList.get(nestedIndexExpression)» = expRts«expressionList.get(nestedIndexExpression)».getObjects();
	   		Expression exp«expressionList.get(nestedIndexExpression)» = new Expression();
	   		«refev.value.expression.method»
   			List<EObject> selectedObjects«expressionList.get(nestedIndexExpression)» = evaluate(expObjects«expressionList.get(nestedIndexExpression)», exp«expressionList.get(nestedIndexExpression)»);
			EObject object«expressionList.get(nestedIndexExpression)» = null;
			if (selectedObjects«expressionList.get(nestedIndexExpression)».size() > 0) {
				object«expressionList.get(nestedIndexExpression)» = selectedObjects«expressionList.get(nestedIndexExpression)».get(ModelManager.getRandomIndex(selectedObjects«expressionList.get(nestedIndexExpression)»));
			}
	   		((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = new SpecificObjectSelection(packages, model, object«expressionList.get(nestedIndexExpression)»).getObject();
		«ELSE»
   		((ReferenceEvaluation) exp«expressionList.get(indexExpression)».first).value = new RandomTypeSelection(packages, model, "«(refev.value as RandomTypeSelection).type.name»").getObject();
		«ENDIF»
		«ENDIF»
   		«ENDIF»
   		«ENDIF»
   		exp«expressionList.get(indexExpression)».operator = new ArrayList<Operator>();
   		//OPNAME: «var opName = 0»
   		«FOR op : exp.operator»
			Operator op«opName»_«expressionList.get(indexExpression)» = new Operator();
			op«opName»_«expressionList.get(indexExpression)».type = "«op.type»";
			exp«expressionList.get(indexExpression)».operator.add(op«opName»_«expressionList.get(indexExpression)»);
			//OPNAME + 1: « opName = opName + 1»
   		«ENDFOR»
   		exp«expressionList.get(indexExpression)».second = new ArrayList<Evaluation>();
   		//EVNAME: «var evName = 0»
   		«FOR ev : exp.second»
   			«IF ev instanceof AttributeEvaluation»
   			«IF (ev as AttributeEvaluation).value instanceof ObjectAttributeType»
   			AttributeEvaluation ev«evName»_«expressionList.get(indexExpression)» = new AttributeEvaluation();
   			ev«evName»_«expressionList.get(indexExpression)».name = "«ev.name.name»";
   			ev«evName»_«expressionList.get(indexExpression)».operator = "«(ev.value as ObjectAttributeType).operator»";
   			«ENDIF»
   			«IF (ev as AttributeEvaluation).value instanceof AttributeType»
   			AttributeEvaluation ev«evName»_«expressionList.get(indexExpression)» = new AttributeEvaluation();
   			ev«evName»_«expressionList.get(indexExpression)».name = "«ev.name.name»";
   			ev«evName»_«expressionList.get(indexExpression)».operator = "«(ev.value as SpecificStringType).operator»";
   			«IF ev.value instanceof StringType»
   				ev«evName»_«expressionList.get(indexExpression)».value = "«(ev.value as SpecificStringType).value»";
   				ev«evName»_«expressionList.get(indexExpression)».type = "String";
			«ENDIF»
			«IF ev.value instanceof DoubleType»
   				ev«evName»_«expressionList.get(indexExpression)».value = "«(ev.value as SpecificDoubleType).value»";
   				ev«evName»_«expressionList.get(indexExpression)».type = "double";
			«ENDIF»
			«IF ev.value instanceof BooleanType»
	   			ev«evName»_«expressionList.get(indexExpression)».value = "«(ev.value as SpecificBooleanType).value»";
	   			ev«evName»_«expressionList.get(indexExpression)».type = "Boolean";
			«ENDIF»
			«IF ev.value instanceof IntegerType»
	   			ev«evName»_«expressionList.get(indexExpression)».value = "«(ev.value as SpecificIntegerType).value»";
	   			ev«evName»_«expressionList.get(indexExpression)».type = "int";
			«ENDIF»
			«IF ev.value instanceof MinValueType»
			MinValueConfigurationStrategy min«evName»_«expressionList.get(indexExpression)» = new MinValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(ev.value as MinValueType)»", "«(ev.value as MinValueType).attribute.name»");
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).values.add(min«expressionList.get(indexExpression)».getValue().toString());
   			«IF (ev.value as MinValueType).attribute.getEType.name.equals("EInt")»
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).type = "int";
   			«ENDIF»
   			«IF (ev.value as MinValueType).attribute.getEType.name.equals("EDouble")»
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).type = "double";
   			«ENDIF»
			«ENDIF»
			«IF ev.value instanceof MaxValueType»
			MaxValueConfigurationStrategy max«evName»_«expressionList.get(indexExpression)» = new MaxValueConfigurationStrategy(packages, model, "«MutatorUtils.getTypeName(ev.value as MaxValueType)»", "«(ev.value as MinValueType).attribute.name»");
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).values.add(max«expressionList.get(indexExpression)».getValue().toString());
   			«IF (ev.value as MinValueType).attribute.getEType.name.equals("EInt")»
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).type = "int";
   			«ENDIF»
   			«IF (ev.value as MinValueType).attribute.getEType.name.equals("EDouble")»
   			((AttributeEvaluation) exp«evName»_«expressionList.get(indexExpression)».first).type = "double";
   			«ENDIF»
			«ENDIF»
   			«ENDIF»
   			«ENDIF»
   			«IF ev instanceof ReferenceEvaluation»
	   		ReferenceEvaluation ev«evName»_«expressionList.get(indexExpression)» = new ReferenceEvaluation();
	   		«IF ev.name != null»
	   			ev«evName»_«expressionList.get(indexExpression)».name = "«ev.name.name»";
	   		«ELSE»
	   			ev«evName»_«expressionList.get(indexExpression)».name = null;
	   		«ENDIF»
	   		«IF ev.refName != null»
	   			ev«evName»_«expressionList.get(indexExpression)».refName = "«ev.refName.name»";
	   		«ELSE»
	   			ev«evName»_«expressionList.get(indexExpression)».refName = null;
	   		«ENDIF»
   			ev«evName»_«expressionList.get(indexExpression)».operator = "«ev.operator»";
   			«IF ev.value == null»
	   			ev«evName»_«expressionList.get(indexExpression)».value = null;
   			«ELSEIF ev.value instanceof SpecificObjectSelection»
   				«IF ev.refType == null && ev.value.refType == null»
   					ev«evName»_«expressionList.get(indexExpression)».value = new SpecificObjectSelection(packages, model, hmObjects.get("«(ev.value as SpecificObjectSelection).objSel.name»")).getObject();
	   			«ELSE»
	   			«IF ev.refType != null»
	   				EObject srcObjExp«evName»_«expressionList.get(indexExpression)» = hmObjects.get("«(ev.value as SpecificObjectSelection).objSel.name»");
	   				for (EReference ref : srcObjExp«evName»_«expressionList.get(indexExpression)».eClass().getEAllReferences()) {
						if (ref.getName().equals("«ev.refType.name»")) {
							ev«evName»_«expressionList.get(indexExpression)».value = srcObjExp«evName»_«expressionList.get(indexExpression)».eGet(ref);		
						}
					}
	   			«ENDIF»
	   			«IF ev.value.refType != null»
	   				EObject srcObjExp«evName»_«expressionList.get(indexExpression)» = hmObjects.get("«(ev.value as SpecificObjectSelection).objSel.name»");
	   				for (EReference ref : srcObjExp«evName»_«expressionList.get(indexExpression)».eClass().getEAllReferences()) {
						if (ref.getName().equals("«ev.value.refType.name»")) {
							ev«evName»_«expressionList.get(indexExpression)».value = srcObjExp«evName»_«expressionList.get(indexExpression)».eGet(ref);		
						}
					}
	   			«ENDIF»
	   			«ENDIF»
			«ELSE»
			«IF ev.value instanceof RandomTypeSelection»
			«IF ev.value.expression instanceof Expression»
				//EXPRESSION LEVEL: «nExpression = nExpression + 1»
		   		//EXPRESSION LEVEL: «expressionList.add(nExpression)»
		   		//INDEX EXPRESSION: «val nestedIndexExpression = expressionList.size() - 1»
				RandomTypeSelection expRts«expressionList.get(nestedIndexExpression)» = new RandomTypeSelection(packages, model, "«(ev.value as RandomTypeSelection).type.name»");
   				List<EObject> expObjects«expressionList.get(nestedIndexExpression)» = expRts«expressionList.get(nestedIndexExpression)».getObjects();
	   			Expression exp«expressionList.get(nestedIndexExpression)» = new Expression();
	   			«ev.value.expression.method»
   				List<EObject> selectedObjects«evName»_«expressionList.get(nestedIndexExpression)» = evaluate(expObjects«expressionList.get(nestedIndexExpression)», exp«expressionList.get(nestedIndexExpression)»);
				EObject object«evName»_«expressionList.get(nestedIndexExpression)» = null;
				if (selectedObjects«evName»_«expressionList.get(nestedIndexExpression)».size() > 0) {
					object«evName»_«expressionList.get(nestedIndexExpression)» = selectedObjects«evName»_«expressionList.get(nestedIndexExpression)».get(ModelManager.getRandomIndex(selectedObjects«evName»_«expressionList.get(nestedIndexExpression)»));
				}
				ev«evName»_«expressionList.get(indexExpression)».value = new SpecificObjectSelection(packages, model, object«evName»_«expressionList.get(nestedIndexExpression)»).getObject();
			«ELSE»
			ev«evName»_«expressionList.get(indexExpression)».value = new RandomTypeSelection(packages, model, "«(ev.value as RandomTypeSelection).type.name»").getObject();
			«ENDIF»
			«ENDIF»
			«ENDIF»
			«ENDIF»
   			exp«expressionList.get(indexExpression)».second.add(ev«evName»_«expressionList.get(indexExpression)»);
			//EVNAME + 1: « evName = evName + 1»
   		«ENDFOR»
   '''
   //END CLAUSES

   //*********
   // EACH CLAUSES
   def each(Expression exp) '''
  		//INDEX EXPRESSION: «val indexExpression = expressionList.size() - 1»
  		«IF exp.first instanceof AttributeEvaluation»
  		//ATTRIBUTE: «val attev = exp.first as AttributeEvaluation»
  		selectedObjects = unique(selectedObjects, "«attev.name.name»", false);
   		«ENDIF»
   		«IF exp.first instanceof ReferenceEvaluation»
		exp«expressionList.get(indexExpression)».first = new ReferenceEvaluation();
		//REFERENCE: «val refev = exp.first as ReferenceEvaluation»
  		selectedObjects = unique(selectedObjects, "«refev.name.name»", true);
  		«ENDIF»
  		«FOR ev : exp.second»
   			«IF ev instanceof AttributeEvaluation»
	  		selectedObjects = unique(selectedObjects, "«ev.name.name»", false);
   			«ENDIF»
   			«IF ev instanceof ReferenceEvaluation»
	  		selectedObjects = unique(selectedObjects, "«ev.name.name»", true);
	  		«ENDIF»
   		«ENDFOR»
   		objects = selectedObjects;
   '''
   //END CLAUSES
   //COMMANDS
   
   def execute(MutatorEnvironment e)'''
   		//Generate metrics model
		Bundle bundle = Platform.getBundle("wodel.models");
	   	URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore");
	   	String mutatorecore = FileLocator.resolve(fileURL).getFile();
		
		//Load MetaModel
		ArrayList<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
		Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI("«xmiFileName»").toFileString());
		
		HashMap<String, EObject> hmMutator = getMutators(ModelManager.getObjects(mutatormodel));
				
   	   	for (int i = 0; i < numMutants; i++) {
   	   		HashMap<String, EObject> hashmapEObject = new HashMap<String, EObject>();
			HashMap<String, List<EObject>> hashmapList = new HashMap<String, List<EObject>>();
   	   		String mutFilename = hashmapModelFilenames.get(modelFilename) + "/" + "Output" + i + ".model";
   	   		monitor.subTask("Mutant " + (count * numMutants + i + 1) + "/" + totalMutants + ": " + mutFilename);
   	   		String mutPath = hashmapModelFilenames.get(modelFilename) + "/" + "Output" + i + "vs";
   	   		boolean isRepeated = true;
   			int attempts = 0;
   			int max = 0;
   			while ((isRepeated == true) && (attempts < maxAttempts)) {
				List<String> mutPaths = new ArrayList<String>();
				Mutations muts = AppliedMutationsFactory.eINSTANCE.createMutations();
   				attempts++;
   				//RESET COUNTER: «nMethod = 0»
   				//RESET COUNTER: «nCompositeMethod = 0»
   				//RESET COUNTER: «nMutation = 0»
   				//RESET COUNTER: «nRegistryMutation = 0»
   				//RESET COUNTER: «nRegistryMethod = 0»
   				//RESET COUNTER: «nCompositeRegistryMethod = 0»
   				//RESET COUNTER: «nCompositeCommands = 0»

   	   			«FOR c : e.commands »
   	   				«IF c instanceof Mutator»
   	   				«c.compile»
   	   				«ENDIF»
				«ENDFOR»
      
      
      			//MUTANT COMPLETION AND REGISTRY
       			HashMap<String, ArrayList<String>> rules = new HashMap<String, ArrayList<String>>();
       			«FOR constraint : e.constraints»
       			if (rules.get("«constraint.type.name»") == null) {
       				rules.put("«constraint.type.name»", new ArrayList<String>());
       			}
       			ArrayList<String> newrules = rules.get("«constraint.type.name»");
       			newrules.add("«constraint.rule»");
   				rules.put("«constraint.type.name»", newrules);
      			«ENDFOR»
      			
				isRepeated = registryMutant(ecoreURI, packages, seed, model, rules, muts, modelFilename, mutFilename, registry, hashsetMutants, hashmapModelFilenames, i, mutPaths, hashmapMutVersions);

	    		//Reload input
	    		try {
					model.unload();
					model.load(null); 
				} catch (Exception e) {}
   			}
			monitor.worked(1);
   		}
		count++;
	'''
	
	def executeBlock(MutatorEnvironment e,
		Block b,
		int numMethod,
		int numCompositeMethod,
		int numMutation,
		int numRegistryMutation,
		int numRegistryMethod,
		int numCompositeRegistryMethod,
		int numCompositeCommands
	)'''
		//Generate metrics model
		Bundle bundle = Platform.getBundle("wodel.models");
	   	URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore");
	   	String mutatorecore = FileLocator.resolve(fileURL).getFile();
		
		//Load MetaModel
		ArrayList<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
		Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI("«xmiFileName»").toFileString());
		
		HashMap<String, EObject> hmMutator = getMutators(ModelManager.getObjects(mutatormodel));
				
   	   	for (int i = 0; i < numMutants; i++) {
			HashMap<String, EObject> hashmapEObject = new HashMap<String, EObject>();
			HashMap<String, List<EObject>> hashmapList = new HashMap<String, List<EObject>>();
   	   		«IF b.from.size == 0»
   	   		String mutFilename = hashmapModelFilenames.get(modelFilename) + "/«b.name»/Output" + i + ".model";
   	   		String mutPath = hashmapModelFilenames.get(modelFilename) + "/«b.name»/Output" + i + "vs";
   	   		«ELSE»
   	   		String mutFilename = hashmapModelFilenames.get(modelFilename) + "/«b.name»/" + hashmapModelFolders.get(modelFilename) + "/Output" + i + ".model";
   	   		String mutPath = hashmapModelFilenames.get(modelFilename) + "/«b.name»/" + hashmapModelFolders.get(modelFilename) + "/Output" + i + "vs";
   	   		«ENDIF»
   	   		boolean isRepeated = true;
   			int attempts = 0;
   			int max = 0;
   			while ((isRepeated == true) && (attempts < maxAttempts)) {
   				List<String> mutPaths = new ArrayList<String>();
				Mutations muts = AppliedMutationsFactory.eINSTANCE.createMutations();
   				attempts++;
   				//RESET COUNTER: «nMethod = numMethod»
   				//RESET COUNTER: «nCompositeMethod = numCompositeMethod»
   				//RESET COUNTER: «nMutation = numMutation»
   				//RESET COUNTER: «nRegistryMutation = numRegistryMutation»
   				//RESET COUNTER: «nRegistryMethod = numRegistryMethod»
   				//RESET COUNTER: «nCompositeRegistryMethod = numCompositeRegistryMethod»
   				//RESET COUNTER: «nCompositeCommands = numCompositeCommands»

   	   			«FOR c : b.commands »
   	   				«IF c instanceof Mutator»
   	   				«c.compile»		
   	   				«ENDIF»
				«ENDFOR»
				
				// MUTANT COMPLETION AND REGISTRY
				HashMap<String, ArrayList<String>> rules = new HashMap<String, ArrayList<String>>();
	       		«FOR constraint : e.constraints»
	       		if (rules.get("«constraint.type.name»") == null) {
	       			rules.put("«constraint.type.name»", new ArrayList<String>());
	       		}
	       		ArrayList<String> newrules = rules.get("«constraint.type.name»");
	       		newrules.add("«constraint.rule»");
       			rules.put("«constraint.type.name»", newrules);
       			«ENDFOR»
       			
				isRepeated = registryMutantWithBlocks(ecoreURI, packages, seed, model, rules, muts, modelFilename, mutFilename, registry, hashsetMutantsBlock, hashmapModelFilenames, hashmapModelFolders, "«b.name»", fromNames, i, mutPaths, hashmapMutVersions);
      
	    		//Reload input
	    		try {
					model.unload();
					model.load(null); 
				} catch (Exception e) {}
   			}
   		}
   		«IF b.repeat == Repeat.YES»
   		hashmapMutants.put(modelFilename, hashsetMutantsBlock);
   		«ENDIF»
	'''
	
	def compile(Mutator e)'''
	«IF e instanceof CompositeMutator»
		//COUNTER: «nMethod = nMethod + ModelManager.mutatorSize(e)»
		//COMPOSITE REGISTRY COUNTER: «nCompositeRegistryMethod = nCompositeRegistryMethod + 1»
		«IF (e.fixed == 0)»
		«IF (e.max - e.min > 0)»
		int max«nCompositeCommands» = getRandom(«e.max - e.min») + «e.min»;
		«ENDIF»
		«IF (e.min == 0) && (e.max == 0)»
		int max«nCompositeCommands» = 1;
		«ELSEIF (e.min == e.max)»
		int max«nCompositeCommands» = «e.min»;
		«ENDIF»
		«ELSE»
		int max«nCompositeCommands» = «e.fixed»;
		«ENDIF»
		for (int j«nCompositeCommands» = 0; j«nCompositeCommands» < max«nCompositeCommands»; j«nCompositeCommands»++) {
		«IF e.name != null»
			//NAME:«compositeCommandName = e.name + nCompositeCommands.toString()»
		«ELSE»
			//NAME:«compositeCommandName = nCompositeCommands.toString()»
		«ENDIF»

		//COMPOSITE METHOD NAME:«compositeMethodName = compositeCommands.get(nCompositeCommands)»
		//COMMAND: «nCompositeCommands = nCompositeCommands + ModelManager.compositeMutatorSize(e)»
		ArrayList<Mutator> l«compositeCommandName» = «compositeMethodName»(packages, model, hashmapEObject, hashmapList);
		//COUNTER: «nRegistryMutation = nRegistryMutation + 1»
		//REGISTRY METHOD NAME:«compositeRegistryMethodName = "compositeRegistry" + nCompositeRegistryMethod.toString()»
		
		if (l«compositeCommandName» != null) {
			for (Mutator mut : l«compositeCommandName») {
				«IF executeMutation == true»
				if (mut != null) {
					Object mutated = mut.mutate();
				}
				«ENDIF»
			}
			AppMutation appMut = «compositeRegistryMethodName»(l«compositeCommandName», hmMutator, seed);
			if (appMut != null) {
				muts.getMuts().add(appMut);
			}
		}
		}
		//COUNTER: «nRegistryMutation = nRegistryMutation + ModelManager.mutatorSize(e)»
	«ELSE»
   	   	//COUNTER: «nMethod = nMethod + 1»	
		//COMMAND: «nCommands = nCommands + 1»
		//REGISTRY COUNTER: «nRegistryMethod = nRegistryMethod + 1»
		«IF (e.fixed == 0)»
		«IF (e.max - e.min > 0)»
		max = getRandom(«e.max - e.min») + «e.min»;
		«ENDIF»
		«IF (e.min == 0) && (e.max == 0)»
		max = 1;
		«ELSEIF (e.min == e.max)»
		max = «e.min»;
		«ENDIF»
		«ELSE»
		max = «e.fixed»;
		«ENDIF»
		for (int j = 0; j < max; j++) {
		«IF e.name != null»
			//NAME:«commandName = e.name + nCommands.toString()»
		«ELSE»
			//NAME:«commandName = nCommands.toString()»
		«ENDIF»
		//METHOD NAME:«methodName = "mutation" + nMethod.toString()»
		
		ArrayList<Mutator> l«commandName» = «methodName»(packages, model, hashmapEObject, hashmapList);
		//COUNTER: «nRegistryMutation = nRegistryMutation + 1»
		//REGISTRY METHOD NAME:«registryMethodName = "registry" + nRegistryMethod.toString()»
		
		if (l«commandName» != null) {
			int k = 0;
			for (Mutator mut : l«commandName») {
				«IF executeMutation == true»
				if (mut != null) {
					Object mutated = mut.mutate();
					if (mutated != null) {
						«IF e instanceof CreateObjectMutator || e instanceof SelectObjectMutator || e instanceof CloneObjectMutator»
						if (mutated instanceof EObject) {
						«IF e.name != null»
						«IF e instanceof CreateObjectMutator»
							hashmapEObject.put("«e.name»", mut.getObject());
						«ENDIF»
						«IF e instanceof SelectObjectMutator»
							«IF e.object instanceof SpecificObjectSelection || e.object instanceof RandomTypeSelection»
							hashmapEObject.put("«e.name»", mut.getObject());
							«ENDIF»
							«IF e.object instanceof CompleteTypeSelection»
							List<EObject> listEObjects = null;
							if (hashmapList.get("«e.name»") != null) {
								listEObjects = hashmapList.get("«e.name»");
							}
							else {
								listEObjects = new ArrayList<EObject>();
							}
							listEObjects.add(mut.getObject());
							hashmapList.put("«e.name»", listEObjects);
							«ENDIF»
						«ENDIF»
						«IF e instanceof CloneObjectMutator»
							«IF e.object instanceof SpecificObjectSelection || e.object instanceof RandomTypeSelection»
							hashmapEObject.put("«e.name»", mut.getObject());
							«ENDIF»
							«IF e.object instanceof CompleteTypeSelection»
							List<EObject> listEObjects = null;
							if (hashmapList.get("«e.name»") != null) {
								listEObjects = hashmapList.get("«e.name»");
							}
							else {
								listEObjects = new ArrayList<EObject>();
							}
							listEObjects.add(mut.getObject());
							hashmapList.put("«e.name»", listEObjects);
							«ENDIF»
						«ENDIF»
						«ENDIF»
						}
						«ENDIF»
						«IF e.name != null»
						«IF e instanceof SelectSampleMutator»
						if (mutated instanceof List<?>) {
							List<EObject> mutObjects = ((SelectSampleMutator) mut).getObjects();
							List<EObject> listEObjects = null;
							if (hashmapList.get("«e.name»") != null) {
								listEObjects = hashmapList.get("«e.name»");
							}
							else {
								listEObjects = new ArrayList<EObject>();
							}
							listEObjects.addAll(mutObjects);
							hashmapList.put("«e.name»", listEObjects);
						}
						«ENDIF»
						«ENDIF»
						«IF (e instanceof SelectObjectMutator == false) && (e instanceof SelectSampleMutator == false)»
						String mutatorPath = mutPath + "/Output" + i + "_" + j + "_" + k + "_«nMethod».model";
						ModelManager.saveOutModel(model, mutatorPath);
						if (mutPaths.contains(mutatorPath) == false) {
							mutPaths.add(mutatorPath);
						}
						«ENDIF»
						AppMutation appMut = «registryMethodName»(mut, hmMutator, seed, mutPaths, packages);
						if (appMut != null) {
							muts.getMuts().add(appMut);
						}
					}
				}
				«ENDIF»
				k++;
			}
		}
		}
	«ENDIF»
	'''
   //END COMMANDS
   //*************
}