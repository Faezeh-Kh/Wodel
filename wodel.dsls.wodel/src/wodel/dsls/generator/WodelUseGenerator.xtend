/*
 * generated by Xtext
 */
package wodel.dsls.generator

import mutatorenvironment.CreateObjectMutator
import mutatorenvironment.ModifySourceReferenceMutator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import mutatorenvironment.ModifyTargetReferenceMutator
import mutatorenvironment.CreateReferenceMutator
import mutatorenvironment.ModifyInformationMutator
import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import java.util.List
import java.util.HashMap
import org.eclipse.emf.ecore.EPackage
import manager.ModelManager
import mutator.MutatorUtils
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EClassifier
import mutatorenvironment.MutatorEnvironment
import mutatorenvironment.RemoveObjectMutator
import mutatorenvironment.RemoveCompleteReferenceMutator
import mutatorenvironment.SelectObjectMutator
import mutatorenvironment.SelectSampleMutator
import mutatorenvironment.CloneObjectMutator
import use.UseUtils
import mutatorenvironment.Mutator
import org.eclipse.core.runtime.Platform

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class WodelUseGenerator implements IGenerator {
	
	private static class Cardinality {
		int min = 0
		int max = 0
	}
	
	private String fileName
	private String className
	private String useName
	private String propertiesName
	private String path
	private EClass root
	private String dummyClassName = "Dummy"
	private HashMap<String, HashMap<String, String>> useReferences = new HashMap<String, HashMap<String, String>>()
	
	private int maxInteger
	private int minInteger
	private int maxString
	private int maxCardinality
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		manager.WodelContext.setProject(null)
		manager.WodelContext.getProject
		path = ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject		

		for(e: resource.allContents.toIterable.filter(MutatorEnvironment)) {
			
			
			maxInteger = Integer.parseInt(Platform.getPreferencesService().getString("wodel.dsls.Wodel", "Maximum integer value", "100", null))
			minInteger = Integer.parseInt(Platform.getPreferencesService().getString("wodel.dsls.Wodel", "Minimum integer value", "-100", null))
			maxString = Integer.parseInt(Platform.getPreferencesService().getString("wodel.dsls.Wodel", "Maximum string value", "10", null))
			maxCardinality = Integer.parseInt(Platform.getPreferencesService().getString("wodel.dsls.Wodel", "Maximum cardinality value", "10", null))
			fileName = resource.URI.lastSegment
					
			fileName = fileName.replaceAll(".mutator", ".java")
			className = fileName.replaceAll(".java", "")
			useName = fileName.replaceAll(".java", ".use")
			propertiesName = fileName.replaceAll(".java", ".properties") 
     		fsa.generateFile(useName, e.use.removeComments("use"))
     		fsa.generateFile(propertiesName, e.properties.removeComments("properties"))
		}
	}
	
	def CharSequence removeComments(CharSequence contents, String type) {
		if (type.equals("use")) {
			return contents.toString.replaceAll("--.*", "").replaceAll("(?m)^[ \t]*\r?\n", "")
		}
		if (type.equals("properties")) {
			return contents.toString.replaceAll("#.*", "").replaceAll("(?m)^[ \t]*\r?\n", "")
		}
	}
	
	def getRandom(int range) {
		if(range==1) return 0
		
        var int value = System.nanoTime().intValue % range
        if (value<0) value= value*-1
        
        return value
	}
	
   def void incContainers(EClass eclass, HashMap<String, Cardinality> classes, List<EPackage> packages, EClass root) {
   		var List<EClassifier> containers = ModelManager.getContainerTypes(packages, eclass.name)
   		for (EClassifier container : containers) {
   			if (!container.name.equals(root.name) && !container.name.equals(eclass.name)) {
   				var Cardinality cardinality = classes.get(container.name)
   				for (EReference ref : (container as EClass).EAllReferences) {
   					if (ref.EType.name.equals(eclass.name)) {
   						if (ref.isContainment) {
   							if (cardinality.min == 0) {
   								cardinality.min++
   							}
   						}
   					}
   				}
   				classes.put(container.name, cardinality)
   				incContainers(container as EClass, classes, packages, root)
   			}
   		}
   }

   def void process(HashMap<String, Cardinality> classes, List<Mutator> commands, ArrayList<EPackage> packages) {
		for (Mutator mut : commands) {
			if (mut instanceof CreateObjectMutator) {
				if (mut.type != null) {
					var String name = mut.type.name
					var List<EClassifier> containers = ModelManager.getContainerTypes(packages, name)
					for (EClassifier container : containers) {
						var EReference containerReference = null
						for (EReference ref : (container as EClass).EAllReferences) {
							if (ref.EType.name.equals(name) && ref.isContainment()) {
								containerReference = ref
							}
						}
					}
				}
			}
			if (mut instanceof RemoveObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof CreateReferenceMutator) {
				if (mut.target != null) {
					var String name = MutatorUtils.getTypeName(mut.target)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifySourceReferenceMutator) {
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
				if (mut.newSource != null) {
					var String name = MutatorUtils.getTypeName(mut.newSource)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifyTargetReferenceMutator) {
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++	
						}
					}
				}
				if (mut.newTarget != null) {
					var String name = MutatorUtils.getTypeName(mut.newTarget) {
						if (classes.containsKey(name)) {
							var Cardinality cardinality = classes.get(name)
							if (cardinality.min == 0) {
								cardinality.min++
							}
						}
					}
				}
			}
			if (mut instanceof RemoveCompleteReferenceMutator) {
				if (mut.type != null) {
					var String name = mut.type.name
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof SelectObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof SelectSampleMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof CloneObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifyInformationMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
		}
   }
   
   def void processBlocks(HashMap<String, Cardinality> classes, HashMap<String, HashMap<String, Cardinality>> blockCardinalities) {
		for (String blockName : blockCardinalities.keySet()) {
			var HashMap<String, Cardinality> cardinality = blockCardinalities.get(blockName)
			for (String className : cardinality.keySet()) {
				var Cardinality cBlock = cardinality.get(className)
				var Cardinality cMain = classes.get(className)
				if (cBlock.min > cMain.min) {
					cMain.min = cBlock.min
				} 
				classes.put(className, cMain)
			}
		}
   }
   
   def properties(MutatorEnvironment e) '''
		[default]
		
		Integer_min = «minInteger»
		Integer_max = «maxInteger»
		
		String_max = «maxString»
		
		«dummyClassName»_min = 1
		«dummyClassName»_max = 1
		
		# «var ArrayList<EPackage> packages = ModelManager.loadMetaModel(e.definition.metamodel)»
		# «var ArrayList<EClass> eclasses = ModelManager.getEClasses(packages)»
		«FOR eclass : eclasses»
			#«var List<EClassifier> containerTypes = ModelManager.getContainerTypes(packages, eclass.name)»
			«IF containerTypes.size == 0»
			#«root = eclass»
			«ENDIF»
		«ENDFOR»

		# «var HashMap<String, Cardinality> classes = new HashMap<String, Cardinality>()»
		«FOR eclass : eclasses»
		# «var Cardinality cardinality = new Cardinality()»
		# «cardinality.min = 0»
		«IF eclass.name.equals(root.name)»
		# «cardinality.min++»
		# «cardinality.max = 1»
		«ELSE»
		# «cardinality.max = maxCardinality»
		«ENDIF»
		# «classes.put(eclass.name, cardinality)»
		«ENDFOR»
		«IF e.commands.size > 0»
		# «classes.process(e.commands, packages)»
		«ENDIF»
		
		«IF e.blocks.size > 0»
		# «var HashMap<String, HashMap<String, Cardinality>> blockCardinalities = new HashMap<String, HashMap<String, Cardinality>>()»
		«FOR b : e.blocks»
		# «var HashMap<String, Cardinality> cls = new HashMap<String, Cardinality>()»
		«FOR eclass : eclasses»
		# «var Cardinality cardinality = new Cardinality()»
		# «cardinality.min = 0»
		«IF eclass.name.equals(root.name)»
		# «cardinality.min++»
		«ENDIF»
		# «cls.put(eclass.name, cardinality)»
		«ENDFOR»
		# «cls.process(b.commands, packages)»
		# «blockCardinalities.put(b.name, cls)»
		«ENDFOR»
		
		#«classes.processBlocks(blockCardinalities)»
		«ENDIF»

		«FOR eclass : eclasses»
		«eclass.name»_min = «classes.get(eclass.name).min»
		«eclass.name»_max = «classes.get(eclass.name).max»
		«ENDFOR»

		# Associations
		# «var HashMap<String, Integer> associationNames = new HashMap<String, Integer>()»
		«FOR eclass : eclasses»
		# «var List<EReference> refs = eclass.getEReferences()»
		«IF refs.size > 0»
		«FOR ref : refs»
		# «var String associationName = eclass.name + ref.EType.name»
		«IF associationNames.get(associationName) != null»
		# «associationNames.put(associationName, associationNames.get(associationName) + 1)»
		# «associationName += associationNames.get(associationName)»
		«ELSE»
		# «associationNames.put(associationName, 0)»
		«ENDIF»
		# «var int min = 0»
		«IF (classes.get(eclass.name).min < classes.get(ref.EType.name).min)»
		# «min = classes.get(eclass.name).min»
		«ELSE»
		# «min = classes.get(ref.EType.name).min»
		«ENDIF»
		«associationName»_min = «min»
		«associationName»_max = «maxCardinality»
		«ENDFOR»
		«ENDIF»
		«ENDFOR»
   '''
   
   def use(MutatorEnvironment e) '''
	«UseUtils.generateUSE(e, className, useReferences)»
	'''
}