/*
 * generated by Xtext
 */
package wodel.dsls.generator

import mutatorenvironment.CreateObjectMutator
import mutatorenvironment.ModifySourceReferenceMutator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import mutatorenvironment.ModifyTargetReferenceMutator
import mutatorenvironment.CreateReferenceMutator
import mutatorenvironment.ModifyInformationMutator
import java.util.ArrayList
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EReference
import java.util.List
import java.util.HashMap
import org.eclipse.emf.ecore.EPackage
import manager.ModelManager
import manager.MutatorUtils
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EClassifier
import org.eclipse.emf.ecore.EAnnotation
import org.eclipse.emf.common.util.EMap
import java.util.Set
import mutatorenvironment.MutatorEnvironment
import mutatorenvironment.RemoveObjectMutator
import mutatorenvironment.RemoveCompleteReferenceMutator
import mutatorenvironment.SelectObjectMutator
import mutatorenvironment.SelectSampleMutator
import mutatorenvironment.CloneObjectMutator
import mutatorenvironment.Expression
import mutatorenvironment.AttributeEvaluation
import mutatorenvironment.AttributeType
import mutatorenvironment.SpecificStringType
import mutatorenvironment.StringType
import mutatorenvironment.DoubleType
import mutatorenvironment.SpecificDoubleType
import mutatorenvironment.BooleanType
import mutatorenvironment.SpecificBooleanType
import mutatorenvironment.IntegerType
import mutatorenvironment.SpecificIntegerType
import manager.UseUtils
import mutatorenvironment.Operator
import mutatorenvironment.Mutator
import mutatorenvironment.ReferenceSet
import mutatorenvironment.Evaluation
import mutatorenvironment.SpecificObjectSelection
import mutatorenvironment.RandomTypeSelection
import mutatorenvironment.CompleteTypeSelection
import wodel.dsls.scoping.WodelScopeProvider
import mutatorenvironment.SpecificClosureSelection
import mutatorenvironment.OtherTypeSelection
import mutatorenvironment.AttributeSet
import mutatorenvironment.AttributeScalar
import mutatorenvironment.AttributeUnset
import mutatorenvironment.AttributeSwap
import mutatorenvironment.AttributeCopy
import mutatorenvironment.ObjectAttributeType
import mutatorenvironment.AttributeReverse
import mutatorenvironment.AttributeOperation
import mutatorenvironment.ReferenceEvaluation
import mutatorenvironment.ObSelectionStrategy
import mutatorenvironment.ReferenceInit
import manager.MutatorDependencies

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class WodelUseGenerator implements IGenerator {
	
	private static class Cardinality {
		int min = 0;
		int max = 10;
	}
	
	private static class Constraint {
		String text = "";
		HashMap<String, Integer> sizeByBlock = new HashMap<String, Integer>()
		String type = "";
		List<String> variables = new ArrayList<String>()
		String className = ""; 
	}
	
	private static class Mandatory {
		String className = "";
		String featureName = "";
		String value = "";
		String type = "";
	}
	
	private String fileName
	private String className
	private String useName
	private String propertiesName
	private String path
	private EClass root
	private List<Mandatory> mandatories = new ArrayList<Mandatory>()
	private String dummyClassName = "Dummy"
	private HashMap<String, HashMap<String, String>> useReferences = new HashMap<String, HashMap<String, String>>()
	private HashMap<String, Boolean> closures = new HashMap<String, Boolean>()
	
	private HashMap<String, Integer> maxSize = new HashMap<String, Integer>()
	
	private MutatorDependencies mutatorDependencies
	
	private HashMap<String, HashMap<String, List<Constraint>>> mutConstraint = new HashMap<String, HashMap<String, List<Constraint>>>()
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		manager.WodelContext.setProject(null)
		manager.WodelContext.getProject
		path = ModelManager.getWorkspaceAbsolutePath+'/'+manager.WodelContext.getProject		

		for(e: resource.allContents.toIterable.filter(MutatorEnvironment)) {
			
			fileName = resource.URI.lastSegment
					
			fileName = fileName.replaceAll(".mutator", ".java")
			className = fileName.replaceAll(".java", "")
			useName = fileName.replaceAll(".java", ".use")
			propertiesName = fileName.replaceAll(".java", ".properties") 
     		fsa.generateFile(useName, e.use.removeComments("use"))
     		fsa.generateFile(propertiesName, e.properties.removeComments("properties"))
		}
	}
	
	def CharSequence removeComments(CharSequence contents, String type) {
		if (type.equals("use")) {
			return contents.toString.replaceAll("--.*", "").replaceAll("(?m)^[ \t]*\r?\n", "")
		}
		if (type.equals("properties")) {
			return contents.toString.replaceAll("#.*", "").replaceAll("(?m)^[ \t]*\r?\n", "")
		}
	}
	
	def getRandom(int range) {
		if(range==1) return 0
		
        var int value = System.nanoTime().intValue % range
        if (value<0) value= value*-1
        
        return value
	}
	
   def void incContainers(EClass eclass, HashMap<String, Cardinality> classes, List<EPackage> packages, EClass root) {
   		var List<EClassifier> containers = ModelManager.getContainerTypes(packages, eclass.name)
   		for (EClassifier container : containers) {
   			if (!container.name.equals(root.name) && !container.name.equals(eclass.name)) {
   				var Cardinality cardinality = classes.get(container.name)
   				for (EReference ref : (container as EClass).EAllReferences) {
   					if (ref.EType.name.equals(eclass.name)) {
   						if (ref.isContainment) {
   							if (cardinality.min == 0) {
   								cardinality.min++
   							}
   						}
   					}
   				}
   				classes.put(container.name, cardinality)
   				incContainers(container as EClass, classes, packages, root)
   			}
   		}
   }

   def Mandatory getMandatory(List<Mandatory> mandatories, String featureName) {
   		for (Mandatory mandatory : mandatories) {
   			if (mandatory.featureName.equals(featureName)) {
   				return mandatory
   			}
   		}
   		return null
   }


   def void process(HashMap<String, Cardinality> classes, List<Mutator> commands, ArrayList<EPackage> packages) {
		for (Mutator mut : commands) {
			if (mut instanceof CreateObjectMutator) {
				if (mut.type != null) {
					var String name = mut.type.name
					var List<EClassifier> containers = ModelManager.getContainerTypes(packages, name)
					for (EClassifier container : containers) {
						var EReference containerReference = null
						for (EReference ref : (container as EClass).EAllReferences) {
							if (ref.EType.name.equals(name) && ref.isContainment()) {
								containerReference = ref
							}
						}
					}
				}
			}
			if (mut instanceof RemoveObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof CreateReferenceMutator) {
				if (mut.target != null) {
					var String name = MutatorUtils.getTypeName(mut.target)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifySourceReferenceMutator) {
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
				if (mut.newSource != null) {
					var String name = MutatorUtils.getTypeName(mut.newSource)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifyTargetReferenceMutator) {
				if (mut.source != null) {
					var String name = MutatorUtils.getTypeName(mut.source)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++	
						}
					}
				}
				if (mut.newTarget != null) {
					var String name = MutatorUtils.getTypeName(mut.newTarget) {
						if (classes.containsKey(name)) {
							var Cardinality cardinality = classes.get(name)
							if (cardinality.min == 0) {
								cardinality.min++
							}
						}
					}
				}
			}
			if (mut instanceof RemoveCompleteReferenceMutator) {
				if (mut.type != null) {
					var String name = mut.type.name
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof SelectObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof SelectSampleMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof CloneObjectMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
			if (mut instanceof ModifyInformationMutator) {
				if (mut.object != null) {
					var String name = MutatorUtils.getTypeName(mut.object)
					if (classes.containsKey(name)) {
						var Cardinality cardinality = classes.get(name)
						if (cardinality.min == 0) {
							cardinality.min++
						}
					}
				}
			}
		}
   }
   
   def void processBlocks(HashMap<String, Cardinality> classes, HashMap<String, HashMap<String, Cardinality>> blockCardinalities) {
		for (String blockName : blockCardinalities.keySet()) {
			var HashMap<String, Cardinality> cardinality = blockCardinalities.get(blockName)
			for (String className : cardinality.keySet()) {
				var Cardinality cBlock = cardinality.get(className)
				var Cardinality cMain = classes.get(className)
				if (cBlock.min > cMain.min) {
					cMain.min = cBlock.min
				} 
				classes.put(className, cMain)
			}
		}
   }
   
   def properties(MutatorEnvironment e) '''
		[default]
		
		Integer_min = -100
		Integer_max = 100
		
		String_max = 10
		
		«dummyClassName»_min = 1
		«dummyClassName»_max = 1
		
		# «var ArrayList<EPackage> packages = ModelManager.loadMetaModel(e.definition.metamodel)»
		# «var ArrayList<EClass> eclasses = ModelManager.getEClasses(packages)»
		«FOR eclass : eclasses»
			#«var List<EClassifier> containerTypes = ModelManager.getContainerTypes(packages, eclass.name)»
			«IF containerTypes.size == 0»
			#«root = eclass»
			«ENDIF»
		«ENDFOR»

		# «var HashMap<String, Cardinality> classes = new HashMap<String, Cardinality>()»
		«FOR eclass : eclasses»
		# «var Cardinality cardinality = new Cardinality()»
		# «cardinality.min = 0»
		«IF eclass.name.equals(root.name)»
		# «cardinality.min++»
		# «cardinality.max = 1»
		«ENDIF»
		# «classes.put(eclass.name, cardinality)»
		«ENDFOR»
		«IF e.commands.size > 0»
		# «classes.process(e.commands, packages)»
		«ENDIF»
		
		«IF e.blocks.size > 0»
		# «var HashMap<String, HashMap<String, Cardinality>> blockCardinalities = new HashMap<String, HashMap<String, Cardinality>>()»
		«FOR b : e.blocks»
		# «var HashMap<String, Cardinality> cls = new HashMap<String, Cardinality>()»
		«FOR eclass : eclasses»
		# «var Cardinality cardinality = new Cardinality()»
		# «cardinality.min = 0»
		«IF eclass.name.equals(root.name)»
		# «cardinality.min++»
		«ENDIF»
		# «cls.put(eclass.name, cardinality)»
		«ENDFOR»
		# «cls.process(b.commands, packages)»
		# «blockCardinalities.put(b.name, cls)»
		«ENDFOR»
		
		#«classes.processBlocks(blockCardinalities)»
		«ENDIF»

		«FOR eclass : eclasses»
		«eclass.name»_min = «classes.get(eclass.name).min»
		«eclass.name»_max = «classes.get(eclass.name).max»
		«ENDFOR»

		# Associations
		# «var HashMap<String, Integer> associationNames = new HashMap<String, Integer>()»
		«FOR eclass : eclasses»
		# «var List<EReference> refs = eclass.getEReferences()»
		«IF refs.size > 0»
		«FOR ref : refs»
		# «var String associationName = eclass.name + ref.EType.name»
		«IF associationNames.get(associationName) != null»
		# «associationNames.put(associationName, associationNames.get(associationName) + 1)»
		# «associationName += associationNames.get(associationName)»
		«ELSE»
		# «associationNames.put(associationName, 0)»
		«ENDIF»
		# «var int min = 0»
		«IF (classes.get(eclass.name).min < classes.get(ref.EType.name).min)»
		# «min = classes.get(eclass.name).min»
		«ELSE»
		# «min = classes.get(ref.EType.name).min»
		«ENDIF»
		«associationName»_min = «min»
		«associationName»_max = 10
		«ENDFOR»
		«ENDIF»
		«ENDFOR»
   '''
   
   def void getSizeConstraints(EClass rootClass, EClass eclass, List<EPackage> packages, List<Constraint> constraints, boolean inc, EReference ref, String blockName, boolean isContainer) {
   		var Constraint constraint = new Constraint()
   		constraint.text = UseUtils.encodeWord(eclass.name) + ".allInstances()->size()"
   		constraint.type = "size"
   		constraint.className = eclass.name
   		if (!eclass.name.equals(rootClass.name)) {
   			var boolean b = false
   			for (Constraint c : constraints) {
				if (constraint.text.equals(c.text)) {
   					b = true
   					constraint = c
	   			}
   			}
   			if (b == false) {
   				var boolean containerInc = false
				if (inc == true) {
					if (constraint.sizeByBlock.get(blockName) != null) {
						if (isContainer == false) {
   							constraint.sizeByBlock.put(blockName, constraint.sizeByBlock.get(blockName) + 1)
   						}
   					}
   					else {
   						if (isContainer == false) {
   							constraint.sizeByBlock.put(blockName, 1)
   						}
   					}
		   		}
		   		else {
		   			constraint.sizeByBlock.put(blockName, 0)
		   		}
		   		if (ref != null) {
		   			if (ref.upperBound != -1 && constraint.sizeByBlock.get(blockName) > ref.upperBound) {
		   				containerInc = true
		   			}
		   		}
	   			constraints.add(constraint)
				var List<EClassifier> containers = ModelManager.getContainerTypes(packages, eclass.name)
   				if (containers.size	== 1) {
   					var EClass container = containers.get(0) as EClass
   					var EReference contRef = ModelManager.getContainingReference(container, eclass)
					getSizeConstraints(rootClass, container, packages, constraints, containerInc, contRef, blockName, true)
   				}
   			}
   			if (b == true) {
   				var boolean containerInc = false
				if (constraint.sizeByBlock.get(blockName) == null) {
					constraint.sizeByBlock.put(blockName, 0)
				}
				else {
					if (isContainer == false) {
						constraint.sizeByBlock.put(blockName, constraint.sizeByBlock.get(blockName) + 1)
					}
				}
				if (ref != null) {
		   			if (ref.upperBound != -1 && constraint.sizeByBlock.get(blockName) > ref.upperBound) {
		   				containerInc = true
		   			}
				}
   				var List<EClassifier> containers = ModelManager.getContainerTypes(packages, eclass.name)
   				if (containers.size == 1) {
   					var EClass container = containers.get(0) as EClass
   					var EReference contRef = ModelManager.getContainingReference(container, eclass)
   					getSizeConstraints(rootClass, container, packages, constraints, containerInc, contRef, blockName, true)
   				}
   			}
   		}
   }
   
   def compile(List<Mutator> commands, EClass rootClass, List<EPackage> packages, List<String> classNames, List<Constraint> constraints, String blockName) {
		for (mut : commands) {
			var Integer times = mutatorDependencies.needsOCLConstraints(mut);
			if (times != null && times > 0) {
				var String mutName = MutatorUtils.getMutatorName(mut)
				if (mut instanceof CreateObjectMutator) {
					if (mut.type != null) {
						var String name = mut.type.name
						var List<EClassifier> containers = ModelManager.getContainerTypes(packages, name)
						for (EClassifier container : containers) {
							var EReference containerReference = null
							for (EReference ref : (container as EClass).EAllReferences) {
								if (ref.EType.name.equals(name) && ref.isContainment) {
									containerReference = ref
								}
							}
							if (containerReference != null) {
								if (classNames.contains(container.name)) {
									getSizeConstraints(rootClass, container as EClass, packages, constraints, false, null, blockName, false)
								}
							}
						}
						if (mut.references != null) {
							mut.references.compile(constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof RemoveObjectMutator) {
					if (mut.object != null) {
						var String name = MutatorUtils.getTypeName(mut.object)
						if (classNames.contains(name)) {
							for (var int i = 0; i < times; i++) {
								getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
							}
						}
						if (mut.object.expression != null) {
							mut.object.expression.compile(name, constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof CreateReferenceMutator) {
					if (mut.target != null) {
						var String name = MutatorUtils.getTypeName(mut.target)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.target.expression != null) {
							mut.target.expression.compile(name, constraints, blockName, mutName)
						}
					}
					if (mut.source != null) {
						var String name = MutatorUtils.getTypeName(mut.source)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.source.expression != null) {
							mut.source.expression.compile(name, constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof ModifySourceReferenceMutator) {
					if (mut.source != null) {
						var String name = MutatorUtils.getTypeName(mut.source)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.source.expression != null) {
							mut.source.expression.compile(name, constraints, blockName, mutName)
						}
					}
					if (mut.newSource != null) {
						var String name = MutatorUtils.getTypeName(mut.newSource)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.newSource.expression != null) {
							mut.newSource.expression.compile(name, constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof ModifyTargetReferenceMutator) {
					if (mut.source != null) {
						var String name = MutatorUtils.getTypeName(mut.source)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.source.expression != null) {
							mut.source.expression.compile(name, constraints, blockName, mutName)
						}
					}
					if (mut.newTarget != null) {
						var String name = MutatorUtils.getTypeName(mut.newTarget)
						if (classNames.contains(name)) {
							if (mut.newTarget instanceof OtherTypeSelection) {
								getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, true, null, blockName, false)
							}
							else {
								getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
							}
						}
						if (mut.newTarget.expression != null) {
							mut.newTarget.expression.compile(name, constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof RemoveCompleteReferenceMutator) {
					if (mut.type != null) {
						var String name = mut.type.name
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
					}
				}
				if (mut instanceof SelectObjectMutator) {
					if (mut.object != null) {
						var String name = MutatorUtils.getTypeName(mut.object)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.object.expression != null) {
							mut.object.expression.compile(name, constraints, blockName, mutName)
						}
						if (mut.container != null) {
							if (mut.container instanceof SpecificClosureSelection) {
								closures.put(name, true)
							}
						}
					}
				}
				if (mut instanceof SelectSampleMutator) {
					if (mut.object != null) {
						var String name = MutatorUtils.getTypeName(mut.object)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						//if (mut.object.expression != null) {
						//	mut.object.expression.compile(name, constraints)
						//}
					}
				}
				if (mut instanceof CloneObjectMutator) {
					if (mut.object != null) {
						var String name = MutatorUtils.getTypeName(mut.object)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.object.expression != null) {
							mut.object.expression.compile(name, mut.attributes, constraints, blockName, mutName)
						}
					}
				}
				if (mut instanceof ModifyInformationMutator) {
					if (mut.object != null) {
						var String name = MutatorUtils.getTypeName(mut.object)
						if (classNames.contains(name)) {
							getSizeConstraints(rootClass, ModelManager.getEClassByName(packages, name), packages, constraints, false, null, blockName, false)
						}
						if (mut.object.expression != null) {
							mut.object.expression.compile(name, constraints, blockName, mutName)
							mut.object.expression.compile(name, mut.attributes, constraints, blockName, mutName)
						}
						if (mut.references != null) {
							mut.references.compile(constraints, blockName, mutName)
						}
					}
				}
			}
		}
   }
   
   def String getUniqueName(String newName, List<String> names, int n) {
   		var String returnName = newName
   		var ArrayList<String> nextNames = new ArrayList<String>()
   		if (names.size() > 0) {
   			if (names.contains(newName)) {
   				returnName = newName + n
   				nextNames.addAll(names);
   				nextNames.remove(newName)
   				returnName = returnName.getUniqueName(nextNames, n + 1)
   			}
   		}
   		return returnName
   }
   
   def int maxSize(Constraint constraint) {
   		var int max = 0
		for (String blockName : constraint.sizeByBlock.keySet) {
			if (constraint.sizeByBlock.get(blockName) > max) {
				max = constraint.sizeByBlock.get(blockName)
			}
		}
		return max   	
   }
   
   def use(MutatorEnvironment e) '''
   	model «UseUtils.encodeWord(className)»
		-- «var ArrayList<EPackage> packages = ModelManager.loadMetaModel(e.definition.metamodel)»
		-- «var ArrayList<EClass> classes = ModelManager.getEClasses(packages)»
		-- «var ArrayList<String> classNames = new ArrayList<String>()»
		-- «var List<Constraint> constraints = new ArrayList<Constraint>()»
		«FOR eclass : classes»
		--«var List<EClassifier> containerTypes = ModelManager.getContainerTypes(packages, eclass.name)»
		«IF containerTypes.size == 0»
		--«root = eclass»
		«ENDIF»
		-- «classNames.add(eclass.name)»
		-- «closures.put(eclass.name, false)»
		«ENDFOR»

		-- «/* var String dummyClassName = "Dummy" */»
		«FOR eclass : classes»
			--«var ArrayList<String> superclasses = new ArrayList<String>()»
			«FOR superclass : eclass.ESuperTypes»
			--«superclasses.add(superclass.name)»
			«ENDFOR»
			--«var superclassestext = ""»
			«IF superclasses.size > 0»
			--«superclassestext = superclasses.get(0)»
			«IF superclasses.size > 1»
			«FOR superclassname : superclasses.subList(1, superclasses.size() - 1)»
			--«superclassestext = superclassestext + ", " + superclassname»
			«ENDFOR»
			«ENDIF»
			class «UseUtils.encodeWord(eclass.name)» < «UseUtils.encodeWord(superclassestext)»
			«ELSE»
			class «UseUtils.encodeWord(eclass.name)»
			«ENDIF»
				-- «var List<EAttribute> atts = eclass.getEAttributes()»
				«IF atts.size > 0»
				attributes
					«FOR att : atts»
					«IF att.EType.name.equals("EString")»
					«UseUtils.encodeWord(att.name)» : String
					«ENDIF»
					«IF att.EType.name.equals("EBoolean")»
					«UseUtils.encodeWord(att.name)» : Boolean
					«ENDIF»
					«IF att.EType.name.equals("EInt")»
					«UseUtils.encodeWord(att.name)» : Integer
					«ENDIF»
					«IF att.EType.name.equals("EDouble")»
					«UseUtils.encodeWord(att.name)» : Double
					«ENDIF»
					«ENDFOR»
				«ENDIF»
			end
		«ENDFOR»
		
		-- «dummyClassName = dummyClassName.getUniqueName(classNames, 0)»
		class «UseUtils.encodeWord(dummyClassName)»
		end
		
		«FOR eclass : classes»
		«FOR att : eclass.getEAllAttributes»
		«IF att.lowerBound > 0»
		-- «var Constraint constraint = new Constraint()»
		-- «constraint.text = UseUtils.encodeWord(eclass.name) + ".allInstances()->forAll(" + eclass.name.substring(0, 1).toLowerCase() + " | " + eclass.name.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(att.name) + " <> null)"»
		-- «constraint.type = "forAll"»
		-- «constraint.variables.add(eclass.name.substring(0, 1).toLowerCase())»
		-- «constraint.className = eclass.name»
		«IF constraints.getConstraint(constraint) == null»
		-- «constraints.add(constraint)»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«ENDFOR»
		«IF e.commands.size > 0»
		-- «mutatorDependencies = new MutatorDependencies(e.commands)»
		«e.commands.compile(root, packages, classNames, constraints, "MAIN")»
		«ENDIF»
	
		«IF e.blocks.size > 0»
		«FOR b : e.blocks»
		-- «mutatorDependencies = new MutatorDependencies(b.commands)»
		«b.commands.compile(root, packages, classNames, constraints, b.name)»
		«ENDFOR»
		«ENDIF»

		-- Associations
		-- «var HashMap<String, Integer> associationNames = new HashMap<String, Integer>()»
		-- «var HashMap<String, Integer> roleNames = new HashMap<String, Integer>()»
		-- «var List<EReference> references = new ArrayList<EReference>()»
		«FOR eclass : classes»
		-- «var List<EReference> refs = eclass.getEReferences()»
		«IF refs.size > 0»
		«FOR ref : refs»
			-- «references.add(ref)»
			-- «var String associationName = eclass.name + ref.EType.name»
			«IF associationNames.get(associationName) != null»
			-- «associationNames.put(associationName, associationNames.get(associationName) + 1)»
			-- «associationName += associationNames.get(associationName)»
			«ELSE»
			-- «associationNames.put(associationName, 0)»
			«ENDIF»
			-- «var String srcRoleName = eclass.name.toLowerCase + ref.EType.name.toLowerCase»
			«IF roleNames.get(srcRoleName) != null»
			-- «roleNames.put(srcRoleName, roleNames.get(srcRoleName) + 1)»
			-- «srcRoleName += roleNames.get(srcRoleName)»
			«ELSE»
			-- «roleNames.put(srcRoleName, 0)»
			«ENDIF»
			-- «var String tarRoleName = ref.name»
			«IF roleNames.get(tarRoleName) != null»
			-- «roleNames.put(tarRoleName, roleNames.get(tarRoleName) + 1)»
			-- «tarRoleName += roleNames.get(tarRoleName)»
			-- «var HashMap<String, String> useReference = null»
			«IF useReferences.get(eclass.name) != null»
			-- «useReference = useReferences.get(eclass.name)»
			«ELSE»
			-- «useReference = new HashMap<String, String>()»
			«ENDIF»
			-- «useReference.put(ref.name, tarRoleName)»
			-- «useReferences.put(eclass.name, useReference)»
			«ELSE»
			-- «roleNames.put(tarRoleName, 0)»
			«ENDIF»
			«IF ref.containment == false»
			association «UseUtils.encodeWord(associationName)» between
			«ENDIF»
			«IF ref.containment == true»
			composition «UseUtils.encodeWord(associationName)» between
			«ENDIF»
				«UseUtils.encodeWord(eclass.name)»[*] role «UseUtils.encodeWord(srcRoleName)»
			«IF ref.lowerBound == 0 && ref.upperBound == -1»
				«UseUtils.encodeWord(ref.EType.name)»[*] role «UseUtils.encodeWord(tarRoleName)»
			«ELSEIF ref.upperBound == -1»
				«UseUtils.encodeWord(ref.EType.name)»[«ref.lowerBound»..*] role «UseUtils.encodeWord(tarRoleName)»
			«ELSEIF ref.lowerBound != ref.upperBound»
				«UseUtils.encodeWord(ref.EType.name)»[«ref.lowerBound»..«ref.upperBound»] role «UseUtils.encodeWord(tarRoleName)»
			«ELSEIF ref.lowerBound == ref.upperBound»
				«UseUtils.encodeWord(ref.EType.name)»[«ref.lowerBound»] role «UseUtils.encodeWord(tarRoleName)»
			«ENDIF»
			end
		«ENDFOR»
		«ENDIF»
		«ENDFOR»
		
		constraints
		context «dummyClassName»
		«FOR eclass : classes»
		-- «var List<EAnnotation> annotations = eclass.getEAnnotations()»
		«IF annotations.size > 0»
		«FOR EAnnotation a : annotations»
		«IF a.source.equals("http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")»
		-- «var EMap<String, String> oclmap = a.details»
		-- «var Set<String> keys = oclmap.keySet»
		«IF keys.size > 0»
		«FOR String key : keys»
		-- «var String ocl = oclmap.get(key)»
		-- «var String refName = ocl.substring(ocl.indexOf('self.') + 'self.'.length, ocl.indexOf('->'))»
		-- «var Constraint constraint = new Constraint()»
		«FOR EReference ref : eclass.EReferences»
		«IF (ref.name.equals(refName))»
		-- «constraint.text = ocl.replace('self.' + refName, ref.EType.name + ".allInstances()")»
		-- «constraint.type = "metamodel"»
		-- «constraint.className = ref.EType.name»
		«IF constraint.text.indexOf("exists") != -1 || constraint.text.indexOf("one") != -1»
		-- «var Mandatory mandatory = new Mandatory()»
		«IF constraint.text.indexOf("exists") != -1»
		-- «mandatory.type = "exists"»
		«ENDIF»
		«IF constraint.text.indexOf("one") != -1»
		-- «mandatory.type = "one"»
		«ENDIF»
		-- «mandatory.className = ref.EType.name»
		-- «var String clause = constraint.text.substring(constraint.text.lastIndexOf(".") + 1, constraint.text.lastIndexOf(")"))»
		«IF ((constraint.text.lastIndexOf(".") > constraint.text.lastIndexOf("|")) && (constraint.text.lastIndexOf(".") < constraint.text.lastIndexOf("=")))»
		«IF (clause.indexOf("=") != -1)»
		--«var String[] clauseParts = clause.split("=")»
		--«var j = 0»
		«FOR String clausePart : clauseParts»
		--«clauseParts.set(j, clausePart.trim())»
		--«j++»
		«ENDFOR»
		-- «mandatory.featureName = clauseParts.get(0)»
		-- «mandatory.value = clauseParts.get(1)»
		«ELSE»
		-- «mandatory.featureName = clause»
		-- «mandatory.value = "true"»
		«ENDIF»
		«ELSE»
		-- «constraint.text = constraint.text.replace(clause, clause + " = true")»
		-- «mandatory.featureName = clause»
		-- «mandatory.value = "true"»
		«ENDIF»
		-- «mandatories.add(mandatory)»
		«ENDIF»
		«IF constraints.getConstraint(constraint) == null»
		-- «constraints.add(constraint)»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«ENDFOR»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«ENDIF»
		«ENDFOR»
		«UseUtils.compositionConstraint(references)»
		«FOR ref : references»
		«UseUtils.compositionConstraint(ref)»
		«ENDFOR»
		-- «var int i = 0»
		«FOR constraint : constraints»
		-- «i++»
		«IF constraint.type.equals("size")»
			inv mut«i» : «constraint.text» > «constraint.maxSize»
			-- «maxSize.put(constraint.text.substring(0, constraint.text.indexOf(".")), constraint.maxSize + 1)»
		«ELSE»
			inv mut«i» : «constraint.text»
		«ENDIF»
		«ENDFOR»
	'''

	def boolean isChanged(AttributeEvaluation attev, List<AttributeSet> attributes) {
		for (AttributeSet att : attributes) {
			if (att.attribute.get(0).name.equals(attev.name.name)) {
				if (att instanceof AttributeScalar) {
					if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
						if (attev.value.equals(att.value)) {
							return false
						}
						else {
							return true
						}
					}
					if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
						if (attev.value.equals(att.value)) {
							return true
						}
						else {
							return false
						}
					}
				}
				if (att instanceof AttributeUnset) {
					if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
						if (attev.value == null) {
							return false
						}
						else {
							return true
						}
					}
					if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
						if (attev.value == null) {
							return true
						}
						else {
							return false
						}
					}
				}
				if (att instanceof AttributeSwap) {
					if (att.eContainer instanceof ModifyInformationMutator) {
						if (attev.value instanceof ObjectAttributeType) {
							var value = attev.value as ObjectAttributeType
							var mut = att.eContainer as ModifyInformationMutator
							if (mut.object instanceof RandomTypeSelection) {
								return false
							}
			       			if (mut.object instanceof CompleteTypeSelection) {
       							return true
       						}
							if (mut.object instanceof SpecificObjectSelection) {
								val SpecificObjectSelection selection = mut.object as SpecificObjectSelection
								if (selection.objSel instanceof CreateObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof SelectObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof SelectSampleMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof CloneObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
							}
       						if (mut.object instanceof SpecificClosureSelection) {
       							val SpecificClosureSelection selection = mut.object as SpecificClosureSelection
    	 						if (selection.objSel instanceof CreateObjectMutator) {
	       							if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
       							}
       							if (selection.objSel instanceof SelectObjectMutator) {
       								if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
       							}
       							if (selection.objSel instanceof SelectSampleMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
       							if (selection.objSel instanceof CloneObjectMutator) {
       								if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
    	   						}
	       					}
						}
					}
				}
				if (att instanceof AttributeCopy) {
					if (att.eContainer instanceof ModifyInformationMutator) {
						if (attev.value instanceof ObjectAttributeType) {
							var value = attev.value as ObjectAttributeType
							var mut = att.eContainer as ModifyInformationMutator
							if (mut.object instanceof RandomTypeSelection) {
								return false
							}
			       			if (mut.object instanceof CompleteTypeSelection) {
       							return true
       						}
							if (mut.object instanceof SpecificObjectSelection) {
								val SpecificObjectSelection selection = mut.object as SpecificObjectSelection
								if (selection.objSel instanceof CreateObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof SelectObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof SelectSampleMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
								if (selection.objSel instanceof CloneObjectMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
							}
       						if (mut.object instanceof SpecificClosureSelection) {
       							val SpecificClosureSelection selection = mut.object as SpecificClosureSelection
    	 						if (selection.objSel instanceof CreateObjectMutator) {
	       							if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
       							}
       							if (selection.objSel instanceof SelectObjectMutator) {
       								if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
       							}
       							if (selection.objSel instanceof SelectSampleMutator) {
									if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
								}
       							if (selection.objSel instanceof CloneObjectMutator) {
       								if (value.objSel.name.equals(selection.objSel.name)) {
										return false
									}
									else {
										return true
									}
    	   						}
	       					}
						}
					}
				}
				if (att instanceof AttributeReverse) {
					return true
				}
				if (att instanceof AttributeOperation) {
					return true
				}
			}
		}
	}
	
	def Mandatory getMandatoryByType(List<Mandatory> mandatories, String className, String featureName, String type) {
		for (Mandatory m : mandatories) {
			if (m.type.equals(type) && m.featureName.equals(featureName) && m.className.equals(className)) {
				return m
			}
		}
	}
	
	def Constraint getConstraint(List<Constraint> constraints, Constraint constraint) {
		if (constraint != null && !constraint.text.equals("")) {
			for (Constraint c : constraints) {
				if (c.type.equals(constraint.type)) {
					if (c.text.equals(constraint.text)) {
						return c
					}
				}
			}
		}
		return null
	}
	
	def void subsume(List<Constraint> constraints, Constraint constraint) {
		if (constraint != null && !constraint.text.equals("")) {
			for (Constraint c : constraints) {
				if (c.type.equals("exists")) {
					var String clause1 = c.text.substring(c.text.indexOf("exists(") + "exists(".length, c.text.lastIndexOf(")"))
					if (c.variables != null && c.variables.size() > 1 && constraint.variables != null && constraint.variables.size() > 1) {
						var v1 = c.variables.get(0)
						var v2 = c.variables.get(1)
						var String clause2 = constraint.text.substring(constraint.text.indexOf("exists(") + "exists(".length, constraint.text.lastIndexOf(")"))
						var v3 = constraint.variables.get(1)
						var String newClause = clause2.replace("| ", "| " + clause1.substring(clause1.indexOf("|") + 1, clause1.length) + " and ")
						System.out.println(newClause.substring(0, newClause.indexOf("|") + 1))
						System.out.println(clause1.substring(0, clause1.indexOf("|") + 1))
						newClause = newClause.replace(newClause.substring(0, newClause.indexOf("|") + 1), clause1.substring(0, clause1.indexOf("|") + 1))
						//newClause = newClause.replace(newClause.substring(newClause.indexOf(","), newClause.indexOf("|")), "")
						newClause = newClause.replace(v3, v2)
						System.out.println(newClause)
						constraint.text = c.text.replace(clause1, newClause)
						System.out.println(constraint.text)
						constraints.remove(c)
						constraints.add(constraint)
						return
					}
				}
			}
		}
	}
	
	def Constraint join(List<Constraint> constraints, Constraint constraint, String className) {
		if (constraint != null && !constraint.text.equals("")) {
			for (Constraint c : constraints) {
				if (c.type.equals("exists") && c.className.equals(className)) {
					var String clause1 = c.text.substring(c.text.indexOf("exists(") + "exists(".length, c.text.lastIndexOf(")"))
					if (c.variables != null && c.variables.size() > 1 && constraint.variables != null && constraint.variables.size() > 1) {
						var v1 = c.variables.get(0)
						var v2 = c.variables.get(1)
						var v3 = constraint.variables.get(1)
						var String newClause = clause1.replace("| ", "| " + constraint.text.substring(0, constraint.text.length - 1) + " and ") + ")"
						System.out.println(newClause.substring(0, newClause.indexOf("|") + 1))
						System.out.println(clause1.substring(0, clause1.indexOf("|") + 1))
						newClause = newClause.replace(newClause.substring(0, newClause.indexOf("|") + 1), clause1.substring(0, clause1.indexOf("|") + 1))
						//newClause = newClause.replace(newClause.substring(newClause.indexOf(","), newClause.indexOf("|")), "")
						newClause = newClause.replace(v3, v1)
						System.out.println(newClause)
						constraint.text = c.text.replace(clause1, newClause)
						System.out.println(constraint.text)
						return constraint
					}
					if (c.variables != null && c.variables.size() > 0 && constraint.variables != null && constraint.variables.size() > 1) {
						var v1 = c.variables.get(0)
						var v2 = constraint.variables.get(0)
						var v3 = constraint.variables.get(1)
						var String newClause = clause1.replace("| ", "| " + constraint.text.substring(0, constraint.text.length - 1) + " and ") + ")"
						System.out.println(newClause.substring(0, newClause.indexOf("|") + 1))
						System.out.println(clause1.substring(0, clause1.indexOf("|") + 1))
						newClause = newClause.replace(newClause.substring(0, newClause.indexOf("|") + 1), clause1.substring(0, clause1.indexOf("|") + 1))
						//newClause = newClause.replace(newClause.substring(newClause.indexOf(","), newClause.indexOf("|")), "")
						newClause = newClause.replace(v3, v1)
						System.out.println(newClause)
						constraint.text = c.text.replace(clause1, newClause)
						System.out.println(constraint.text)
						return constraint
					}
				}
			}
		}
	}
	
	def void include(List<Constraint> constraints, Constraint constraint) {
		var List<Constraint> tmpConstraints = new ArrayList<Constraint>()
		tmpConstraints.addAll(constraints)
		for (Constraint c : tmpConstraints) {
			var String clause1 = c.text.substring(c.text.indexOf("exists(") + "exists(".length, c.text.lastIndexOf(")"))
			if (c.variables != null && c.variables.size() > 1 && constraint.variables != null && constraint.variables.size() > 1) {
				var v2 = c.variables.get(1)
				var v3 = constraint.variables.get(1)
				var String clause2 = constraint.text.substring(constraint.text.indexOf("exists(") + "exists(".length, constraint.text.lastIndexOf(")"))
				var String newClause = clause2.replace("| ", "| " + clause1.substring(clause1.indexOf("|") + 1, clause1.length) + " and ")
				System.out.println(newClause)
				newClause = newClause.replace(v2, v3)
				System.out.println(newClause)
				
				constraint.text = c.text.replace(clause1, newClause)
				System.out.println(constraint.text)
				constraints.remove(c)
			}
		}
		constraints.add(constraint)
	}

	def compile(Expression exp, String className, List<Constraint> constraints, String blockName, String mutName) {
		var List<Constraint> expConstraints = new ArrayList<Constraint>()
		if (exp.first instanceof AttributeEvaluation) {
			if ((exp.first as AttributeEvaluation).value instanceof AttributeType) {
				val attev = exp.first as AttributeEvaluation
				var String operator = ""
				var Constraint attConstraint = new Constraint()
				attConstraint.type = "exists"
				attConstraint.className = className
				if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
					operator = "="
				}
				if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
					operator = "<>"
				}
				if (attev.value instanceof StringType) {
					attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " '" + (attev.value as SpecificStringType).value + "')"
					attConstraint.variables.add(className.substring(0, 1).toLowerCase()) 
				}
				if (attev.value instanceof DoubleType) {
					attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")"
					attConstraint.variables.add(className.substring(0, 1).toLowerCase())  
				}
				if (attev.value instanceof BooleanType) {
					attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")"
					attConstraint.variables.add(className.substring(0, 1).toLowerCase())  
				}
				if (attev.value instanceof IntegerType) {
					attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")"
					attConstraint.variables.add(className.substring(0, 1).toLowerCase())  
				}
				if (constraints.getConstraint(attConstraint) == null && expConstraints.getConstraint(attConstraint) == null) {
					expConstraints.add(attConstraint)
				}
			}
		}
		if (exp.first instanceof ReferenceEvaluation) {
			val refev = exp.first as ReferenceEvaluation
			var String operator = ""
			var String v1 = className.substring(0, 1).toLowerCase() + "0"
			var String v2 = className.substring(0, 1).toLowerCase() + "1"
			if (refev.operator.literal.equals(Operator.EQUALS.literal)) {
				operator = "="
			}
			if (refev.operator.literal.equals(Operator.DIFFERENT.literal)) {
				operator = "<>"
			}
			if (refev.operator.literal.equals(Operator.IN.literal)) {
				operator = "IN"
			}
			if (refev.name == null) {
				var Constraint refConstraint = new Constraint()
				refConstraint.type = "exists"
				refConstraint.className = className
				if (refev.value instanceof SpecificObjectSelection) {
					var SpecificObjectSelection selection = refev.value as SpecificObjectSelection
					// if this mutation refers to previous one
					if (mutConstraint.get(blockName) != null && mutConstraint.get(blockName).get(selection.objSel.name) != null) {
						var List<Constraint> referedConstraints = mutConstraint.get(blockName).get(selection.objSel.name)
						for (Constraint referedConstraint : referedConstraints) {
							if (referedConstraint.type.equals("exists") && referedConstraint.className.equals(className)) {
								var String vref = referedConstraint.variables.get(0)
								var String constraintText = referedConstraint.text.replaceAll(vref + " ", v2 + " ").replaceAll(vref + "[.]", v2 + ".").replaceAll(vref + "[)]", v2 + ")")
								refConstraint.text = className + ".allInstances()->exists(" + v1 + " | " + constraintText.substring(0, constraintText.length - 1) + " and " + v1 + " " + operator + " " + v2 + "))"
								refConstraint.variables.add(v1)
								refConstraint.variables.add(v2)
								if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
									expConstraints.add(refConstraint)
								}
							}
						}
					}
					else {
						//var ObSelectionStrategy selection = refev.value
						refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v2 + " | " + v1 + " " + operator + " " + v2 + ")"  
						refConstraint.variables.add(v1)
						refConstraint.variables.add(v2)
						if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
							expConstraints.add(refConstraint)
						}
					}
				}
				else {
				//	var ObSelectionStrategy selection = refev.value
					refConstraint.text = className + ".allInstances()->exists(" + v1 + ", " + v2 + " | " + v1 + " " + operator + " " + v2 + ")"  
					refConstraint.variables.add(v1)
					refConstraint.variables.add(v2)
					if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
						expConstraints.add(refConstraint)
					}
				}
			}
			else {
				var String refName = UseUtils.getUseReference(refev.name, useReferences)
				var boolean multiple = refev.name.upperBound > 1 || refev.name.upperBound == -1
				var Constraint refConstraint = new Constraint()
				if (refev.value == null) {
					if (operator.equals("<>")) {
						refConstraint.type = "exists"
						refConstraint.className = className
						if (refev.refName == null) {
							refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " null)"
							refConstraint.variables.add(v1)
						}
						else {
							var String v3 = refev.refName.EType.name.substring(0, 1).toLowerCase() + "2"
							var String innerRefName = UseUtils.getUseReference(refev.refName, useReferences)
							if (refev.refName.upperBound > 1 || refev.refName.upperBound == -1) {
								refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(innerRefName) + "->size() > 0))"
							}
							else {
								refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(innerRefName) + " " + operator + " null))"
							}
							refConstraint.variables.add(v1)
							refConstraint.variables.add(v3)
						}
						if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
							expConstraints.add(refConstraint)
						}
					}
				} 
				else {
					var ObSelectionStrategy selection = refev.value
					refConstraint.type = "exists"
					if (operator.equals("IN")) {
						if (selection instanceof SpecificObjectSelection) {
							var String v3 = className.substring(0, 1).toLowerCase() + "2"
							if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
								var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
								var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
								if (selection.refType != null) {
									var String obRefTypeName = selection.refType.name
									var String v5 = selection.refType.EType.name.substring(0, 1).toLowerCase() + "4"
									//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v4 + "." + UseUtils.encodeWord(obRefTypeName) + "->exists(" + v5 + " | " + v5 + " = " + v3 + "." + UseUtils.encodeWord(refName) + "))"
									refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v4 + "." + UseUtils.encodeWord(obRefTypeName) + "->exists(" + v5 + " | " + v5 + " = " + v3 + "." + UseUtils.encodeWord(refName) + ")))" 
									System.out.println(refConstraint.text)
									refConstraint.variables.add(v3)
									refConstraint.variables.add(v4)
									refConstraint.variables.add(v5)
								}
							}
						}
					}
					else {
						var String targetClassName = null
						if (selection instanceof RandomTypeSelection) {
							targetClassName = (refev.value as RandomTypeSelection).type.name
							var String v3 = targetClassName.substring(0, 1).toLowerCase() + "2"
							if (multiple == false) {
								//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(targetClassName) + " = " + UseUtils.encodeWord(targetClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")"
								refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + UseUtils.encodeWord(targetClassName) + ".allInstances()->exists(" + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "))" 
								refConstraint.variables.add(v1)
								refConstraint.variables.add(v3)
							}
							else {
								var String v4 = targetClassName.substring(0, 1).toLowerCase() + "3"
								//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(targetClassName) + " = " + UseUtils.encodeWord(targetClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
								refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + UseUtils.encodeWord(targetClassName) + ".allInstances()->exists(" + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))" 
								refConstraint.variables.add(v1)
								refConstraint.variables.add(v3)
								refConstraint.variables.add(v4)
							}
						}
						if (selection instanceof SpecificObjectSelection) {
							if (refev.refName == null) {
								var String v3 = className.substring(0, 1).toLowerCase() + "2"
								if (selection.refType == null) {
									if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
										var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
										var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
										if (multiple == false) {
											//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
											System.out.println(refConstraint.text)
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
											refConstraint = constraints.join(refConstraint, refClassName)
										}
										else {
											var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
											//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
											System.out.println(refConstraint.text)
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
											refConstraint.variables.add(v5)
											refConstraint = constraints.join(refConstraint, refClassName)
										} 
									}
									else {
										if (multiple == false) {
											//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")" 
											refConstraint.variables.add(v1)
											refConstraint.variables.add(v3)
										}
										else {
											var String v4 = className.substring(0, 1).toLowerCase() + "3"
											//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
											refConstraint.variables.add(v1)
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
										}
									}
								}
								else {
									if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
										var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
										var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
										if (multiple == false) {
											//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + "))" 
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
										}
										else {
											var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
											//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +")))" 
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
											refConstraint.variables.add(v5)
										} 
									}
									else {
										var String selectionRefName =  UseUtils.getUseReference(selection.refType, useReferences)
										var boolean mult = selection.refType.upperBound > 1 || selection.refType.upperBound == -1
										if (multiple == false || (multiple == true && mult == true)) {
											//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(selectionRefName) + ")"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(selectionRefName) + ")"
											System.out.println(refConstraint.text) 
											refConstraint.variables.add(v1)
											refConstraint.variables.add(v3)
										}
										else {
											var String v4 = className.substring(0, 1).toLowerCase() + "3"
											//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(selectionRefName) + " " + operator + " " + v4 +"))"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(selectionRefName) + " " + operator + " " + v4 +"))"
											refConstraint.variables.add(v1)
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
										}
									}
								}
							}
							else {
								var String ref1Name =  UseUtils.getUseReference(refev.refName, useReferences)
								var String ref2Name =  UseUtils.getUseReference(selection.refType, useReferences)
								var String v3 = className.substring(0, 1).toLowerCase() + "2"
								if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
									var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
									var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
									if (multiple == false) {
										//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + "))" 
										refConstraint.variables.add(v3)
										refConstraint.variables.add(v4)
									}
									else {
										var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
										//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +")))"
										refConstraint.variables.add(v3)
										refConstraint.variables.add(v4)
										refConstraint.variables.add(v5)
									} 
								}
								else {
									if (multiple == false) {
										//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(ref2Name) + ")"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(ref2Name) + ")" 
										refConstraint.variables.add(v1)
										refConstraint.variables.add(v3)
									}
									else {
										var String v4 = className.substring(0, 1).toLowerCase() + "3"
										//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(ref2Name) + " " + operator + " " + v4 +"))"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(ref2Name) + " " + operator + " " + v4 +"))"
										refConstraint.variables.add(v1)
										refConstraint.variables.add(v3)
										refConstraint.variables.add(v4)
									}
								}
							}
						}
					}
				}
				if (refev.value != null) {
					if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
						expConstraints.add(refConstraint)
					}
				}
			}
		}
		if (exp.second != null) {
			for (Evaluation ev : exp.second) {
				if (ev instanceof AttributeEvaluation) {
					val attev = ev as AttributeEvaluation
					var Constraint attConstraint = new Constraint()
					attConstraint.type = "exists"
					attConstraint.className = className
					var String operator = ""
					if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
						operator = "="
					}
					if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
						operator = "<>"
					}
					if (attev.value instanceof StringType) {
						attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " '" + (attev.value as SpecificStringType).value + "')" 
						attConstraint.variables.add(className.substring(0, 1).toLowerCase()) 
					}
					if (attev.value instanceof DoubleType) {
						attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")" 
						attConstraint.variables.add(className.substring(0, 1).toLowerCase()) 
					}
					if (attev.value instanceof BooleanType) {
						attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")" 
						attConstraint.variables.add(className.substring(0, 1).toLowerCase()) 
					}
					if (attev.value instanceof IntegerType) {
						attConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + UseUtils.encodeWord(attev.name.name) + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")" 
						attConstraint.variables.add(className.substring(0, 1).toLowerCase()) 
					}
					if (constraints.getConstraint(attConstraint) == null && expConstraints.getConstraint(attConstraint) == null) {
						expConstraints.add(attConstraint)
					}
				}
				if (ev instanceof ReferenceEvaluation) {
					val refev = ev as ReferenceEvaluation
					var String operator = ""
					var String v1 = className.substring(0, 1).toLowerCase() + "0"
					var String v2 = className.substring(0, 1).toLowerCase() + "1"
					if (refev.operator.literal.equals(Operator.EQUALS.literal)) {
						operator = "="
					}
					if (refev.operator.literal.equals(Operator.DIFFERENT.literal)) {
						operator = "<>"
					}
					if (refev.operator.literal.equals(Operator.IN.literal)) {
						operator = "="
					}
					if (refev.name == null) {
						var Constraint refConstraint = new Constraint()
						refConstraint.type = "exists"
						refConstraint.className = className
						if (refev.value instanceof SpecificObjectSelection) {
							var SpecificObjectSelection selection = refev.value as SpecificObjectSelection
							if (mutConstraint.get(blockName) != null && mutConstraint.get(blockName).get(selection.objSel.name) != null) {
								var List<Constraint> referedConstraints = mutConstraint.get(blockName).get(selection.objSel.name)
								for (Constraint referedConstraint : referedConstraints) {
									if (referedConstraint.type.equals("exists") && referedConstraint.className.equals(className)) {
										var String vref = referedConstraint.variables.get(0)
										var String constraintText = referedConstraint.text.replaceAll(vref + " ", v2 + " ").replaceAll(vref + "[.]", v2 + ".").replaceAll(vref + "[)]", v2 + ")")
										refConstraint.text = className + ".allInstances()->exists(" + v1 + " | " + constraintText.substring(0, constraintText.length - 1) + " and " + v1 + " " + operator + " " + v2 + "))"
										refConstraint.variables.add(v1)
										refConstraint.variables.add(v2)
										if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
											expConstraints.add(refConstraint)
										}
									}
								}
							}
							else {
								//var ObSelectionStrategy selection = refev.value
								refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v2 + " | " + v1 + " " + operator + " " + v2 + ")"
								refConstraint.variables.add(v1)
								refConstraint.variables.add(v2)
								System.out.println(refConstraint.text)  
								if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
									expConstraints.include(refConstraint)
								}
							}
						}
						else {
						//	var ObSelectionStrategy selection = refev.value
							refConstraint.text = className + ".allInstances()->exists(" + v1 + ", " + v2 + " | " + v1 + " " + operator + " " + v2 + ")"  
							refConstraint.variables.add(v1)
							refConstraint.variables.add(v2)
							if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
								expConstraints.add(refConstraint)
							}
						}
					}
					else {
						var String refName = UseUtils.getUseReference(refev.name, useReferences)
						var boolean multiple = refev.name.upperBound > 1 || refev.name.upperBound == -1
						var Constraint refConstraint = new Constraint()
						refConstraint.className = className
						if (refev.value == null) {
							if (operator.equals("<>")) {
								refConstraint.type = "exists"
								if (refev.refName == null) {
									refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " null)"
									refConstraint.variables.add(v1)
								}
								else {
									var String v3 = refev.refName.EType.name.substring(0, 1).toLowerCase() + "2"
									var String innerRefName = UseUtils.getUseReference(refev.refName, useReferences)
									if (refev.refName.upperBound > 1 || refev.refName.upperBound == -1) {
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(innerRefName) + "->size() > 0))"
									}
									else {
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(innerRefName) + " " + operator + " null))"
									}
									refConstraint.variables.add(v1)
									refConstraint.variables.add(v3)
								}
								if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
									expConstraints.add(refConstraint)
								}
							}
						} 
						else {
							var ObSelectionStrategy selection = refev.value
							refConstraint.type = "exists"
							if (operator.equals("IN")) {
								if (selection instanceof SpecificObjectSelection) {
									var String v3 = className.substring(0, 1).toLowerCase() + "2"
									if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
										var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
										var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
										if (selection.refType != null) {
											var String obRefTypeName = selection.refType.name
											var String v5 = selection.refType.EType.name.substring(0, 1).toLowerCase() + "4"
											//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v4 + "." + UseUtils.encodeWord(obRefTypeName) + "->exists(" + v5 + " | " + v5 + " = " + v3 + "." + UseUtils.encodeWord(refName) + "))"
											refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v4 + "." + UseUtils.encodeWord(obRefTypeName) + "->exists(" + v5 + " | " + v5 + " = " + v3 + "." + UseUtils.encodeWord(refName) + ")))" 
											refConstraint.variables.add(v3)
											refConstraint.variables.add(v4)
											refConstraint.variables.add(v5)
										}
									}
								}
							}
							else {
								var String targetClassName = null
								if (selection instanceof RandomTypeSelection) {
									targetClassName = (refev.value as RandomTypeSelection).type.name
									var String v3 = targetClassName.substring(0, 1).toLowerCase() + "2"
									if (multiple == false) {
										//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(targetClassName) + " = " + UseUtils.encodeWord(targetClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + UseUtils.encodeWord(targetClassName) + ".allInstances()->exists(" + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "))" 
										refConstraint.variables.add(v1)
										refConstraint.variables.add(v3)
									}
									else {
										var String v4 = targetClassName.substring(0, 1).toLowerCase() + "3"
										//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(targetClassName) + " = " + UseUtils.encodeWord(targetClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
										refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + UseUtils.encodeWord(targetClassName) + ".allInstances()->exists(" + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))" 
										refConstraint.variables.add(v1)
										refConstraint.variables.add(v3)
										refConstraint.variables.add(v4)
									}
								}
								if (selection instanceof SpecificObjectSelection) {
									if (refev.refName == null) {
										var String v3 = className.substring(0, 1).toLowerCase() + "2"
										if (selection.refType == null) {
											if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
												var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
												var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
												if (multiple == false) {
													//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
													refConstraint = constraints.join(refConstraint, refClassName)
												}
												else {
													var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
													//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
													refConstraint.variables.add(v5)
													refConstraint = constraints.join(refConstraint, refClassName)
												} 
											}
											else {
												if (multiple == false) {
													//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + ")" 
													refConstraint.variables.add(v1)
													refConstraint.variables.add(v3)
												}
												else {
													var String v4 = className.substring(0, 1).toLowerCase() + "3"
													//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + " " + operator + " " + v4 +"))"
													refConstraint.variables.add(v1)
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
												}
											}
										}
										else {
											if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
												var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
												var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
												if (multiple == false) {
													//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + "))" 
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
												}
												else {
													var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
													//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +")))" 
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
													refConstraint.variables.add(v5)
												} 
											}
											else {
												var String selectionRefName =  UseUtils.getUseReference(selection.refType, useReferences)
												var boolean mult = selection.refType.upperBound > 1 || selection.refType.upperBound == -1
												if (multiple == false || (multiple == true && mult == true)) {
													//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(selectionRefName) + ")"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(selectionRefName) + ")" 
													System.out.println(refConstraint.text)
													refConstraint.variables.add(v1)
													refConstraint.variables.add(v3)
												}
												else {
													var String v4 = className.substring(0, 1).toLowerCase() + "3"
													//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(selectionRefName) + " " + operator + " " + v4 +"))"
													refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(refName) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(selectionRefName) + " " + operator + " " + v4 +"))"
													refConstraint.variables.add(v1)
													refConstraint.variables.add(v3)
													refConstraint.variables.add(v4)
												}
											}
										}
									}
									else {
										var String ref1Name =  UseUtils.getUseReference(refev.refName, useReferences)
										var String ref2Name =  UseUtils.getUseReference(selection.refType, useReferences)
										var String v3 = className.substring(0, 1).toLowerCase() + "2"
										if (selection.objSel instanceof SelectObjectMutator && !(selection.objSel as SelectObjectMutator).object.type.name.equals(className)) {
											var String refClassName = (selection.objSel as SelectObjectMutator).object.type.name
											var String v4 = refClassName.substring(0, 1).toLowerCase() + "3"
											if (multiple == false) {
												//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + ")"
												refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + " " + operator + " " + v4 + "))" 
												refConstraint.variables.add(v3)
												refConstraint.variables.add(v4)
											}
											else {
												var String v5 = refClassName.substring(0, 1).toLowerCase() + "4"
												//refConstraint.text = "let " + v4 + " : " + UseUtils.encodeWord(refClassName) + " = " + UseUtils.encodeWord(refClassName) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +"))"
												refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v3 + " | " + UseUtils.encodeWord(refClassName) + ".allInstances()->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(refName) + "->exists(" + v5 + " | " + v4 + " " + operator + " " + v5 +")))"
												refConstraint.variables.add(v3)
												refConstraint.variables.add(v4)
												refConstraint.variables.add(v5)
											} 
										}
										else {
											if (multiple == false) {
												//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(ref2Name) + ")"
												refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + " " + operator + " " + v3 + "." + UseUtils.encodeWord(ref2Name) + ")" 
												refConstraint.variables.add(v1)
												refConstraint.variables.add(v3)
											}
											else {
												var String v4 = className.substring(0, 1).toLowerCase() + "3"
												//refConstraint.text = "let " + v3 + " : " + UseUtils.encodeWord(className) + " = " + UseUtils.encodeWord(className) + ".allInstances()->asSequence()->at(0) in " + UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(ref2Name) + " " + operator + " " + v4 +"))"
												refConstraint.text = UseUtils.encodeWord(className) + ".allInstances()->exists(" + v1 + ", " + v3 + " | " + v1 + "." + UseUtils.encodeWord(ref1Name) + "->exists(" + v4 + " | " + v3 + "." + UseUtils.encodeWord(ref2Name) + " " + operator + " " + v4 +"))"
												refConstraint.variables.add(v1)
												refConstraint.variables.add(v3)
												refConstraint.variables.add(v4)
											}
										}
									}
								}
							}
						}
						if (refev.value != null) {
							if (constraints.getConstraint(refConstraint) == null && refConstraint.text.length > 0 && expConstraints.getConstraint(refConstraint) == null) {
								expConstraints.subsume(refConstraint)
							}
						}
					}
				}
			}
		}
		for (Constraint constraint : expConstraints) {
			constraints.add(constraint)
			constraint.storeMutatorName(blockName, mutName)
		}
	}
	
	def void storeMutatorName(Constraint constraint, String blockName, String mutName) {
		var HashMap<String, List<Constraint>> nameConstraint = null
		if (mutConstraint.get(blockName) == null) {
			nameConstraint = new HashMap<String, List<Constraint>>()
		}
		else {
			nameConstraint = mutConstraint.get(blockName)
		}
		var List<Constraint> constraints = null
		if (nameConstraint.get(mutName) == null) {
			constraints = new ArrayList<Constraint>()
		}
		else {
			constraints = nameConstraint.get(mutName)
		}
		constraints.add(constraint)
		nameConstraint.put(mutName, constraints)
		mutConstraint.put(blockName, nameConstraint)
	}
	
	def compile(Expression exp, String className, List<AttributeSet> attributes, List<Constraint> constraints, String blockName, String mutName) {
		if (exp.first instanceof AttributeEvaluation) {
			if ((exp.first as AttributeEvaluation).value instanceof AttributeType) {
				val attev = exp.first as AttributeEvaluation
				var String operator = ""
				var Constraint attConstraint = new Constraint()
				attConstraint.className = className
				if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
					operator = "="
				}
				if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
					operator = "<>"
				}
				var boolean isChanged = isChanged(attev, attributes)
				if (isChanged == false) {
					attConstraint.type = "exists"
					if (attev.value instanceof StringType) {
						attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " '" + (attev.value as SpecificStringType).value + "')" 
					}
					if (attev.value instanceof DoubleType) {
						attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")" 
					}
					if (attev.value instanceof BooleanType) {
						attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")" 
					}
					if (attev.value instanceof IntegerType) {
						attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")" 
					}
					if (constraints.getConstraint(attConstraint) == null) {
						constraints.add(attConstraint)
						attConstraint.storeMutatorName(blockName, mutName)
					}
				}
				else {
//					attConstraint.type = "size"
//					if (attev.value instanceof StringType) {
//						attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " '" + (attev.value as SpecificStringType).value + "')->size()" 
//					}
//					if (attev.value instanceof DoubleType) {
//						attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")->size()" 
//					}
//					if (attev.value instanceof BooleanType) {
//						attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")->size()" 
//					}
//					if (attev.value instanceof IntegerType) {
//						attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")->size()" 
//					}
//					var Constraint c = constraints.getConstraint(attConstraint)
//					var boolean inc = (mandatories.getMandatoryByType(className, attev.name.name, "one") == null) 
//					if (c == null) {
//						if (inc == true) {
//							attConstraint.n++
//						}
//						constraints.add(attConstraint)
//					}
//					else {
//						if (inc == true) {
//							c.n++
//						}
//					}
				}
			}
		}
		if (exp.second != null) {
			for (Evaluation ev : exp.second) {
				if (ev instanceof AttributeEvaluation) {
					val attev = ev as AttributeEvaluation
					var String operator = ""
					var Constraint attConstraint = new Constraint()
					attConstraint.className = className
					if ((attev.value as AttributeType).operator.literal.equals(Operator.EQUALS.literal)) {
						operator = "="
					}
					if ((attev.value as AttributeType).operator.literal.equals(Operator.DIFFERENT.literal)) {
						operator = "<>"
					}
					var boolean isChanged = isChanged(attev, attributes)
					if (isChanged == false) {
						attConstraint.type = "exists"
						if (attev.value instanceof StringType) {
							attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " '" + (attev.value as SpecificStringType).value + "')" 
						}
						if (attev.value instanceof DoubleType) {
							attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")" 
						}
						if (attev.value instanceof BooleanType) {
							attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")" 
						}
						if (attev.value instanceof IntegerType) {
							attConstraint.text = className + ".allInstances()->exists(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")" 
						}
						if (constraints.getConstraint(attConstraint) == null) {
							constraints.add(attConstraint)
							attConstraint.storeMutatorName(blockName, mutName)
						}
					}
//					else {
//						attConstraint.type = "size"
//						if (attev.value instanceof StringType) {
//							attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " '" + (attev.value as SpecificStringType).value + "')->size()" 
//						}
//						if (attev.value instanceof DoubleType) {
//							attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificDoubleType).value + ")->size()" 
//						}
//						if (attev.value instanceof BooleanType) {
//							attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificBooleanType).value + ")->size()" 
//						}
//						if (attev.value instanceof IntegerType) {
//							attConstraint.text = className + ".allInstances()->select(" + className.substring(0, 1).toLowerCase() + " | " + className.substring(0, 1).toLowerCase() + "." + attev.name.name + " " + operator + " " + (attev.value as SpecificIntegerType).value + ")->size()" 
//						}
//						var Constraint c = constraints.getConstraint(attConstraint)
//						var boolean inc = (mandatories.getMandatoryByType(className, attev.name.name, "one") == null) 
//						if (c == null) {
//							if (inc == true) {
//								attConstraint.n++
//							}
//							constraints.add(attConstraint)
//						}
//						else {
//							if (inc == true) {
//								c.n++
//							}
//						}
//					}
				}
			}
		}
	}
	
	def String getClassName(ObSelectionStrategy object) {
		var String className = ""
		if (object != null) {
       		if (object instanceof RandomTypeSelection) {
   				className = object.type.name
   			}
   			if (object instanceof CompleteTypeSelection) {
       			className = object.type.name
       		}
			if (object instanceof SpecificObjectSelection) {
				val SpecificObjectSelection selection = object as SpecificObjectSelection
				if (selection.objSel instanceof CreateObjectMutator) {
					className = selection.objSel.type.name
				}
				if (selection.objSel instanceof SelectObjectMutator) {
					className = (selection.objSel as SelectObjectMutator).object.type.name
				}
				if (selection.objSel instanceof SelectSampleMutator) {
					className = WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator)
				}
				if (selection.objSel instanceof CloneObjectMutator) {
					className = selection.objSel.type.name
				}
				if (selection.objSel instanceof ModifyInformationMutator) {
					var modifyMutator = selection.objSel as ModifyInformationMutator
					if (modifyMutator.object instanceof RandomTypeSelection) {
						className = modifyMutator.object.type.name
					}
					if (modifyMutator.object instanceof CompleteTypeSelection) {
						className = modifyMutator.object.type.name
					}
					if (modifyMutator.object instanceof SpecificObjectSelection) {
						className = modifyMutator.object.getClassName
					}
					if (modifyMutator.object instanceof SpecificClosureSelection) {
						className = modifyMutator.object.getClassName						
					}
				}
			}
   			if (object instanceof SpecificClosureSelection) {
    	   		val SpecificClosureSelection selection = object as SpecificClosureSelection
	     		if (selection.objSel instanceof CreateObjectMutator) {
       				className = selection.objSel.type.name
       			}
       			if (selection.objSel instanceof SelectObjectMutator) {
       				className = (selection.objSel as SelectObjectMutator).object.type.name
       			}
       			if (selection.objSel instanceof SelectSampleMutator) {
					className = WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator)
				}
       			if (selection.objSel instanceof CloneObjectMutator) {
       				className = selection.objSel.type.name
    	   		}
    	   		if (selection.objSel instanceof ModifyInformationMutator) {
					className = selection.objSel.type.name
				}
	       	}
       	}
		return className
	}
	
	def void compile(List<ReferenceSet> references, List<Constraint> constraints, String blockName, String mutName) {
		for (ReferenceSet ref : references) {
			var Constraint constraint = new Constraint()
			var String className = ""
			if (ref.object != null) {
				constraint.type = "size"
        		if (ref.object instanceof RandomTypeSelection) {
       				className = UseUtils.encodeWord(ref.object.type.name)
    	   			if (ref.object.expression != null) {
	       				ref.object.expression.compile(className, constraints, blockName, mutName)
       				}
       			}
       			if (ref.object instanceof CompleteTypeSelection) {
       				className = UseUtils.encodeWord(ref.object.type.name)
       			}
				if (ref.object instanceof SpecificObjectSelection) {
					val SpecificObjectSelection selection = ref.object as SpecificObjectSelection
					if (selection.objSel instanceof CreateObjectMutator == false) {
						if (selection.objSel instanceof SelectObjectMutator) {
							className = UseUtils.encodeWord((selection.objSel as SelectObjectMutator).object.type.name)
						}
						if (selection.objSel instanceof SelectSampleMutator) {
							className = UseUtils.encodeWord(WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator))
						}
						if (selection.objSel instanceof CloneObjectMutator) {
							className = UseUtils.encodeWord(selection.objSel.type.name)
						}
						if (selection.objSel instanceof ModifyInformationMutator) {
							var modifyMutator = selection.objSel as ModifyInformationMutator
							if (modifyMutator.object instanceof RandomTypeSelection) {
								className = UseUtils.encodeWord(modifyMutator.object.type.name)
							}
							if (modifyMutator.object instanceof CompleteTypeSelection) {
								className = UseUtils.encodeWord(modifyMutator.object.type.name)
							}
							if (modifyMutator.object instanceof SpecificObjectSelection) {
								className = UseUtils.encodeWord(modifyMutator.object.getClassName)
							}
							if (modifyMutator.object instanceof SpecificClosureSelection) {
								className = UseUtils.encodeWord(modifyMutator.object.getClassName)						
							}
						}
					}
				}
       			if (ref.object instanceof SpecificClosureSelection) {
    	   			val SpecificClosureSelection selection = ref.object as SpecificClosureSelection
	     			if (selection.objSel instanceof CreateObjectMutator == false) {
       					if (selection.objSel instanceof SelectObjectMutator) {
       						className = UseUtils.encodeWord((selection.objSel as SelectObjectMutator).object.type.name)
       					}
       					if (selection.objSel instanceof SelectSampleMutator) {
							className = UseUtils.encodeWord(WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator))
						}
       					if (selection.objSel instanceof CloneObjectMutator) {
       						className = UseUtils.encodeWord(selection.objSel.type.name)
    	   				}
    	   				if (selection.objSel instanceof ModifyInformationMutator) {
							className = UseUtils.encodeWord(selection.objSel.type.name)
						}
	       			}
	       		}
	       		if (className.length > 0) {
					constraint.text = UseUtils.encodeWord(className) + ".allInstances()->size()"
					constraint.className = className
				}
       		}
       		else {
//       			if (ref instanceof ReferenceSwap) {
//       				var ReferenceSwap refSwap = ref as ReferenceSwap
//       				var EReference ref1 = refSwap.reference.get(0)
//       				var EReference ref2 = refSwap.reference.get(1)
//       				
//       				className = UseUtils.encodeWord((ref1.eContainer as EClass).name)
//       				constraint.type = "exists"
//       				
//       				var String v1 =  className.substring(0, 1).toLowerCase()
//       				constraint.text = className + ".allInstances()->exists(" + v1 + " | " + v1 + "." + UseUtils.encodeWord(ref1.name) + " <> " + v1 + "." + UseUtils.encodeWord(ref2.name) + ")"
//       			}
       			if (ref instanceof ReferenceInit) {
       				var ReferenceInit refInit = ref as ReferenceInit
       				var ObSelectionStrategy object = refInit.object
       				
       				constraint.type = "size"
       				
       				if (object instanceof RandomTypeSelection) {
       					className = object.type.name
    	   				if (object.expression != null) {
	       					object.expression.compile(className, constraints, blockName, mutName)
       					}
       				}
       				if (object instanceof CompleteTypeSelection) {
       					className = UseUtils.encodeWord(object.type.name)
       				}
					if (object instanceof SpecificObjectSelection) {
						val SpecificObjectSelection selection = object as SpecificObjectSelection
						if (selection.objSel instanceof CreateObjectMutator == false) {
							if (selection.objSel instanceof SelectObjectMutator) {
								className = UseUtils.encodeWord((selection.objSel as SelectObjectMutator).object.type.name)
							}
							if (selection.objSel instanceof SelectSampleMutator) {
								className = UseUtils.encodeWord(WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator))
							}
							if (selection.objSel instanceof CloneObjectMutator) {
								className = UseUtils.encodeWord(selection.objSel.type.name)
							}
							if (selection.objSel instanceof ModifyInformationMutator) {
								className = UseUtils.encodeWord(selection.objSel.type.name)
							}
						}
					}
       				if (object instanceof SpecificClosureSelection) {
    	   				val SpecificClosureSelection selection = object as SpecificClosureSelection
	     				if (selection.objSel instanceof CreateObjectMutator == false) {
	       					if (selection.objSel instanceof SelectObjectMutator) {
    	   						className = UseUtils.encodeWord((selection.objSel as SelectObjectMutator).object.type.name)
       						}
       						if (selection.objSel instanceof SelectSampleMutator) {
								className = UseUtils.encodeWord(WodelScopeProvider.selectSampleMutatorHelper(selection.objSel as SelectSampleMutator))
							}
       						if (selection.objSel instanceof CloneObjectMutator) {
       							className = UseUtils.encodeWord(selection.objSel.type.name)
    	   					}
    	   					if (selection.objSel instanceof ModifyInformationMutator) {
								className = UseUtils.encodeWord(selection.objSel.type.name)
							}
	       				}
	       			}
	       			if (className.length > 0) {
						constraint.text = UseUtils.encodeWord(className) + ".allInstances()->size()"
						constraint.className = className
	   				}
       			}
       		}
			if (constraint.text.length > 0) {
				if (constraints.getConstraint(constraint) == null) {
					constraints.add(constraint)
					constraint.storeMutatorName(blockName, mutName)
				}
			}
		}
	}
}