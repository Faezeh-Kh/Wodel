/**
 * generated by Xtext
 */
package wodel.dsls.scoping;

import com.google.common.base.Objects;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import manager.ModelManager;
import manager.MutatorUtils;
import manager.WodelContext;
import mutatorenvironment.AttributeEvaluation;
import mutatorenvironment.AttributeScalar;
import mutatorenvironment.Block;
import mutatorenvironment.CloneObjectMutator;
import mutatorenvironment.CompleteTypeSelection;
import mutatorenvironment.CompositeMutator;
import mutatorenvironment.Constraint;
import mutatorenvironment.CreateObjectMutator;
import mutatorenvironment.CreateReferenceMutator;
import mutatorenvironment.Definition;
import mutatorenvironment.Evaluation;
import mutatorenvironment.Expression;
import mutatorenvironment.MaxValueType;
import mutatorenvironment.MinValueType;
import mutatorenvironment.ModifyInformationMutator;
import mutatorenvironment.ModifySourceReferenceMutator;
import mutatorenvironment.ModifyTargetReferenceMutator;
import mutatorenvironment.Mutator;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.ObSelectionStrategy;
import mutatorenvironment.ObjectAttributeType;
import mutatorenvironment.ObjectEmitter;
import mutatorenvironment.OtherTypeSelection;
import mutatorenvironment.Program;
import mutatorenvironment.RandomNumberType;
import mutatorenvironment.RandomTypeSelection;
import mutatorenvironment.ReferenceAdd;
import mutatorenvironment.ReferenceAtt;
import mutatorenvironment.ReferenceEvaluation;
import mutatorenvironment.ReferenceInit;
import mutatorenvironment.ReferenceRemove;
import mutatorenvironment.ReferenceSet;
import mutatorenvironment.ReferenceSwap;
import mutatorenvironment.RemoveCompleteReferenceMutator;
import mutatorenvironment.RemoveObjectMutator;
import mutatorenvironment.RemoveRandomReferenceMutator;
import mutatorenvironment.RemoveSpecificReferenceMutator;
import mutatorenvironment.RetypeObjectMutator;
import mutatorenvironment.SelectObjectMutator;
import mutatorenvironment.SelectSampleMutator;
import mutatorenvironment.Source;
import mutatorenvironment.SpecificClosureSelection;
import mutatorenvironment.SpecificObjectSelection;
import mutatorenvironment.miniOCL.CallExpCS;
import mutatorenvironment.miniOCL.ExpCS;
import mutatorenvironment.miniOCL.InvariantCS;
import mutatorenvironment.miniOCL.NameExpCS;
import mutatorenvironment.miniOCL.PathCS;
import mutatorenvironment.miniOCL.PathElementCS;
import mutatorenvironment.miniOCL.PathNameCS;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * @author Pablo Gomez-Abajo - Wodel editor scope provider
 * 
 * Scope provider for the Wodel language.
 * 
 * This class was started by Victor Lopez Rivero.
 * Since March, 2015 it is continued by Pablo Gomez Abajo.
 */
@SuppressWarnings("all")
public class WodelScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * ObjectEmitter.type can contain any EClass from the input meta-model.
   * Except the RetypeObjectMutator that can contain any compatible EClass.
   */
  public IScope scope_ObjectEmitter_type(final ObjectEmitter obj, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(obj);
      final Definition definition = env.getDefinition();
      List<EClass> classes = null;
      if ((obj instanceof RetypeObjectMutator)) {
        final RetypeObjectMutator retypeObjectMutator = ((RetypeObjectMutator) obj);
        String _metamodel = definition.getMetamodel();
        ObSelectionStrategy _object = retypeObjectMutator.getObject();
        EClass _strategyType = MutatorUtils.getStrategyType(_object);
        List<EClass> _siblingEClasses = ModelManager.getSiblingEClasses(_metamodel, _strategyType);
        classes = _siblingEClasses;
      } else {
        String _metamodel_1 = definition.getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel_1);
        classes = _eClasses;
      }
      _xblockexpression = Scopes.scopeFor(classes);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the created object.
   */
  public IScope scope_SpecificObjectSelection_objSel(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      String _metamodel_1 = definition.getMetamodel();
      EClass _type_1 = com.getType();
      String _name_1 = _type_1.getName();
      final List<EReference> references = this.getEReferences(_metamodel_1, _name_1);
      for (final EReference eref : references) {
        EClassifier _eType = eref.getEType();
        String _name_2 = _eType.getName();
        scontainers.add(_name_2);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_3 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_3, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_2 = mutator.getType();
          String _name_4 = _type_2.getName();
          boolean _contains = scontainers.contains(_name_4);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the selected object.
   */
  public IScope scope_SpecificObjectSelection_objSel(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_1 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_1, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_1 = mutator.getType();
          String _name_2 = _type_1.getName();
          boolean _contains = scontainers.contains(_name_2);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the created object.
   */
  public IScope scope_SpecificClosureSelection_objSel(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      String _metamodel_1 = definition.getMetamodel();
      EClass _type_1 = com.getType();
      String _name_1 = _type_1.getName();
      final List<EReference> references = this.getEReferences(_metamodel_1, _name_1);
      for (final EReference eref : references) {
        EClassifier _eType = eref.getEType();
        String _name_2 = _eType.getName();
        scontainers.add(_name_2);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_3 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_3, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_2 = mutator.getType();
          String _name_4 = _type_2.getName();
          boolean _contains = scontainers.contains(_name_4);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectObjectMutator.container, when a specific object is used as a container,
   * can contain any previous object whose type is a container for the selected object.
   */
  public IScope scope_SpecificClosureSelection_objSel(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_1 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_1, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_1 = mutator.getType();
          String _name_2 = _type_1.getName();
          boolean _contains = scontainers.contains(_name_2);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CompleteTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_CompleteTypeSelection_type(final CompleteTypeSelection com, final EReference ref) {
    return this.anyTypeSelection(com);
  }
  
  /**
   * RandomTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_RandomTypeSelection_type(final RandomTypeSelection com, final EReference ref) {
    return this.anyTypeSelection(com);
  }
  
  /**
   * OtherTypeSelection.type can contain any EClass from the input meta-model.
   */
  public IScope scope_OtherTypeSelection_type(final OtherTypeSelection com, final EReference ref) {
    return this.anyTypeSelection(com);
  }
  
  /**
   * Common implementation for methods scope_CompleteTypeSelection_type, scope_RandomTypeSelection_type and scope_OtherTypeSelection_type.
   */
  private IScope anyTypeSelection(final ObSelectionStrategy com) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EClass> scope = new ArrayList<EClass>();
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ModifyTargetReferenceMutator)) {
        EObject _eContainer_1 = com.eContainer();
        final ModifyTargetReferenceMutator mutator = ((ModifyTargetReferenceMutator) _eContainer_1);
        ObSelectionStrategy _source = mutator.getSource();
        boolean _equals = Objects.equal(_source, com);
        if (_equals) {
          String _metamodel = definition.getMetamodel();
          EReference _refType = mutator.getRefType();
          String _name = _refType.getName();
          List<EClass> _eSources = this.getESources(_metamodel, _name);
          scope.addAll(_eSources);
        } else {
          ObSelectionStrategy _newTarget = mutator.getNewTarget();
          boolean _equals_1 = Objects.equal(_newTarget, com);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            EReference _refType_1 = mutator.getRefType();
            String _name_1 = _refType_1.getName();
            List<EClass> _eTargets = this.getETargets(_metamodel_1, _name_1);
            scope.addAll(_eTargets);
          }
        }
      } else {
        EObject _eContainer_2 = com.eContainer();
        if ((_eContainer_2 instanceof CreateReferenceMutator)) {
          EObject _eContainer_3 = com.eContainer();
          final CreateReferenceMutator mutator_1 = ((CreateReferenceMutator) _eContainer_3);
          ObSelectionStrategy _source_1 = mutator_1.getSource();
          boolean _equals_2 = Objects.equal(_source_1, com);
          if (_equals_2) {
            String _metamodel_2 = definition.getMetamodel();
            EReference _refType_2 = mutator_1.getRefType();
            String _name_2 = _refType_2.getName();
            List<EClass> _eSources_1 = this.getESources(_metamodel_2, _name_2);
            scope.addAll(_eSources_1);
          } else {
            ObSelectionStrategy _target = mutator_1.getTarget();
            boolean _equals_3 = Objects.equal(_target, com);
            if (_equals_3) {
              String _metamodel_3 = definition.getMetamodel();
              EReference _refType_3 = mutator_1.getRefType();
              String _name_3 = _refType_3.getName();
              List<EClass> _eTargets_1 = this.getETargets(_metamodel_3, _name_3);
              scope.addAll(_eTargets_1);
            }
          }
        } else {
          boolean _or = false;
          boolean _or_1 = false;
          boolean _or_2 = false;
          boolean _or_3 = false;
          boolean _or_4 = false;
          EObject _eContainer_4 = com.eContainer();
          if ((_eContainer_4 instanceof MutatorEnvironment)) {
            _or_4 = true;
          } else {
            EObject _eContainer_5 = com.eContainer();
            _or_4 = (_eContainer_5 instanceof CreateObjectMutator);
          }
          if (_or_4) {
            _or_3 = true;
          } else {
            EObject _eContainer_6 = com.eContainer();
            _or_3 = (_eContainer_6 instanceof SelectObjectMutator);
          }
          if (_or_3) {
            _or_2 = true;
          } else {
            EObject _eContainer_7 = com.eContainer();
            _or_2 = (_eContainer_7 instanceof SelectSampleMutator);
          }
          if (_or_2) {
            _or_1 = true;
          } else {
            EObject _eContainer_8 = com.eContainer();
            _or_1 = (_eContainer_8 instanceof CloneObjectMutator);
          }
          if (_or_1) {
            _or = true;
          } else {
            EObject _eContainer_9 = com.eContainer();
            _or = (_eContainer_9 instanceof RetypeObjectMutator);
          }
          if (_or) {
            String _metamodel_4 = definition.getMetamodel();
            List<EClass> _eClasses = this.getEClasses(_metamodel_4);
            scope.addAll(_eClasses);
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * SpecificObjectSelection.objSel can contain any EClass from the input meta-model.
   */
  public IScope scope_SpecificObjectSelection_objSel(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<Mutator> scope = new ArrayList<Mutator>();
      IScope _xifexpression = null;
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ModifyTargetReferenceMutator)) {
        IScope _xblockexpression_1 = null;
        {
          EObject _eContainer_1 = com.eContainer();
          final ModifyTargetReferenceMutator mutator = ((ModifyTargetReferenceMutator) _eContainer_1);
          final List<Mutator> commands = this.getCommands(mutator);
          IScope _xifexpression_1 = null;
          ObSelectionStrategy _source = mutator.getSource();
          boolean _equals = Objects.equal(_source, com);
          if (_equals) {
            IScope _xblockexpression_2 = null;
            {
              String _metamodel = definition.getMetamodel();
              EReference _refType = mutator.getRefType();
              String _name = _refType.getName();
              final List<EClass> containers = this.getESources(_metamodel, _name);
              final List<String> scontainers = new ArrayList<String>();
              for (final EClassifier cl : containers) {
                String _name_1 = cl.getName();
                scontainers.add(_name_1);
              }
              for (final Mutator c : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = c.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(c);
                  int _indexOf_1 = commands.indexOf(mutator);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = c.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = scontainers.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  scope.add(c);
                }
              }
              _xblockexpression_2 = Scopes.scopeFor(scope);
            }
            _xifexpression_1 = _xblockexpression_2;
          } else {
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _newTarget = mutator.getNewTarget();
            boolean _equals_1 = Objects.equal(_newTarget, com);
            if (_equals_1) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containments = this.getETargets(_metamodel, _name);
                final List<String> scontainments = new ArrayList<String>();
                for (final EClassifier cl : containments) {
                  String _name_1 = cl.getName();
                  scontainments.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainments.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        IScope _xifexpression_1 = null;
        EObject _eContainer_1 = com.eContainer();
        if ((_eContainer_1 instanceof CreateReferenceMutator)) {
          IScope _xblockexpression_2 = null;
          {
            EObject _eContainer_2 = com.eContainer();
            final CreateReferenceMutator mutator = ((CreateReferenceMutator) _eContainer_2);
            final List<Mutator> commands = this.getCommands(mutator);
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _source = mutator.getSource();
            boolean _equals = Objects.equal(_source, com);
            if (_equals) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containers = this.getESources(_metamodel, _name);
                final List<String> scontainers = new ArrayList<String>();
                for (final EClassifier cl : containers) {
                  String _name_1 = cl.getName();
                  scontainers.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainers.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            } else {
              IScope _xifexpression_3 = null;
              ObSelectionStrategy _target = mutator.getTarget();
              boolean _equals_1 = Objects.equal(_target, com);
              if (_equals_1) {
                IScope _xblockexpression_4 = null;
                {
                  String _metamodel = definition.getMetamodel();
                  EReference _refType = mutator.getRefType();
                  String _name = _refType.getName();
                  final List<EClass> containments = this.getETargets(_metamodel, _name);
                  final List<String> scontainments = new ArrayList<String>();
                  for (final EClassifier cl : containments) {
                    String _name_1 = cl.getName();
                    scontainments.add(_name_1);
                  }
                  for (final Mutator c : commands) {
                    boolean _and = false;
                    boolean _and_1 = false;
                    boolean _and_2 = false;
                    String _name_2 = c.getName();
                    boolean _notEquals = (!Objects.equal(_name_2, null));
                    if (!_notEquals) {
                      _and_2 = false;
                    } else {
                      int _indexOf = commands.indexOf(c);
                      int _indexOf_1 = commands.indexOf(mutator);
                      boolean _lessThan = (_indexOf < _indexOf_1);
                      _and_2 = _lessThan;
                    }
                    if (!_and_2) {
                      _and_1 = false;
                    } else {
                      _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                    }
                    if (!_and_1) {
                      _and = false;
                    } else {
                      EClass _type = c.getType();
                      String _name_3 = _type.getName();
                      boolean _contains = scontainments.contains(_name_3);
                      _and = _contains;
                    }
                    if (_and) {
                      scope.add(c);
                    }
                  }
                  _xblockexpression_4 = Scopes.scopeFor(scope);
                }
                _xifexpression_3 = _xblockexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xblockexpression_2 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * SpecificObjectSelection.objSel can contain any EClass from the input meta-model.
   */
  public IScope scope_SpecificClosureSelection_objSel(final SpecificClosureSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<Mutator> scope = new ArrayList<Mutator>();
      IScope _xifexpression = null;
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ModifyTargetReferenceMutator)) {
        IScope _xblockexpression_1 = null;
        {
          EObject _eContainer_1 = com.eContainer();
          final ModifyTargetReferenceMutator mutator = ((ModifyTargetReferenceMutator) _eContainer_1);
          final List<Mutator> commands = this.getCommands(mutator);
          IScope _xifexpression_1 = null;
          ObSelectionStrategy _source = mutator.getSource();
          boolean _equals = Objects.equal(_source, com);
          if (_equals) {
            IScope _xblockexpression_2 = null;
            {
              String _metamodel = definition.getMetamodel();
              EReference _refType = mutator.getRefType();
              String _name = _refType.getName();
              final List<EClass> containers = this.getESources(_metamodel, _name);
              final List<String> scontainers = new ArrayList<String>();
              for (final EClassifier cl : containers) {
                String _name_1 = cl.getName();
                scontainers.add(_name_1);
              }
              for (final Mutator c : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = c.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(c);
                  int _indexOf_1 = commands.indexOf(mutator);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = c.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = scontainers.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  scope.add(c);
                }
              }
              _xblockexpression_2 = Scopes.scopeFor(scope);
            }
            _xifexpression_1 = _xblockexpression_2;
          } else {
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _newTarget = mutator.getNewTarget();
            boolean _equals_1 = Objects.equal(_newTarget, com);
            if (_equals_1) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containments = this.getETargets(_metamodel, _name);
                final List<String> scontainments = new ArrayList<String>();
                for (final EClassifier cl : containments) {
                  String _name_1 = cl.getName();
                  scontainments.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainments.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _xblockexpression_1 = _xifexpression_1;
        }
        _xifexpression = _xblockexpression_1;
      } else {
        IScope _xifexpression_1 = null;
        EObject _eContainer_1 = com.eContainer();
        if ((_eContainer_1 instanceof CreateReferenceMutator)) {
          IScope _xblockexpression_2 = null;
          {
            EObject _eContainer_2 = com.eContainer();
            final CreateReferenceMutator mutator = ((CreateReferenceMutator) _eContainer_2);
            final List<Mutator> commands = this.getCommands(mutator);
            IScope _xifexpression_2 = null;
            ObSelectionStrategy _source = mutator.getSource();
            boolean _equals = Objects.equal(_source, com);
            if (_equals) {
              IScope _xblockexpression_3 = null;
              {
                String _metamodel = definition.getMetamodel();
                EReference _refType = mutator.getRefType();
                String _name = _refType.getName();
                final List<EClass> containers = this.getESources(_metamodel, _name);
                final List<String> scontainers = new ArrayList<String>();
                for (final EClassifier cl : containers) {
                  String _name_1 = cl.getName();
                  scontainers.add(_name_1);
                }
                for (final Mutator c : commands) {
                  boolean _and = false;
                  boolean _and_1 = false;
                  boolean _and_2 = false;
                  String _name_2 = c.getName();
                  boolean _notEquals = (!Objects.equal(_name_2, null));
                  if (!_notEquals) {
                    _and_2 = false;
                  } else {
                    int _indexOf = commands.indexOf(c);
                    int _indexOf_1 = commands.indexOf(mutator);
                    boolean _lessThan = (_indexOf < _indexOf_1);
                    _and_2 = _lessThan;
                  }
                  if (!_and_2) {
                    _and_1 = false;
                  } else {
                    _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                  }
                  if (!_and_1) {
                    _and = false;
                  } else {
                    EClass _type = c.getType();
                    String _name_3 = _type.getName();
                    boolean _contains = scontainers.contains(_name_3);
                    _and = _contains;
                  }
                  if (_and) {
                    scope.add(c);
                  }
                }
                _xblockexpression_3 = Scopes.scopeFor(scope);
              }
              _xifexpression_2 = _xblockexpression_3;
            } else {
              IScope _xifexpression_3 = null;
              ObSelectionStrategy _target = mutator.getTarget();
              boolean _equals_1 = Objects.equal(_target, com);
              if (_equals_1) {
                IScope _xblockexpression_4 = null;
                {
                  String _metamodel = definition.getMetamodel();
                  EReference _refType = mutator.getRefType();
                  String _name = _refType.getName();
                  final List<EClass> containments = this.getETargets(_metamodel, _name);
                  final List<String> scontainments = new ArrayList<String>();
                  for (final EClassifier cl : containments) {
                    String _name_1 = cl.getName();
                    scontainments.add(_name_1);
                  }
                  for (final Mutator c : commands) {
                    boolean _and = false;
                    boolean _and_1 = false;
                    boolean _and_2 = false;
                    String _name_2 = c.getName();
                    boolean _notEquals = (!Objects.equal(_name_2, null));
                    if (!_notEquals) {
                      _and_2 = false;
                    } else {
                      int _indexOf = commands.indexOf(c);
                      int _indexOf_1 = commands.indexOf(mutator);
                      boolean _lessThan = (_indexOf < _indexOf_1);
                      _and_2 = _lessThan;
                    }
                    if (!_and_2) {
                      _and_1 = false;
                    } else {
                      _and_1 = ((((((c instanceof CreateObjectMutator) || (c instanceof SelectObjectMutator)) || (c instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                    }
                    if (!_and_1) {
                      _and = false;
                    } else {
                      EClass _type = c.getType();
                      String _name_3 = _type.getName();
                      boolean _contains = scontainments.contains(_name_3);
                      _and = _contains;
                    }
                    if (_and) {
                      scope.add(c);
                    }
                  }
                  _xblockexpression_4 = Scopes.scopeFor(scope);
                }
                _xifexpression_3 = _xblockexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xblockexpression_2 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the created object.
   */
  public IScope scope_RandomTypeSelection_type(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the selected object.
   */
  public IScope scope_RandomTypeSelection_type(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectSampleMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the selected objects.
   */
  public IScope scope_RandomTypeSelection_type(final SelectSampleMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * CloneObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the cloned object.
   */
  public IScope scope_RandomTypeSelection_type(final CloneObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * RetypeObjectMutator.container, when a random type is used as a container,
   * can contain any EClass which is a container for the retyped object.
   */
  public IScope scope_RandomTypeSelection_type(final RetypeObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      List<EClass> _eContainers = this.getEContainers(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eContainers);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is CreateObjetMutator.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof ObSelectionStrategy)) {
        String sourceClassName = null;
        ObSelectionStrategy _container_1 = com.getContainer();
        if ((_container_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _container_2 = com.getContainer();
          EClass _type = _container_2.getType();
          String _name = _type.getName();
          sourceClassName = _name;
        }
        ObSelectionStrategy _container_3 = com.getContainer();
        if ((_container_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _container_4 = com.getContainer();
          EClass _type_1 = _container_4.getType();
          String _name_1 = _type_1.getName();
          sourceClassName = _name_1;
        }
        ObSelectionStrategy _container_5 = com.getContainer();
        if ((_container_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _container_6 = com.getContainer();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _container_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            sourceClassName = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object.getType();
            String _name_3 = _type_3.getName();
            sourceClassName = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            sourceClassName = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            sourceClassName = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            sourceClassName = _name_5;
          }
        }
        ObSelectionStrategy _container_7 = com.getContainer();
        if ((_container_7 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _container_8 = com.getContainer();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _container_8);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            sourceClassName = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_1.getType();
            String _name_7 = _type_7.getName();
            sourceClassName = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            sourceClassName = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            sourceClassName = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            sourceClassName = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        EClass _type_10 = com.getType();
        String _name_10 = _type_10.getName();
        List<EReference> _eReferences = this.getEReferences(_metamodel, sourceClassName, _name_10);
        scope.addAll(_eReferences);
      } else {
        EClass _type_11 = com.getType();
        String className = _type_11.getName();
        String _metamodel_1 = definition.getMetamodel();
        List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, className);
        scope.addAll(_eReferences_1);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is ReferenceInit.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final ReferenceInit com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof ObSelectionStrategy)) {
        String className = null;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          EClass _type = _object_2.getType();
          String _name = _type.getName();
          className = _name;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          EClass _type_1 = _object_4.getType();
          String _name_1 = _type_1.getName();
          className = _name_1;
        }
        ObSelectionStrategy _object_5 = com.getObject();
        if ((_object_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_6 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object_7.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            className = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
        }
        ObSelectionStrategy _object_8 = com.getObject();
        if ((_object_8 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_9 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_9);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_10.getType();
            String _name_7 = _type_7.getName();
            className = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            className = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is ReferenceAdd.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final ReferenceAdd com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof ObSelectionStrategy)) {
        String className = null;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          EClass _type = _object_2.getType();
          String _name = _type.getName();
          className = _name;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          EClass _type_1 = _object_4.getType();
          String _name_1 = _type_1.getName();
          className = _name_1;
        }
        ObSelectionStrategy _object_5 = com.getObject();
        if ((_object_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_6 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object_7.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            className = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
        }
        ObSelectionStrategy _object_8 = com.getObject();
        if ((_object_8 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_9 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_9);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_10.getType();
            String _name_7 = _type_7.getName();
            className = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            className = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is ReferenceRemove.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final ReferenceRemove com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof ObSelectionStrategy)) {
        String className = null;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          EClass _type = _object_2.getType();
          String _name = _type.getName();
          className = _name;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          EClass _type_1 = _object_4.getType();
          String _name_1 = _type_1.getName();
          className = _name_1;
        }
        ObSelectionStrategy _object_5 = com.getObject();
        if ((_object_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_6 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object_7.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            className = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
        }
        ObSelectionStrategy _object_8 = com.getObject();
        if ((_object_8 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_9 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_9);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_10.getType();
            String _name_7 = _type_7.getName();
            className = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            className = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is ReferenceEvaluation.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final ReferenceEvaluation refEv, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final List<EReference> scope = new ArrayList<EReference>();
      EObject container = refEv.eContainer();
      while ((((container instanceof Mutator) == false) && (!Objects.equal(container, null)))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      boolean _notEquals = (!Objects.equal(container, null));
      if (_notEquals) {
        final MutatorEnvironment env = this.getMutatorEnvironment(((Mutator) container));
        final Definition definition = env.getDefinition();
        ObSelectionStrategy _value = refEv.getValue();
        if ((_value instanceof SpecificObjectSelection)) {
          String className = null;
          ObSelectionStrategy _value_1 = refEv.getValue();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _value_1);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type = _objSel_1.getType();
            String _name = _type.getName();
            className = _name;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_1 = _object.getType();
            String _name_1 = _type_1.getName();
            className = _name_1;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_2 = _objSel_7.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_3 = _objSel_9.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
          String _metamodel = definition.getMetamodel();
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          scope.addAll(_eReferences);
        }
        ObSelectionStrategy _value_2 = refEv.getValue();
        if ((_value_2 instanceof SpecificClosureSelection)) {
          String className_1 = null;
          ObSelectionStrategy _value_3 = refEv.getValue();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _value_3);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_4 = _objSel_11.getType();
            String _name_4 = _type_4.getName();
            className_1 = _name_4;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_5 = _object_1.getType();
            String _name_5 = _type_5.getName();
            className_1 = _name_5;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className_1 = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_6 = _objSel_17.getType();
            String _name_6 = _type_6.getName();
            className_1 = _name_6;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_7 = _objSel_19.getType();
            String _name_7 = _type_7.getName();
            className_1 = _name_7;
          }
          String _metamodel_1 = definition.getMetamodel();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, className_1);
          scope.addAll(_eReferences_1);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is SelectObjetMutator.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof ObSelectionStrategy)) {
        String sourceClassName = null;
        ObSelectionStrategy _container_1 = com.getContainer();
        if ((_container_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _container_2 = com.getContainer();
          EClass _type = _container_2.getType();
          String _name = _type.getName();
          sourceClassName = _name;
        }
        ObSelectionStrategy _container_3 = com.getContainer();
        if ((_container_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _container_4 = com.getContainer();
          EClass _type_1 = _container_4.getType();
          String _name_1 = _type_1.getName();
          sourceClassName = _name_1;
        }
        ObSelectionStrategy _container_5 = com.getContainer();
        if ((_container_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _container_6 = com.getContainer();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _container_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            sourceClassName = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object.getType();
            String _name_3 = _type_3.getName();
            sourceClassName = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            sourceClassName = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            sourceClassName = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            sourceClassName = _name_5;
          }
        }
        ObSelectionStrategy _container_7 = com.getContainer();
        if ((_container_7 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _container_8 = com.getContainer();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _container_8);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            sourceClassName = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_1.getType();
            String _name_7 = _type_7.getName();
            sourceClassName = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            sourceClassName = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            sourceClassName = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            sourceClassName = _name_9;
          }
        }
        String targetClassName = null;
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_10 = _object_3.getType();
          String _name_10 = _type_10.getName();
          targetClassName = _name_10;
        }
        ObSelectionStrategy _object_4 = com.getObject();
        if ((_object_4 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_5 = com.getObject();
          EClass _type_11 = _object_5.getType();
          String _name_11 = _type_11.getName();
          targetClassName = _name_11;
        }
        ObSelectionStrategy _object_6 = com.getObject();
        if ((_object_6 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_7 = com.getObject();
          final SpecificObjectSelection selection_2 = ((SpecificObjectSelection) _object_7);
          EReference _refType = selection_2.getRefType();
          boolean _equals = Objects.equal(_refType, null);
          if (_equals) {
            ObjectEmitter _objSel_20 = selection_2.getObjSel();
            if ((_objSel_20 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_21 = selection_2.getObjSel();
              ObSelectionStrategy _object_8 = ((SelectObjectMutator) _objSel_21).getObject();
              EClass _type_12 = _object_8.getType();
              String _name_12 = _type_12.getName();
              targetClassName = _name_12;
            }
          } else {
            EReference _refType_1 = selection_2.getRefType();
            EClassifier _eType = _refType_1.getEType();
            String _name_13 = _eType.getName();
            targetClassName = _name_13;
          }
        }
        ObSelectionStrategy _object_9 = com.getObject();
        if ((_object_9 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_10 = com.getObject();
          final SpecificClosureSelection selection_3 = ((SpecificClosureSelection) _object_10);
          EReference _refType_2 = selection_3.getRefType();
          boolean _equals_1 = Objects.equal(_refType_2, null);
          if (_equals_1) {
            ObjectEmitter _objSel_22 = selection_3.getObjSel();
            if ((_objSel_22 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_23 = selection_3.getObjSel();
              ObSelectionStrategy _object_11 = ((SelectObjectMutator) _objSel_23).getObject();
              EClass _type_13 = _object_11.getType();
              String _name_14 = _type_13.getName();
              targetClassName = _name_14;
            }
          } else {
            EReference _refType_3 = selection_3.getRefType();
            EClassifier _eType_1 = _refType_3.getEType();
            String _name_15 = _eType_1.getName();
            targetClassName = _name_15;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, sourceClassName, targetClassName);
        scope.addAll(_eReferences);
      } else {
        String className = null;
        ObSelectionStrategy _object_12 = com.getObject();
        if ((_object_12 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_13 = com.getObject();
          EClass _type_14 = _object_13.getType();
          String _name_16 = _type_14.getName();
          className = _name_16;
        }
        ObSelectionStrategy _object_14 = com.getObject();
        if ((_object_14 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_15 = com.getObject();
          EClass _type_15 = _object_15.getType();
          String _name_17 = _type_15.getName();
          className = _name_17;
        }
        ObSelectionStrategy _object_16 = com.getObject();
        if ((_object_16 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_17 = com.getObject();
          final SpecificObjectSelection selection_4 = ((SpecificObjectSelection) _object_17);
          ObjectEmitter _objSel_24 = selection_4.getObjSel();
          if ((_objSel_24 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_25 = selection_4.getObjSel();
            EClass _type_16 = _objSel_25.getType();
            String _name_18 = _type_16.getName();
            className = _name_18;
          }
          ObjectEmitter _objSel_26 = selection_4.getObjSel();
          if ((_objSel_26 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_27 = selection_4.getObjSel();
            ObSelectionStrategy _object_18 = ((SelectObjectMutator) _objSel_27).getObject();
            EClass _type_17 = _object_18.getType();
            String _name_19 = _type_17.getName();
            className = _name_19;
          }
          ObjectEmitter _objSel_28 = selection_4.getObjSel();
          if ((_objSel_28 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_29 = selection_4.getObjSel();
            EClass _type_18 = _objSel_29.getType();
            String _name_20 = _type_18.getName();
            className = _name_20;
          }
          ObjectEmitter _objSel_30 = selection_4.getObjSel();
          if ((_objSel_30 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_31 = selection_4.getObjSel();
            EClass _type_19 = _objSel_31.getType();
            String _name_21 = _type_19.getName();
            className = _name_21;
          }
        }
        ObSelectionStrategy _object_19 = com.getObject();
        if ((_object_19 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_20 = com.getObject();
          final SpecificClosureSelection selection_5 = ((SpecificClosureSelection) _object_20);
          ObjectEmitter _objSel_32 = selection_5.getObjSel();
          if ((_objSel_32 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_33 = selection_5.getObjSel();
            EClass _type_20 = _objSel_33.getType();
            String _name_22 = _type_20.getName();
            className = _name_22;
          }
          ObjectEmitter _objSel_34 = selection_5.getObjSel();
          if ((_objSel_34 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_35 = selection_5.getObjSel();
            ObSelectionStrategy _object_21 = ((SelectObjectMutator) _objSel_35).getObject();
            EClass _type_21 = _object_21.getType();
            String _name_23 = _type_21.getName();
            className = _name_23;
          }
          ObjectEmitter _objSel_36 = selection_5.getObjSel();
          if ((_objSel_36 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_37 = selection_5.getObjSel();
            EClass _type_22 = _objSel_37.getType();
            String _name_24 = _type_22.getName();
            className = _name_24;
          }
          ObjectEmitter _objSel_38 = selection_5.getObjSel();
          if ((_objSel_38 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_39 = selection_5.getObjSel();
            EClass _type_23 = _objSel_39.getType();
            String _name_25 = _type_23.getName();
            className = _name_25;
          }
        }
        String _metamodel_1 = definition.getMetamodel();
        List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, className);
        scope.addAll(_eReferences_1);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is CloneObjetMutator.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final CloneObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof ObSelectionStrategy)) {
        String sourceClassName = null;
        ObSelectionStrategy _container_1 = com.getContainer();
        if ((_container_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _container_2 = com.getContainer();
          EClass _type = _container_2.getType();
          String _name = _type.getName();
          sourceClassName = _name;
        }
        ObSelectionStrategy _container_3 = com.getContainer();
        if ((_container_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _container_4 = com.getContainer();
          EClass _type_1 = _container_4.getType();
          String _name_1 = _type_1.getName();
          sourceClassName = _name_1;
        }
        ObSelectionStrategy _container_5 = com.getContainer();
        if ((_container_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _container_6 = com.getContainer();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _container_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            sourceClassName = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object.getType();
            String _name_3 = _type_3.getName();
            sourceClassName = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            sourceClassName = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            sourceClassName = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            sourceClassName = _name_5;
          }
        }
        ObSelectionStrategy _container_7 = com.getContainer();
        if ((_container_7 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _container_8 = com.getContainer();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _container_8);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            sourceClassName = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_1.getType();
            String _name_7 = _type_7.getName();
            sourceClassName = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            sourceClassName = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            sourceClassName = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            sourceClassName = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        EClass _type_10 = com.getType();
        String _name_10 = _type_10.getName();
        List<EReference> _eContainmentReferences = this.getEContainmentReferences(_metamodel, sourceClassName, _name_10);
        scope.addAll(_eContainmentReferences);
      } else {
        String className = null;
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_11 = _object_3.getType();
          String _name_11 = _type_11.getName();
          className = _name_11;
        }
        ObSelectionStrategy _object_4 = com.getObject();
        if ((_object_4 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_5 = com.getObject();
          EClass _type_12 = _object_5.getType();
          String _name_12 = _type_12.getName();
          className = _name_12;
        }
        ObSelectionStrategy _object_6 = com.getObject();
        if ((_object_6 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_7 = com.getObject();
          final SpecificObjectSelection selection_2 = ((SpecificObjectSelection) _object_7);
          ObjectEmitter _objSel_20 = selection_2.getObjSel();
          if ((_objSel_20 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_21 = selection_2.getObjSel();
            EClass _type_13 = _objSel_21.getType();
            String _name_13 = _type_13.getName();
            className = _name_13;
          }
          ObjectEmitter _objSel_22 = selection_2.getObjSel();
          if ((_objSel_22 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_23 = selection_2.getObjSel();
            ObSelectionStrategy _object_8 = ((SelectObjectMutator) _objSel_23).getObject();
            EClass _type_14 = _object_8.getType();
            String _name_14 = _type_14.getName();
            className = _name_14;
          }
          ObjectEmitter _objSel_24 = selection_2.getObjSel();
          if ((_objSel_24 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_25 = selection_2.getObjSel();
            EClass _type_15 = _objSel_25.getType();
            String _name_15 = _type_15.getName();
            className = _name_15;
          }
          ObjectEmitter _objSel_26 = selection_2.getObjSel();
          if ((_objSel_26 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_27 = selection_2.getObjSel();
            EClass _type_16 = _objSel_27.getType();
            String _name_16 = _type_16.getName();
            className = _name_16;
          }
        }
        ObSelectionStrategy _object_9 = com.getObject();
        if ((_object_9 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_10 = com.getObject();
          final SpecificClosureSelection selection_3 = ((SpecificClosureSelection) _object_10);
          ObjectEmitter _objSel_28 = selection_3.getObjSel();
          if ((_objSel_28 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_29 = selection_3.getObjSel();
            EClass _type_17 = _objSel_29.getType();
            String _name_17 = _type_17.getName();
            className = _name_17;
          }
          ObjectEmitter _objSel_30 = selection_3.getObjSel();
          if ((_objSel_30 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_31 = selection_3.getObjSel();
            ObSelectionStrategy _object_11 = ((SelectObjectMutator) _objSel_31).getObject();
            EClass _type_18 = _object_11.getType();
            String _name_18 = _type_18.getName();
            className = _name_18;
          }
          ObjectEmitter _objSel_32 = selection_3.getObjSel();
          if ((_objSel_32 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_33 = selection_3.getObjSel();
            EClass _type_19 = _objSel_33.getType();
            String _name_19 = _type_19.getName();
            className = _name_19;
          }
          ObjectEmitter _objSel_34 = selection_3.getObjSel();
          if ((_objSel_34 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_35 = selection_3.getObjSel();
            EClass _type_20 = _objSel_35.getType();
            String _name_20 = _type_20.getName();
            className = _name_20;
          }
        }
        String _metamodel_1 = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel_1, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is RemoveObjetMutator.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _container = com.getContainer();
      if ((_container instanceof ObSelectionStrategy)) {
        String sourceClassName = null;
        ObSelectionStrategy _container_1 = com.getContainer();
        if ((_container_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _container_2 = com.getContainer();
          EClass _type = _container_2.getType();
          String _name = _type.getName();
          sourceClassName = _name;
        }
        ObSelectionStrategy _container_3 = com.getContainer();
        if ((_container_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _container_4 = com.getContainer();
          EClass _type_1 = _container_4.getType();
          String _name_1 = _type_1.getName();
          sourceClassName = _name_1;
        }
        ObSelectionStrategy _container_5 = com.getContainer();
        if ((_container_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _container_6 = com.getContainer();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _container_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            sourceClassName = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object.getType();
            String _name_3 = _type_3.getName();
            sourceClassName = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            sourceClassName = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            sourceClassName = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            sourceClassName = _name_5;
          }
        }
        ObSelectionStrategy _container_7 = com.getContainer();
        if ((_container_7 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _container_8 = com.getContainer();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _container_8);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            sourceClassName = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_1.getType();
            String _name_7 = _type_7.getName();
            sourceClassName = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            sourceClassName = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            sourceClassName = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            sourceClassName = _name_9;
          }
        }
        String targetClassName = null;
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          EClass _type_10 = _object_3.getType();
          String _name_10 = _type_10.getName();
          targetClassName = _name_10;
        }
        ObSelectionStrategy _object_4 = com.getObject();
        if ((_object_4 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_5 = com.getObject();
          EClass _type_11 = _object_5.getType();
          String _name_11 = _type_11.getName();
          targetClassName = _name_11;
        }
        ObSelectionStrategy _object_6 = com.getObject();
        if ((_object_6 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_7 = com.getObject();
          final SpecificObjectSelection selection_2 = ((SpecificObjectSelection) _object_7);
          EReference _refType = selection_2.getRefType();
          boolean _equals = Objects.equal(_refType, null);
          if (_equals) {
            ObjectEmitter _objSel_20 = selection_2.getObjSel();
            if ((_objSel_20 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_21 = selection_2.getObjSel();
              ObSelectionStrategy _object_8 = ((SelectObjectMutator) _objSel_21).getObject();
              EClass _type_12 = _object_8.getType();
              String _name_12 = _type_12.getName();
              targetClassName = _name_12;
            }
          } else {
            EReference _refType_1 = selection_2.getRefType();
            EClassifier _eType = _refType_1.getEType();
            String _name_13 = _eType.getName();
            targetClassName = _name_13;
          }
        }
        ObSelectionStrategy _object_9 = com.getObject();
        if ((_object_9 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_10 = com.getObject();
          final SpecificClosureSelection selection_3 = ((SpecificClosureSelection) _object_10);
          EReference _refType_2 = selection_3.getRefType();
          boolean _equals_1 = Objects.equal(_refType_2, null);
          if (_equals_1) {
            ObjectEmitter _objSel_22 = selection_3.getObjSel();
            if ((_objSel_22 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_23 = selection_3.getObjSel();
              ObSelectionStrategy _object_11 = ((SelectObjectMutator) _objSel_23).getObject();
              EClass _type_13 = _object_11.getType();
              String _name_14 = _type_13.getName();
              targetClassName = _name_14;
            }
          } else {
            EReference _refType_3 = selection_3.getRefType();
            EClassifier _eType_1 = _refType_3.getEType();
            String _name_15 = _eType_1.getName();
            targetClassName = _name_15;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, sourceClassName, targetClassName);
        scope.addAll(_eReferences);
      } else {
        String className = null;
        ObSelectionStrategy _object_12 = com.getObject();
        if ((_object_12 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_13 = com.getObject();
          EClass _type_14 = _object_13.getType();
          String _name_16 = _type_14.getName();
          className = _name_16;
        }
        ObSelectionStrategy _object_14 = com.getObject();
        if ((_object_14 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_15 = com.getObject();
          EClass _type_15 = _object_15.getType();
          String _name_17 = _type_15.getName();
          className = _name_17;
        }
        ObSelectionStrategy _object_16 = com.getObject();
        if ((_object_16 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_17 = com.getObject();
          final SpecificObjectSelection selection_4 = ((SpecificObjectSelection) _object_17);
          ObjectEmitter _objSel_24 = selection_4.getObjSel();
          if ((_objSel_24 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_25 = selection_4.getObjSel();
            EClass _type_16 = _objSel_25.getType();
            String _name_18 = _type_16.getName();
            className = _name_18;
          }
          ObjectEmitter _objSel_26 = selection_4.getObjSel();
          if ((_objSel_26 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_27 = selection_4.getObjSel();
            ObSelectionStrategy _object_18 = ((SelectObjectMutator) _objSel_27).getObject();
            EClass _type_17 = _object_18.getType();
            String _name_19 = _type_17.getName();
            className = _name_19;
          }
          ObjectEmitter _objSel_28 = selection_4.getObjSel();
          if ((_objSel_28 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_29 = selection_4.getObjSel();
            String _selectSampleMutatorHelperName_2 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_29));
            className = _selectSampleMutatorHelperName_2;
          }
          ObjectEmitter _objSel_30 = selection_4.getObjSel();
          if ((_objSel_30 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_31 = selection_4.getObjSel();
            EClass _type_18 = _objSel_31.getType();
            String _name_20 = _type_18.getName();
            className = _name_20;
          }
          ObjectEmitter _objSel_32 = selection_4.getObjSel();
          if ((_objSel_32 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_33 = selection_4.getObjSel();
            EClass _type_19 = _objSel_33.getType();
            String _name_21 = _type_19.getName();
            className = _name_21;
          }
        }
        ObSelectionStrategy _object_19 = com.getObject();
        if ((_object_19 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_20 = com.getObject();
          final SpecificClosureSelection selection_5 = ((SpecificClosureSelection) _object_20);
          ObjectEmitter _objSel_34 = selection_5.getObjSel();
          if ((_objSel_34 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_35 = selection_5.getObjSel();
            EClass _type_20 = _objSel_35.getType();
            String _name_22 = _type_20.getName();
            className = _name_22;
          }
          ObjectEmitter _objSel_36 = selection_5.getObjSel();
          if ((_objSel_36 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_37 = selection_5.getObjSel();
            ObSelectionStrategy _object_21 = ((SelectObjectMutator) _objSel_37).getObject();
            EClass _type_21 = _object_21.getType();
            String _name_23 = _type_21.getName();
            className = _name_23;
          }
          ObjectEmitter _objSel_38 = selection_5.getObjSel();
          if ((_objSel_38 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_39 = selection_5.getObjSel();
            String _selectSampleMutatorHelperName_3 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_39));
            className = _selectSampleMutatorHelperName_3;
          }
          ObjectEmitter _objSel_40 = selection_5.getObjSel();
          if ((_objSel_40 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_41 = selection_5.getObjSel();
            EClass _type_22 = _objSel_41.getType();
            String _name_24 = _type_22.getName();
            className = _name_24;
          }
          ObjectEmitter _objSel_42 = selection_5.getObjSel();
          if ((_objSel_42 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_43 = selection_5.getObjSel();
            EClass _type_23 = _objSel_43.getType();
            String _name_25 = _type_23.getName();
            className = _name_25;
          }
        }
        String _metamodel_1 = definition.getMetamodel();
        List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, className);
        scope.addAll(_eReferences_1);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObSelectionStrategy.refType can contain any EReference defined by the
   * SelectedObject.eContainer whose type is SelectSampleMutator.type.
   */
  public IScope scope_ObSelectionStrategy_refType(final SelectSampleMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof ObSelectionStrategy)) {
        String className = null;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          EClass _type = _object_2.getType();
          String _name = _type.getName();
          className = _name;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          EClass _type_1 = _object_4.getType();
          String _name_1 = _type_1.getName();
          className = _name_1;
        }
        ObSelectionStrategy _object_5 = com.getObject();
        if ((_object_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_6 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_6);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type_2 = _objSel_1.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_3 = _object_7.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_4 = _objSel_7.getType();
            String _name_4 = _type_4.getName();
            className = _name_4;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_5 = _objSel_9.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
        }
        ObSelectionStrategy _object_8 = com.getObject();
        if ((_object_8 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_9 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_9);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_10.getType();
            String _name_7 = _type_7.getName();
            className = _name_7;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_8 = _type_8.getName();
            className = _name_8;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_ModifySourceReferenceMutator_refType(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      final ObSelectionStrategy source = com.getSource();
      boolean _notEquals = (!Objects.equal(source, null));
      if (_notEquals) {
        if ((source instanceof RandomTypeSelection)) {
          String _metamodel = definition.getMetamodel();
          EClass _type = ((RandomTypeSelection) source).getType();
          String _name = _type.getName();
          List<EReference> _eReferences = this.getEReferences(_metamodel, _name);
          scope.addAll(_eReferences);
        }
        if ((source instanceof SpecificObjectSelection)) {
          ObjectEmitter _objSel = ((SpecificObjectSelection) source).getObjSel();
          final ObSelectionStrategy selected = ((ObSelectionStrategy) _objSel);
          if ((selected instanceof CreateObjectMutator)) {
            String _metamodel_1 = definition.getMetamodel();
            EClass _type_1 = ((ObjectEmitter)selected).getType();
            String _name_1 = _type_1.getName();
            List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _name_1);
            scope.addAll(_eReferences_1);
          }
          if ((selected instanceof SelectObjectMutator)) {
            String _metamodel_2 = definition.getMetamodel();
            ObSelectionStrategy _object = ((SelectObjectMutator)selected).getObject();
            EClass _type_2 = _object.getType();
            String _name_2 = _type_2.getName();
            List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, _name_2);
            scope.addAll(_eReferences_2);
          }
          if ((selected instanceof SelectSampleMutator)) {
            String _metamodel_3 = definition.getMetamodel();
            ObSelectionStrategy _object_1 = ((SelectSampleMutator)selected).getObject();
            EClass _type_3 = _object_1.getType();
            String _name_3 = _type_3.getName();
            List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, _name_3);
            scope.addAll(_eReferences_3);
          }
          if ((selected instanceof CloneObjectMutator)) {
            String _metamodel_4 = definition.getMetamodel();
            EClass _type_4 = ((ObjectEmitter)selected).getType();
            String _name_4 = _type_4.getName();
            List<EReference> _eReferences_4 = this.getEReferences(_metamodel_4, _name_4);
            scope.addAll(_eReferences_4);
          }
          if ((selected instanceof RetypeObjectMutator)) {
            String _metamodel_5 = definition.getMetamodel();
            EClass _type_5 = ((ObjectEmitter)selected).getType();
            String _name_5 = _type_5.getName();
            List<EReference> _eReferences_5 = this.getEReferences(_metamodel_5, _name_5);
            scope.addAll(_eReferences_5);
          }
        }
        if ((source instanceof SpecificClosureSelection)) {
          String _metamodel_6 = definition.getMetamodel();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) source).getObjSel();
          EClass _type_6 = _objSel_1.getType();
          String _name_6 = _type_6.getName();
          List<EReference> _eReferences_6 = this.getEReferences(_metamodel_6, _name_6);
          scope.addAll(_eReferences_6);
        }
      } else {
        String _metamodel_7 = definition.getMetamodel();
        List<EReference> _eReferences_7 = this.getEReferences(_metamodel_7);
        scope.addAll(_eReferences_7);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyTargetReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_ModifyTargetReferenceMutator_refType(final ModifyTargetReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      final ObSelectionStrategy source = com.getSource();
      boolean _notEquals = (!Objects.equal(source, null));
      if (_notEquals) {
        if ((source instanceof RandomTypeSelection)) {
          String _metamodel = definition.getMetamodel();
          EClass _type = ((RandomTypeSelection) source).getType();
          String _name = _type.getName();
          List<EReference> _eReferences = this.getEReferences(_metamodel, _name);
          scope.addAll(_eReferences);
        }
        if ((source instanceof SpecificObjectSelection)) {
          String _metamodel_1 = definition.getMetamodel();
          ObjectEmitter _objSel = ((SpecificObjectSelection) source).getObjSel();
          EClass _type_1 = _objSel.getType();
          String _name_1 = _type_1.getName();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _name_1);
          scope.addAll(_eReferences_1);
        }
        if ((source instanceof SpecificClosureSelection)) {
          String _metamodel_2 = definition.getMetamodel();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) source).getObjSel();
          EClass _type_2 = _objSel_1.getType();
          String _name_2 = _type_2.getName();
          List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, _name_2);
          scope.addAll(_eReferences_2);
        }
      } else {
        String _metamodel_3 = definition.getMetamodel();
        List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3);
        scope.addAll(_eReferences_3);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateReferenceMutator.refType can contain any EReference in the metamodel.
   */
  public IScope scope_CreateReferenceMutator_refType(final CreateReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EReference> scope = new ArrayList<EReference>();
      final ObSelectionStrategy source = com.getSource();
      boolean _notEquals = (!Objects.equal(source, null));
      if (_notEquals) {
        if ((source instanceof RandomTypeSelection)) {
          String _metamodel = definition.getMetamodel();
          EClass _type = ((RandomTypeSelection) source).getType();
          String _name = _type.getName();
          List<EReference> _eReferences = this.getEReferences(_metamodel, _name);
          scope.addAll(_eReferences);
        }
        if ((source instanceof SpecificObjectSelection)) {
          String _metamodel_1 = definition.getMetamodel();
          ObjectEmitter _objSel = ((SpecificObjectSelection) source).getObjSel();
          EClass _type_1 = _objSel.getType();
          String _name_1 = _type_1.getName();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _name_1);
          scope.addAll(_eReferences_1);
        }
        if ((source instanceof SpecificClosureSelection)) {
          String _metamodel_2 = definition.getMetamodel();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) source).getObjSel();
          EClass _type_2 = _objSel_1.getType();
          String _name_2 = _type_2.getName();
          List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, _name_2);
          scope.addAll(_eReferences_2);
        }
      } else {
        String _metamodel_3 = definition.getMetamodel();
        List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3);
        scope.addAll(_eReferences_3);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.from and ModifySourceReferenceMutator.newSource, when a specific
   * object is used as from/to, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      String _metamodel = definition.getMetamodel();
      EReference _refType = com.getRefType();
      String _name = _refType.getName();
      final List<EClass> containers = this.getESources(_metamodel, _name);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name_1 = cl.getName();
        scontainers.add(_name_1);
      }
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_2 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_2, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type = mutator.getType();
          String _name_3 = _type.getName();
          boolean _contains = scontainers.contains(_name_3);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.from and ModifySourceReferenceMutator.newSource, when a specific
   * object is used as from/to, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificClosureSelection_objSel(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      String _metamodel = definition.getMetamodel();
      EReference _refType = com.getRefType();
      String _name = _refType.getName();
      final List<EClass> containers = this.getESources(_metamodel, _name);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name_1 = cl.getName();
        scontainers.add(_name_1);
      }
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_2 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_2, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type = mutator.getType();
          String _name_3 = _type.getName();
          boolean _contains = scontainers.contains(_name_3);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifySourceReferenceMutator.from and ModifySourceReferenceMutator.to, when a random
   * type is used as from/to, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final ModifySourceReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EReference _refType = com.getRefType();
      String _name = _refType.getName();
      List<EClass> _eSources = this.getESources(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eSources);
    }
    return _xblockexpression;
  }
  
  /**
   * Helper to get all the EClasses contained in the processed models.
   */
  private List<EClass> HelperRandomTypeSelectionModelEClasses(final Definition definition, final Program program) {
    final ArrayList<EClass> scope = new ArrayList<EClass>();
    Source _source = program.getSource();
    String _path = _source.getPath();
    boolean _endsWith = _path.endsWith("/");
    boolean _not = (!_endsWith);
    if (_not) {
      String _metamodel = definition.getMetamodel();
      Source _source_1 = program.getSource();
      String _path_1 = _source_1.getPath();
      List<EClass> _modelEClasses = this.getModelEClasses(_metamodel, _path_1);
      scope.addAll(_modelEClasses);
    }
    Source _source_2 = program.getSource();
    String _path_2 = _source_2.getPath();
    boolean _endsWith_1 = _path_2.endsWith("/");
    if (_endsWith_1) {
      String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
      String _plus = (_workspaceAbsolutePath + "/");
      String _project = WodelContext.getProject();
      String _plus_1 = (_plus + _project);
      String _plus_2 = (_plus_1 + "/");
      Source _source_3 = program.getSource();
      String _path_3 = _source_3.getPath();
      String _plus_3 = (_plus_2 + _path_3);
      File _file = new File(_plus_3);
      final File[] files = _file.listFiles();
      for (final File file : files) {
        boolean _isFile = file.isFile();
        boolean _equals = (_isFile == true);
        if (_equals) {
          String _path_4 = file.getPath();
          boolean _endsWith_2 = _path_4.endsWith(".model");
          boolean _equals_1 = (_endsWith_2 == true);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            String _path_5 = file.getPath();
            List<EClass> _modelEClasses_1 = this.getModelEClasses(_metamodel_1, _path_5);
            scope.addAll(_modelEClasses_1);
          }
        }
      }
      return scope;
    }
    return null;
  }
  
  /**
   * RemoveObjectMutator.object, when a random type is used.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          final List<EClass> scope = this.HelperRandomTypeSelectionModelEClasses(definition, program);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a specific selection strategy is used.
   */
  public IScope scope_SpecificObjectSelection_objSel(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        _xifexpression = Scopes.scopeFor(commands);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a specific closure selection strategy is used.
   */
  public IScope scope_SpecificClosureSelection_objSel(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        _xifexpression = Scopes.scopeFor(commands);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveObjectMutator.object, when a complete type selection is used.
   */
  public IScope scope_CompleteTypeSelection_type(final RemoveObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          final List<EClass> scope = this.HelperRandomTypeSelectionModelEClasses(definition, program);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ObjectEmitter.type, when a specific selection type
   * is used, can be of any EClass defined in the meta-model.
   */
  public IScope scope_ObjectEmitter_type(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ObjectEmitter.type, when a specific closure selection type
   * is used, can be of any EClass defined in the meta-model.
   */
  public IScope scope_ObjectEmitter_type(final SpecificClosureSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.object, when a specific
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
            String _plus = (_workspaceAbsolutePath + "/");
            String _project = WodelContext.getProject();
            String _plus_1 = (_plus + _project);
            String _plus_2 = (_plus_1 + "/");
            Source _source_1 = ((Program)definition).getSource();
            String _path_1 = _source_1.getPath();
            final String model = (_plus_2 + _path_1);
            String _metamodel = ((Program)definition).getMetamodel();
            final List<EClass> classes = this.getModelEClasses(_metamodel, model);
            final List<String> sclasses = new ArrayList<String>();
            for (final EClassifier cl : classes) {
              String _name = cl.getName();
              sclasses.add(_name);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_1 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_1, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_2 = _type.getName();
                  boolean _contains = sclasses.contains(_name_2);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_2 = _source_2.getPath();
          boolean _endsWith_1 = _path_2.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            String _workspaceAbsolutePath_1 = ModelManager.getWorkspaceAbsolutePath();
            String _plus_3 = (_workspaceAbsolutePath_1 + "/");
            String _project_1 = WodelContext.getProject();
            String _plus_4 = (_plus_3 + _project_1);
            String _plus_5 = (_plus_4 + "/");
            Source _source_3 = ((Program)definition).getSource();
            String _path_3 = _source_3.getPath();
            String _plus_6 = (_plus_5 + _path_3);
            File _file = new File(_plus_6);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_4 = file.getPath();
                boolean _endsWith_2 = _path_4.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_5 = file.getPath();
                  models.add(_path_5);
                }
              }
            }
            final List<EClass> classes_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              List<EClass> _modelEClasses = this.getModelEClasses(_metamodel_1, model_1);
              classes_1.addAll(_modelEClasses);
            }
            final List<String> sclasses_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : classes_1) {
              String _name_1 = cl_1.getName();
              sclasses_1.add(_name_1);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = sclasses_1.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.object, when a specific closure
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificClosureSelection_objSel(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
            String _plus = (_workspaceAbsolutePath + "/");
            String _project = WodelContext.getProject();
            String _plus_1 = (_plus + _project);
            String _plus_2 = (_plus_1 + "/");
            Source _source_1 = ((Program)definition).getSource();
            String _path_1 = _source_1.getPath();
            final String model = (_plus_2 + _path_1);
            String _metamodel = ((Program)definition).getMetamodel();
            final List<EClass> classes = this.getModelEClasses(_metamodel, model);
            final List<String> sclasses = new ArrayList<String>();
            for (final EClassifier cl : classes) {
              String _name = cl.getName();
              sclasses.add(_name);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_1 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_1, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_2 = _type.getName();
                  boolean _contains = sclasses.contains(_name_2);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_2 = _source_2.getPath();
          boolean _endsWith_1 = _path_2.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            String _workspaceAbsolutePath_1 = ModelManager.getWorkspaceAbsolutePath();
            String _plus_3 = (_workspaceAbsolutePath_1 + "/");
            String _project_1 = WodelContext.getProject();
            String _plus_4 = (_plus_3 + _project_1);
            String _plus_5 = (_plus_4 + "/");
            Source _source_3 = ((Program)definition).getSource();
            String _path_3 = _source_3.getPath();
            String _plus_6 = (_plus_5 + _path_3);
            File _file = new File(_plus_6);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_4 = file.getPath();
                boolean _endsWith_2 = _path_4.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_5 = file.getPath();
                  models.add(_path_5);
                }
              }
            }
            final List<EClass> classes_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              List<EClass> _modelEClasses = this.getModelEClasses(_metamodel_1, model_1);
              classes_1.addAll(_modelEClasses);
            }
            final List<String> sclasses_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : classes_1) {
              String _name_1 = cl_1.getName();
              sclasses_1.add(_name_1);
            }
            {
              final List<Mutator> objects = new ArrayList<Mutator>();
              for (final Mutator mutator : commands) {
                boolean _and = false;
                boolean _and_1 = false;
                boolean _and_2 = false;
                String _name_2 = mutator.getName();
                boolean _notEquals = (!Objects.equal(_name_2, null));
                if (!_notEquals) {
                  _and_2 = false;
                } else {
                  int _indexOf = commands.indexOf(mutator);
                  int _indexOf_1 = commands.indexOf(com);
                  boolean _lessThan = (_indexOf < _indexOf_1);
                  _and_2 = _lessThan;
                }
                if (!_and_2) {
                  _and_1 = false;
                } else {
                  _and_1 = ((((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof SelectSampleMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
                }
                if (!_and_1) {
                  _and = false;
                } else {
                  EClass _type = mutator.getType();
                  String _name_3 = _type.getName();
                  boolean _contains = sclasses_1.contains(_name_3);
                  _and = _contains;
                }
                if (_and) {
                  objects.add(mutator);
                }
              }
              scope.addAll(objects);
            }
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.type, when a random type is used.
   */
  public IScope scope_RandomTypeSelection_type(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveRandomReferenceMutator.refType.
   */
  public IScope scope_RemoveRandomReferenceMutator_refType(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel);
        _xifexpression = Scopes.scopeFor(_eReferences);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveRandomReferenceMutator.type.
   */
  public IScope scope_RemoveRandomReferenceMutator_type(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * Helper to get all the EClasses contained in the processed models that contain a refTypeName reference.
   */
  private ArrayList<EClass> HelperRandomTypeSelectionModelESources(final Definition definition, final Program program, final String refTypeName) {
    final ArrayList<EClass> scope = new ArrayList<EClass>();
    Source _source = program.getSource();
    String _path = _source.getPath();
    boolean _endsWith = _path.endsWith("/");
    boolean _not = (!_endsWith);
    if (_not) {
      String _metamodel = definition.getMetamodel();
      Source _source_1 = program.getSource();
      String _path_1 = _source_1.getPath();
      List<EClass> _modelEClasses = this.getModelEClasses(_metamodel, _path_1);
      scope.addAll(_modelEClasses);
    }
    Source _source_2 = program.getSource();
    String _path_2 = _source_2.getPath();
    boolean _endsWith_1 = _path_2.endsWith("/");
    if (_endsWith_1) {
      String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
      String _plus = (_workspaceAbsolutePath + "/");
      String _project = WodelContext.getProject();
      String _plus_1 = (_plus + _project);
      String _plus_2 = (_plus_1 + "/");
      Source _source_3 = program.getSource();
      String _path_3 = _source_3.getPath();
      String _plus_3 = (_plus_2 + _path_3);
      File _file = new File(_plus_3);
      final File[] files = _file.listFiles();
      for (final File file : files) {
        boolean _isFile = file.isFile();
        boolean _equals = (_isFile == true);
        if (_equals) {
          String _path_4 = file.getPath();
          boolean _endsWith_2 = _path_4.endsWith(".model");
          boolean _equals_1 = (_endsWith_2 == true);
          if (_equals_1) {
            String _metamodel_1 = definition.getMetamodel();
            String _path_5 = file.getPath();
            List<EClass> _modelESources = this.getModelESources(_metamodel_1, _path_5, refTypeName);
            scope.addAll(_modelESources);
          }
        }
      }
      return scope;
    }
    return null;
  }
  
  /**
   * RemoveRandomReferenceMutator.container, when a random
   * type is used, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveRandomReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          EReference _refType = com.getRefType();
          String _name = _refType.getName();
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelESources(definition, program, _name);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveCompleteReferenceMutator.refType.
   */
  public IScope scope_RemoveCompleteReferenceMutator_refType(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<EReference> scope = new ArrayList<EReference>();
          String _metamodel = ((Program)definition).getMetamodel();
          List<EReference> _eReferences = this.getEReferences(_metamodel);
          scope.addAll(_eReferences);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveCompleteReferenceMutator.type.
   */
  public IScope scope_RemoveCompleteReferenceMutator_type(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveCompleteReferenceMutator.container, when a random
   * type is used, can contain any EClass which defines the modified reference.
   */
  public IScope scope_RandomTypeSelection_type(final RemoveCompleteReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final Program program = ((Program) definition);
          EReference _refType = com.getRefType();
          String _name = _refType.getName();
          final ArrayList<EClass> scope = this.HelperRandomTypeSelectionModelESources(definition, program, _name);
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveSpecificReferenceMutatorMutator.refType.
   */
  public IScope scope_RemoveSpecificReferenceMutator_refType(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel);
        _xifexpression = Scopes.scopeFor(_eReferences);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveSpecificReferenceMutator.container.
   */
  public IScope scope_RemoveSpecificReferenceMutator_container(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        String _metamodel = ((Program)definition).getMetamodel();
        List<EClass> _eClasses = this.getEClasses(_metamodel);
        _xifexpression = Scopes.scopeFor(_eClasses);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveSpecificReferenceMutator.container, when a specific
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificObjectSelection_objSel(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
            String _plus = (_workspaceAbsolutePath + "/");
            String _project = WodelContext.getProject();
            String _plus_1 = (_plus + _project);
            String _plus_2 = (_plus_1 + "/");
            Source _source_1 = ((Program)definition).getSource();
            String _path_1 = _source_1.getPath();
            final String model = (_plus_2 + _path_1);
            String _metamodel = ((Program)definition).getMetamodel();
            EReference _refType = com.getRefType();
            String _name = _refType.getName();
            final List<EClass> containers = this.getModelESources(_metamodel, model, _name);
            final List<String> scontainers = new ArrayList<String>();
            for (final EClassifier cl : containers) {
              String _name_1 = cl.getName();
              scontainers.add(_name_1);
            }
            final List<Mutator> objects = new ArrayList<Mutator>();
            for (final Mutator mutator : commands) {
              boolean _and = false;
              boolean _and_1 = false;
              boolean _and_2 = false;
              String _name_2 = mutator.getName();
              boolean _notEquals = (!Objects.equal(_name_2, null));
              if (!_notEquals) {
                _and_2 = false;
              } else {
                int _indexOf = commands.indexOf(mutator);
                int _indexOf_1 = commands.indexOf(com);
                boolean _lessThan = (_indexOf < _indexOf_1);
                _and_2 = _lessThan;
              }
              if (!_and_2) {
                _and_1 = false;
              } else {
                _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
              }
              if (!_and_1) {
                _and = false;
              } else {
                EClass _type = mutator.getType();
                String _name_3 = _type.getName();
                boolean _contains = scontainers.contains(_name_3);
                _and = _contains;
              }
              if (_and) {
                objects.add(mutator);
              }
            }
            scope.addAll(objects);
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_2 = _source_2.getPath();
          boolean _endsWith_1 = _path_2.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            String _workspaceAbsolutePath_1 = ModelManager.getWorkspaceAbsolutePath();
            String _plus_3 = (_workspaceAbsolutePath_1 + "/");
            String _project_1 = WodelContext.getProject();
            String _plus_4 = (_plus_3 + _project_1);
            String _plus_5 = (_plus_4 + "/");
            Source _source_3 = ((Program)definition).getSource();
            String _path_3 = _source_3.getPath();
            String _plus_6 = (_plus_5 + _path_3);
            File _file = new File(_plus_6);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_4 = file.getPath();
                boolean _endsWith_2 = _path_4.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_5 = file.getPath();
                  models.add(_path_5);
                }
              }
            }
            final List<EClass> containers_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              EReference _refType_1 = com.getRefType();
              String _name_4 = _refType_1.getName();
              List<EClass> _modelESources = this.getModelESources(_metamodel_1, model_1, _name_4);
              containers_1.addAll(_modelESources);
            }
            final List<String> scontainers_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : containers_1) {
              String _name_5 = cl_1.getName();
              scontainers_1.add(_name_5);
            }
            final List<Mutator> objects_1 = new ArrayList<Mutator>();
            for (final Mutator mutator_1 : commands) {
              boolean _and_3 = false;
              boolean _and_4 = false;
              boolean _and_5 = false;
              String _name_6 = mutator_1.getName();
              boolean _notEquals_1 = (!Objects.equal(_name_6, null));
              if (!_notEquals_1) {
                _and_5 = false;
              } else {
                int _indexOf_2 = commands.indexOf(mutator_1);
                int _indexOf_3 = commands.indexOf(com);
                boolean _lessThan_1 = (_indexOf_2 < _indexOf_3);
                _and_5 = _lessThan_1;
              }
              if (!_and_5) {
                _and_4 = false;
              } else {
                _and_4 = (((((mutator_1 instanceof CreateObjectMutator) || (mutator_1 instanceof SelectObjectMutator)) || (mutator_1 instanceof ModifyInformationMutator)) || (mutator_1 instanceof CloneObjectMutator)) || (mutator_1 instanceof RetypeObjectMutator));
              }
              if (!_and_4) {
                _and_3 = false;
              } else {
                EClass _type_1 = mutator_1.getType();
                String _name_7 = _type_1.getName();
                boolean _contains_1 = scontainers_1.contains(_name_7);
                _and_3 = _contains_1;
              }
              if (_and_3) {
                objects_1.add(mutator_1);
              }
            }
            scope.addAll(objects_1);
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * RemoveSpecificReferenceMutator.container, when a specific closure
   * object is used, can contain any previous object defining the modified reference.
   */
  public IScope scope_SpecificClosureSelection_objSel(final RemoveSpecificReferenceMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      IScope _xifexpression = null;
      if ((definition instanceof Program)) {
        IScope _xblockexpression_1 = null;
        {
          final ArrayList<Mutator> scope = new ArrayList<Mutator>();
          Source _source = ((Program)definition).getSource();
          String _path = _source.getPath();
          boolean _endsWith = _path.endsWith("/");
          boolean _not = (!_endsWith);
          if (_not) {
            String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
            String _plus = (_workspaceAbsolutePath + "/");
            String _project = WodelContext.getProject();
            String _plus_1 = (_plus + _project);
            String _plus_2 = (_plus_1 + "/");
            Source _source_1 = ((Program)definition).getSource();
            String _path_1 = _source_1.getPath();
            final String model = (_plus_2 + _path_1);
            String _metamodel = ((Program)definition).getMetamodel();
            EReference _refType = com.getRefType();
            String _name = _refType.getName();
            final List<EClass> containers = this.getModelESources(_metamodel, model, _name);
            final List<String> scontainers = new ArrayList<String>();
            for (final EClassifier cl : containers) {
              String _name_1 = cl.getName();
              scontainers.add(_name_1);
            }
            final List<Mutator> objects = new ArrayList<Mutator>();
            for (final Mutator mutator : commands) {
              boolean _and = false;
              boolean _and_1 = false;
              boolean _and_2 = false;
              String _name_2 = mutator.getName();
              boolean _notEquals = (!Objects.equal(_name_2, null));
              if (!_notEquals) {
                _and_2 = false;
              } else {
                int _indexOf = commands.indexOf(mutator);
                int _indexOf_1 = commands.indexOf(com);
                boolean _lessThan = (_indexOf < _indexOf_1);
                _and_2 = _lessThan;
              }
              if (!_and_2) {
                _and_1 = false;
              } else {
                _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
              }
              if (!_and_1) {
                _and = false;
              } else {
                EClass _type = mutator.getType();
                String _name_3 = _type.getName();
                boolean _contains = scontainers.contains(_name_3);
                _and = _contains;
              }
              if (_and) {
                objects.add(mutator);
              }
            }
            scope.addAll(objects);
          }
          Source _source_2 = ((Program)definition).getSource();
          String _path_2 = _source_2.getPath();
          boolean _endsWith_1 = _path_2.endsWith("/");
          if (_endsWith_1) {
            final ArrayList<String> models = new ArrayList<String>();
            String _workspaceAbsolutePath_1 = ModelManager.getWorkspaceAbsolutePath();
            String _plus_3 = (_workspaceAbsolutePath_1 + "/");
            String _project_1 = WodelContext.getProject();
            String _plus_4 = (_plus_3 + _project_1);
            String _plus_5 = (_plus_4 + "/");
            Source _source_3 = ((Program)definition).getSource();
            String _path_3 = _source_3.getPath();
            String _plus_6 = (_plus_5 + _path_3);
            File _file = new File(_plus_6);
            final File[] files = _file.listFiles();
            for (final File file : files) {
              boolean _isFile = file.isFile();
              boolean _equals = (_isFile == true);
              if (_equals) {
                String _path_4 = file.getPath();
                boolean _endsWith_2 = _path_4.endsWith(".model");
                boolean _equals_1 = (_endsWith_2 == true);
                if (_equals_1) {
                  String _path_5 = file.getPath();
                  models.add(_path_5);
                }
              }
            }
            final List<EClass> containers_1 = new ArrayList<EClass>();
            for (final String model_1 : models) {
              String _metamodel_1 = ((Program)definition).getMetamodel();
              EReference _refType_1 = com.getRefType();
              String _name_4 = _refType_1.getName();
              List<EClass> _modelESources = this.getModelESources(_metamodel_1, model_1, _name_4);
              containers_1.addAll(_modelESources);
            }
            final List<String> scontainers_1 = new ArrayList<String>();
            for (final EClassifier cl_1 : containers_1) {
              String _name_5 = cl_1.getName();
              scontainers_1.add(_name_5);
            }
            final List<Mutator> objects_1 = new ArrayList<Mutator>();
            for (final Mutator mutator_1 : commands) {
              boolean _and_3 = false;
              boolean _and_4 = false;
              boolean _and_5 = false;
              String _name_6 = mutator_1.getName();
              boolean _notEquals_1 = (!Objects.equal(_name_6, null));
              if (!_notEquals_1) {
                _and_5 = false;
              } else {
                int _indexOf_2 = commands.indexOf(mutator_1);
                int _indexOf_3 = commands.indexOf(com);
                boolean _lessThan_1 = (_indexOf_2 < _indexOf_3);
                _and_5 = _lessThan_1;
              }
              if (!_and_5) {
                _and_4 = false;
              } else {
                _and_4 = (((((mutator_1 instanceof CreateObjectMutator) || (mutator_1 instanceof SelectObjectMutator)) || (mutator_1 instanceof ModifyInformationMutator)) || (mutator_1 instanceof CloneObjectMutator)) || (mutator_1 instanceof RetypeObjectMutator));
              }
              if (!_and_4) {
                _and_3 = false;
              } else {
                EClass _type_1 = mutator_1.getType();
                String _name_7 = _type_1.getName();
                boolean _contains_1 = scontainers_1.contains(_name_7);
                _and_3 = _contains_1;
              }
              if (_and_3) {
                objects_1.add(mutator_1);
              }
            }
            scope.addAll(objects_1);
          }
          _xblockexpression_1 = Scopes.scopeFor(scope);
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.attributes must contain attributes of the CreateObjetMutator.type type.
   */
  public IScope scope_AttributeSet_attribute(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eAttributes);
    }
    return _xblockexpression;
  }
  
  /**
   * CreateObjectMutator.references must contain references of the CreateObjetMutator.type type.
   */
  public IScope scope_ReferenceSet_reference(final CreateObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      String _name = _type.getName();
      List<EReference> _eReferences = this.getEReferences(_metamodel, _name);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.attributes must contain attributes of the ModifyInformationMutator.object type.
   */
  public IScope scope_AttributeSet_attribute(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EAttribute> scope = new ArrayList<EAttribute>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
          scope.addAll(_eAttributes);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) _object_3).getObjSel();
          final String name_1 = _objSel_1.getName();
          int _indexOf_1 = commands.indexOf(com);
          Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
          boolean _notEquals_1 = (!Objects.equal(command_1, null));
          if (_notEquals_1) {
            String _metamodel_1 = null;
            if (definition!=null) {
              _metamodel_1=definition.getMetamodel();
            }
            String _type_1 = this.getType(command_1);
            List<EAttribute> _eAttributes_1 = this.getEAttributes(_metamodel_1, _type_1);
            scope.addAll(_eAttributes_1);
          }
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((CompleteTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_2 = definition.getMetamodel();
            List<EAttribute> _eAttributes_2 = this.getEAttributes(_metamodel_2, name_2);
            scope.addAll(_eAttributes_2);
          } else {
            ObSelectionStrategy _object_6 = com.getObject();
            if ((_object_6 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _object_7 = com.getObject();
              EClass _type_3 = ((RandomTypeSelection) _object_7).getType();
              final String name_3 = _type_3.getName();
              String _metamodel_3 = definition.getMetamodel();
              List<EAttribute> _eAttributes_3 = this.getEAttributes(_metamodel_3, name_3);
              scope.addAll(_eAttributes_3);
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.references must contain references of the ModifyInformationMutator.type type.
   */
  public IScope scope_ReferenceSet_reference(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) _object_3).getObjSel();
          final String name_1 = _objSel_1.getName();
          int _indexOf_1 = commands.indexOf(com);
          Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
          boolean _notEquals_1 = (!Objects.equal(command_1, null));
          if (_notEquals_1) {
            String _metamodel_1 = null;
            if (definition!=null) {
              _metamodel_1=definition.getMetamodel();
            }
            String _type_1 = this.getType(command_1);
            List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_1);
            scope.addAll(_eReferences_1);
          }
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((CompleteTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_2 = definition.getMetamodel();
            List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name_2);
            scope.addAll(_eReferences_2);
          } else {
            ObSelectionStrategy _object_6 = com.getObject();
            if ((_object_6 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _object_7 = com.getObject();
              EClass _type_3 = ((RandomTypeSelection) _object_7).getType();
              final String name_3 = _type_3.getName();
              String _metamodel_3 = definition.getMetamodel();
              List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name_3);
              scope.addAll(_eReferences_3);
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CloneObjectMutator.attributes must contain attributes of the CloneObjectMutator.object type.
   */
  public IScope scope_AttributeSet_attribute(final CloneObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EAttribute> scope = new ArrayList<EAttribute>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
          scope.addAll(_eAttributes);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _object_3).getObjSel();
          final String name_1 = _objSel_1.getName();
          int _indexOf_1 = commands.indexOf(com);
          Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
          boolean _notEquals_1 = (!Objects.equal(command_1, null));
          if (_notEquals_1) {
            String _metamodel_1 = null;
            if (definition!=null) {
              _metamodel_1=definition.getMetamodel();
            }
            String _type_1 = this.getType(command_1);
            List<EAttribute> _eAttributes_1 = this.getEAttributes(_metamodel_1, _type_1);
            scope.addAll(_eAttributes_1);
          }
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((CompleteTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_2 = definition.getMetamodel();
            List<EAttribute> _eAttributes_2 = this.getEAttributes(_metamodel_2, name_2);
            scope.addAll(_eAttributes_2);
          } else {
            ObSelectionStrategy _object_6 = com.getObject();
            if ((_object_6 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _object_7 = com.getObject();
              EClass _type_3 = ((RandomTypeSelection) _object_7).getType();
              final String name_3 = _type_3.getName();
              String _metamodel_3 = definition.getMetamodel();
              List<EAttribute> _eAttributes_3 = this.getEAttributes(_metamodel_3, name_3);
              scope.addAll(_eAttributes_3);
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * CloneObjectMutator.references must contain references of the CloneObjectMutator.type type.
   */
  public IScope scope_ReferenceSet_reference(final CloneObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _object_3).getObjSel();
          final String name_1 = _objSel_1.getName();
          int _indexOf_1 = commands.indexOf(com);
          Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
          boolean _notEquals_1 = (!Objects.equal(command_1, null));
          if (_notEquals_1) {
            String _metamodel_1 = null;
            if (definition!=null) {
              _metamodel_1=definition.getMetamodel();
            }
            String _type_1 = this.getType(command_1);
            List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_1);
            scope.addAll(_eReferences_1);
          }
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((CompleteTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_2 = definition.getMetamodel();
            List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name_2);
            scope.addAll(_eReferences_2);
          } else {
            ObSelectionStrategy _object_6 = com.getObject();
            if ((_object_6 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _object_7 = com.getObject();
              EClass _type_3 = ((RandomTypeSelection) _object_7).getType();
              final String name_3 = _type_3.getName();
              String _metamodel_3 = definition.getMetamodel();
              List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name_3);
              scope.addAll(_eReferences_3);
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * RetypeObjectMutator.attributes must contain attributes of the CloneObjectMutator.object type.
   */
  public IScope scope_AttributeSet_attribute(final RetypeObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = null;
      if (definition!=null) {
        _metamodel=definition.getMetamodel();
      }
      String _type = this.getType(com);
      List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eAttributes);
    }
    return _xblockexpression;
  }
  
  /**
   * RetypeObjectMutator.references must contain references of the CloneObjectMutator.type type.
   */
  public IScope scope_ReferenceSet_reference(final RetypeObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      String _metamodel = null;
      if (definition!=null) {
        _metamodel=definition.getMetamodel();
      }
      String _type = this.getType(com);
      List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
      _xblockexpression = Scopes.scopeFor(_eReferences);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceInit.refType must contain references of the type of ReferenceInit.object.
   */
  public IScope scope_ReferenceSet_refType(final ReferenceInit com, final EReference container) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        EClass _type = null;
        if (_object!=null) {
          _type=_object.getType();
        }
        String _name = null;
        if (_type!=null) {
          _name=_type.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_2)!=null) {
            _objSel=((SpecificObjectSelection) _object_2).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          ObjectEmitter _objSel_1 = null;
          if (((SpecificClosureSelection) _object_4)!=null) {
            _objSel_1=((SpecificClosureSelection) _object_4).getObjSel();
          }
          String _name_2 = null;
          if (_objSel_1!=null) {
            _name_2=_objSel_1.getName();
          }
          objectName = _name_2;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type_1 = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type_1);
          return Scopes.scopeFor(_eReferences);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceSwap.reference must contain references of the type of ReferenceSwap.object,
   * or of the type of the mutator if no object is specified.
   */
  public IScope scope_ReferenceSet_reference(final ReferenceSwap com, final EReference container) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        boolean _equals = Objects.equal(_object, null);
        if (_equals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(currentMutator);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          return Scopes.scopeFor(_eReferences);
        }
        ObSelectionStrategy _object_1 = com.getObject();
        EClass _type_1 = null;
        if (_object_1!=null) {
          _type_1=_object_1.getType();
        }
        String _name = null;
        if (_type_1!=null) {
          _name=_type_1.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_3)!=null) {
            _objSel=((SpecificObjectSelection) _object_3).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        ObSelectionStrategy _object_4 = com.getObject();
        if ((_object_4 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_5 = com.getObject();
          ObjectEmitter _objSel_1 = null;
          if (((SpecificClosureSelection) _object_5)!=null) {
            _objSel_1=((SpecificClosureSelection) _object_5).getObjSel();
          }
          String _name_2 = null;
          if (_objSel_1!=null) {
            _name_2=_objSel_1.getName();
          }
          objectName = _name_2;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          String _type_2 = this.getType(command);
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_2);
          return Scopes.scopeFor(_eReferences_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceAtt.attribute must contain attributes of the type of ReferenceAtt.reference.
   */
  public IScope scope_ReferenceAtt_attribute(final ReferenceAtt com, final EReference container) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      ArrayList<EAttribute> atts = new ArrayList<EAttribute>();
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        EList<EReference> _reference = com.getReference();
        EReference _get = _reference.get(0);
        EClassifier _eType = _get.getEType();
        String className = _eType.getName();
        String _metamodel = null;
        if (definition!=null) {
          _metamodel=definition.getMetamodel();
        }
        List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
        atts.addAll(_eAttributes);
      }
      _xblockexpression = Scopes.scopeFor(atts);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceAdd.refType must contain references of the type of ReferenceAdd.object.
   */
  public IScope scope_ReferenceSet_refType(final ReferenceAdd com, final EReference container) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        EClass _type = null;
        if (_object!=null) {
          _type=_object.getType();
        }
        String _name = null;
        if (_type!=null) {
          _name=_type.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_2)!=null) {
            _objSel=((SpecificObjectSelection) _object_2).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          ObjectEmitter _objSel_1 = null;
          if (((SpecificClosureSelection) _object_4)!=null) {
            _objSel_1=((SpecificClosureSelection) _object_4).getObjSel();
          }
          String _name_2 = null;
          if (_objSel_1!=null) {
            _name_2=_objSel_1.getName();
          }
          objectName = _name_2;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type_1 = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type_1);
          return Scopes.scopeFor(_eReferences);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceRemove.refType must contain references of the type of ReferenceRemove.object.
   */
  public IScope scope_ReferenceSet_refType(final ReferenceRemove com, final EReference container) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        ObSelectionStrategy _object = com.getObject();
        EClass _type = null;
        if (_object!=null) {
          _type=_object.getType();
        }
        String _name = null;
        if (_type!=null) {
          _name=_type.getName();
        }
        String objectName = _name;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          ObjectEmitter _objSel = null;
          if (((SpecificObjectSelection) _object_2)!=null) {
            _objSel=((SpecificObjectSelection) _object_2).getObjSel();
          }
          String _name_1 = null;
          if (_objSel!=null) {
            _name_1=_objSel.getName();
          }
          objectName = _name_1;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          ObjectEmitter _objSel_1 = null;
          if (((SpecificClosureSelection) _object_4)!=null) {
            _objSel_1=((SpecificClosureSelection) _object_4).getObjSel();
          }
          String _name_2 = null;
          if (_objSel_1!=null) {
            _name_2=_objSel_1.getName();
          }
          objectName = _name_2;
        }
        int _indexOf = commands.indexOf(currentMutator);
        Mutator command = this.getCommand(objectName, commands, _indexOf);
        boolean _notEquals_1 = (!Objects.equal(command, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type_1 = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type_1);
          return Scopes.scopeFor(_eReferences);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        EReference _refType = com.getRefType();
        boolean _equals = Objects.equal(_refType, null);
        if (_equals) {
          ObjectEmitter _objSel = com.getObjSel();
          String _name = null;
          if (_objSel!=null) {
            _name=_objSel.getName();
          }
          final String objectName = _name;
          int _indexOf = commands.indexOf(currentMutator);
          Mutator command = this.getCommand(objectName, commands, _indexOf);
          boolean _notEquals_1 = (!Objects.equal(command, null));
          if (_notEquals_1) {
            String _metamodel = null;
            if (definition!=null) {
              _metamodel=definition.getMetamodel();
            }
            String _type = this.getType(command);
            List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
            return Scopes.scopeFor(_eReferences);
          }
        } else {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          EReference _refType_1 = com.getRefType();
          EClassifier _eType = _refType_1.getEType();
          String _name_1 = _eType.getName();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _name_1);
          return Scopes.scopeFor(_eReferences_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_name(final SpecificClosureSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
        final List<Mutator> commands = this.getCommands(currentMutator);
        EReference _refType = com.getRefType();
        boolean _equals = Objects.equal(_refType, null);
        if (_equals) {
          ObjectEmitter _objSel = com.getObjSel();
          String _name = null;
          if (_objSel!=null) {
            _name=_objSel.getName();
          }
          final String objectName = _name;
          int _indexOf = commands.indexOf(currentMutator);
          Mutator command = this.getCommand(objectName, commands, _indexOf);
          boolean _notEquals_1 = (!Objects.equal(command, null));
          if (_notEquals_1) {
            String _metamodel = null;
            if (definition!=null) {
              _metamodel=definition.getMetamodel();
            }
            String _type = this.getType(command);
            List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
            return Scopes.scopeFor(_eReferences);
          }
        } else {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          EReference _refType_1 = com.getRefType();
          EClassifier _eType = _refType_1.getEType();
          String _name_1 = _eType.getName();
          List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _name_1);
          return Scopes.scopeFor(_eReferences_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eAttributes);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          EClass _type = com.getType();
          String _name = null;
          if (_type!=null) {
            _name=_type.getName();
          }
          final String className = _name;
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eAttributes);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        EReference _refType = com.getRefType();
        boolean _equals = Objects.equal(_refType, null);
        if (_equals) {
          final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
          final List<Mutator> commands = this.getCommands(currentMutator);
          ObjectEmitter _objSel = com.getObjSel();
          String _name = null;
          if (_objSel!=null) {
            _name=_objSel.getName();
          }
          final String objectName = _name;
          int _indexOf = commands.indexOf(currentMutator);
          Mutator command = this.getCommand(objectName, commands, _indexOf);
          boolean _notEquals_1 = (!Objects.equal(command, null));
          if (_notEquals_1) {
            String _metamodel = null;
            if (definition!=null) {
              _metamodel=definition.getMetamodel();
            }
            String _type = this.getType(command);
            List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
            return Scopes.scopeFor(_eAttributes);
          }
        } else {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          EReference _refType_1 = com.getRefType();
          EClassifier _eType = _refType_1.getEType();
          String _name_1 = _eType.getName();
          List<EAttribute> _eAttributes_1 = this.getEAttributes(_metamodel_1, _name_1);
          return Scopes.scopeFor(_eAttributes_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * AttributeEvaluation.name must contain the attributes defined by com.type
   */
  public IScope scope_AttributeEvaluation_name(final SpecificClosureSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        EReference _refType = com.getRefType();
        boolean _equals = Objects.equal(_refType, null);
        if (_equals) {
          final Mutator currentMutator = EcoreUtil2.<Mutator>getContainerOfType(com, Mutator.class);
          final List<Mutator> commands = this.getCommands(currentMutator);
          ObjectEmitter _objSel = com.getObjSel();
          String _name = null;
          if (_objSel!=null) {
            _name=_objSel.getName();
          }
          final String objectName = _name;
          int _indexOf = commands.indexOf(currentMutator);
          Mutator command = this.getCommand(objectName, commands, _indexOf);
          boolean _notEquals_1 = (!Objects.equal(command, null));
          if (_notEquals_1) {
            String _metamodel = null;
            if (definition!=null) {
              _metamodel=definition.getMetamodel();
            }
            String _type = this.getType(command);
            List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, _type);
            return Scopes.scopeFor(_eAttributes);
          }
        } else {
          String _metamodel_1 = null;
          if (definition!=null) {
            _metamodel_1=definition.getMetamodel();
          }
          EReference _refType_1 = com.getRefType();
          EClassifier _eType = _refType_1.getEType();
          String _name_1 = _eType.getName();
          List<EAttribute> _eAttributes_1 = this.getEAttributes(_metamodel_1, _name_1);
          return Scopes.scopeFor(_eAttributes_1);
        }
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ModifyInformationMutator.refType must be of the ModifyInformationMutator.object type.
   */
  public IScope scope_ObSelectionStrategy_refType(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_1 = com.getObject();
        ObjectEmitter _objSel = ((SpecificObjectSelection) _object_1).getObjSel();
        final String name = _objSel.getName();
        int _indexOf = commands.indexOf(com);
        Mutator command = this.getCommand(name, commands, _indexOf);
        boolean _notEquals = (!Objects.equal(command, null));
        if (_notEquals) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          String _type = this.getType(command);
          List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
          scope.addAll(_eReferences);
        }
      } else {
        ObSelectionStrategy _object_2 = com.getObject();
        if ((_object_2 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_3 = com.getObject();
          ObjectEmitter _objSel_1 = ((SpecificClosureSelection) _object_3).getObjSel();
          final String name_1 = _objSel_1.getName();
          int _indexOf_1 = commands.indexOf(com);
          Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
          boolean _notEquals_1 = (!Objects.equal(command_1, null));
          if (_notEquals_1) {
            String _metamodel_1 = null;
            if (definition!=null) {
              _metamodel_1=definition.getMetamodel();
            }
            String _type_1 = this.getType(command_1);
            List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_1);
            scope.addAll(_eReferences_1);
          }
        } else {
          ObSelectionStrategy _object_4 = com.getObject();
          if ((_object_4 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_5 = com.getObject();
            EClass _type_2 = ((CompleteTypeSelection) _object_5).getType();
            final String name_2 = _type_2.getName();
            String _metamodel_2 = definition.getMetamodel();
            List<EReference> _eReferences_2 = this.getEReferences(_metamodel_2, name_2);
            scope.addAll(_eReferences_2);
          } else {
            ObSelectionStrategy _object_6 = com.getObject();
            if ((_object_6 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _object_7 = com.getObject();
              EClass _type_3 = ((RandomTypeSelection) _object_7).getType();
              final String name_3 = _type_3.getName();
              String _metamodel_3 = definition.getMetamodel();
              List<EReference> _eReferences_3 = this.getEReferences(_metamodel_3, name_3);
              scope.addAll(_eReferences_3);
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.refType must be of com.type.
   */
  public IScope scope_ReferenceEvaluation_refType(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ArrayList<EReference> scope = new ArrayList<EReference>();
      EObject mut = null;
      boolean _and = false;
      boolean _or = false;
      boolean _or_1 = false;
      EObject _eContainer = com.eContainer();
      if ((_eContainer instanceof ReferenceInit)) {
        _or_1 = true;
      } else {
        EObject _eContainer_1 = com.eContainer();
        _or_1 = (_eContainer_1 instanceof ReferenceAdd);
      }
      if (_or_1) {
        _or = true;
      } else {
        EObject _eContainer_2 = com.eContainer();
        _or = (_eContainer_2 instanceof ReferenceRemove);
      }
      if (!_or) {
        _and = false;
      } else {
        boolean _or_2 = false;
        EObject _eContainer_3 = com.eContainer();
        EObject _eContainer_4 = _eContainer_3.eContainer();
        if ((_eContainer_4 instanceof CreateObjectMutator)) {
          _or_2 = true;
        } else {
          EObject _eContainer_5 = com.eContainer();
          EObject _eContainer_6 = _eContainer_5.eContainer();
          _or_2 = (_eContainer_6 instanceof SelectObjectMutator);
        }
        _and = _or_2;
      }
      if (_and) {
        EObject _eContainer_7 = com.eContainer();
        EObject _eContainer_8 = _eContainer_7.eContainer();
        mut = _eContainer_8;
      } else {
        boolean _or_3 = false;
        boolean _or_4 = false;
        EObject _eContainer_9 = com.eContainer();
        if ((_eContainer_9 instanceof CreateObjectMutator)) {
          _or_4 = true;
        } else {
          EObject _eContainer_10 = com.eContainer();
          _or_4 = (_eContainer_10 instanceof SelectObjectMutator);
        }
        if (_or_4) {
          _or_3 = true;
        } else {
          EObject _eContainer_11 = com.eContainer();
          _or_3 = (_eContainer_11 instanceof ModifyInformationMutator);
        }
        if (_or_3) {
          EObject _eContainer_12 = com.eContainer();
          mut = _eContainer_12;
        }
      }
      boolean _notEquals = (!Objects.equal(mut, null));
      if (_notEquals) {
        final MutatorEnvironment env = this.getMutatorEnvironment(com);
        final Definition definition = env.getDefinition();
        final List<Mutator> commands = this.getCommands(((Mutator) mut));
        Expression _expression = com.getExpression();
        boolean _notEquals_1 = (!Objects.equal(_expression, null));
        if (_notEquals_1) {
          final Expression exp = com.getExpression();
          Evaluation _first = exp.getFirst();
          if ((_first instanceof ReferenceEvaluation)) {
            Evaluation _first_1 = exp.getFirst();
            final ReferenceEvaluation first = ((ReferenceEvaluation) _first_1);
            ObSelectionStrategy _value = first.getValue();
            boolean _notEquals_2 = (!Objects.equal(_value, null));
            if (_notEquals_2) {
              ObSelectionStrategy _value_1 = first.getValue();
              if ((_value_1 instanceof SpecificObjectSelection)) {
                ObSelectionStrategy _value_2 = first.getValue();
                ObjectEmitter _objSel = ((SpecificObjectSelection) _value_2).getObjSel();
                boolean _notEquals_3 = (!Objects.equal(_objSel, null));
                if (_notEquals_3) {
                  ObSelectionStrategy _value_3 = first.getValue();
                  ObjectEmitter _objSel_1 = ((SpecificObjectSelection) _value_3).getObjSel();
                  final String name = _objSel_1.getName();
                  int _indexOf = commands.indexOf(mut);
                  Mutator command = this.getCommand(name, commands, _indexOf);
                  boolean _notEquals_4 = (!Objects.equal(command, null));
                  if (_notEquals_4) {
                    String _metamodel = null;
                    if (definition!=null) {
                      _metamodel=definition.getMetamodel();
                    }
                    String _type = this.getType(command);
                    List<EReference> _eReferences = this.getEReferences(_metamodel, _type);
                    scope.addAll(_eReferences);
                  }
                }
              }
            }
            EList<Evaluation> _second = exp.getSecond();
            for (final Evaluation second : _second) {
              if ((second instanceof ReferenceEvaluation)) {
                ObSelectionStrategy _value_4 = ((ReferenceEvaluation)second).getValue();
                if ((_value_4 instanceof SpecificObjectSelection)) {
                  ObSelectionStrategy _value_5 = ((ReferenceEvaluation)second).getValue();
                  ObjectEmitter _objSel_2 = ((SpecificObjectSelection) _value_5).getObjSel();
                  boolean _notEquals_5 = (!Objects.equal(_objSel_2, null));
                  if (_notEquals_5) {
                    ObSelectionStrategy _value_6 = ((ReferenceEvaluation)second).getValue();
                    ObjectEmitter _objSel_3 = ((SpecificObjectSelection) _value_6).getObjSel();
                    final String name_1 = _objSel_3.getName();
                    int _indexOf_1 = commands.indexOf(mut);
                    Mutator command_1 = this.getCommand(name_1, commands, _indexOf_1);
                    boolean _notEquals_6 = (!Objects.equal(command_1, null));
                    if (_notEquals_6) {
                      String _metamodel_1 = null;
                      if (definition!=null) {
                        _metamodel_1=definition.getMetamodel();
                      }
                      String _type_1 = this.getType(command_1);
                      List<EReference> _eReferences_1 = this.getEReferences(_metamodel_1, _type_1);
                      scope.addAll(_eReferences_1);
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.refName must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_refName(final RandomTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          Expression _expression = com.getExpression();
          Evaluation _first = null;
          if (_expression!=null) {
            _first=_expression.getFirst();
          }
          final EReference reference = ((ReferenceEvaluation) _first).getName();
          EClassifier _eType = reference.getEType();
          final String className = _eType.getName();
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.refName must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_refName(final CompleteTypeSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      IScope _xifexpression = null;
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          Expression _expression = com.getExpression();
          Evaluation _first = null;
          if (_expression!=null) {
            _first=_expression.getFirst();
          }
          final EReference reference = ((ReferenceEvaluation) _first).getName();
          EClassifier _eType = reference.getEType();
          final String className = _eType.getName();
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EReference> _eReferences = this.getEReferences(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eReferences);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.refName must contain the references defined by com.type
   */
  public IScope scope_ReferenceEvaluation_refName(final SpecificObjectSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        Expression _expression = com.getExpression();
        Evaluation _first = null;
        if (_expression!=null) {
          _first=_expression.getFirst();
        }
        final EReference reference = ((ReferenceEvaluation) _first).getName();
        EClassifier _eType = reference.getEType();
        final String className = _eType.getName();
        String _metamodel = null;
        if (definition!=null) {
          _metamodel=definition.getMetamodel();
        }
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        Scopes.scopeFor(_eReferences);
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * ReferenceEvaluation.name must contain the references defined by ...
   */
  public IScope scope_ReferenceEvaluation_refName(final SpecificClosureSelection com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      boolean _notEquals = (!Objects.equal(env, null));
      if (_notEquals) {
        final Definition definition = env.getDefinition();
        Expression _expression = com.getExpression();
        Evaluation _first = null;
        if (_expression!=null) {
          _first=_expression.getFirst();
        }
        final EReference reference = ((ReferenceEvaluation) _first).getName();
        EClassifier _eType = reference.getEType();
        final String className = _eType.getName();
        String _metamodel = null;
        if (definition!=null) {
          _metamodel=definition.getMetamodel();
        }
        List<EReference> _eReferences = this.getEReferences(_metamodel, className);
        Scopes.scopeFor(_eReferences);
      }
      ArrayList<EObject> _arrayList = new ArrayList<EObject>();
      _xblockexpression = Scopes.scopeFor(_arrayList);
    }
    return _xblockexpression;
  }
  
  /**
   * Constraint.type can contain any EClass from the input meta-model.
   */
  public IScope scope_Constraint_type(final Constraint c, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(c);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      List<EClass> _eClasses = this.getEClasses(_metamodel);
      _xblockexpression = Scopes.scopeFor(_eClasses);
    }
    return _xblockexpression;
  }
  
  /**
   * ListType.value can contain any EEnumLiteral from the input EEnum.
   */
  public IScope scope_ListType_value(final ReferenceAtt refAtt, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EObject> values = new ArrayList<EObject>();
      EAttribute attribute = refAtt.getAttribute();
      EClassifier _eType = attribute.getEType();
      if ((_eType instanceof EEnum)) {
        EClassifier _eType_1 = attribute.getEType();
        final EEnum en = ((EEnum) _eType_1);
        EList<EEnumLiteral> _eLiterals = en.getELiterals();
        values.addAll(_eLiterals);
      }
      _xblockexpression = Scopes.scopeFor(values);
    }
    return _xblockexpression;
  }
  
  /**
   * ListType.value can contain any EEnumLiteral from the input EEnum.
   */
  public IScope scope_ListType_value(final AttributeEvaluation attEv, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EObject> values = new ArrayList<EObject>();
      EAttribute attribute = attEv.getName();
      EClassifier _eType = attribute.getEType();
      if ((_eType instanceof EEnum)) {
        EClassifier _eType_1 = attribute.getEType();
        final EEnum en = ((EEnum) _eType_1);
        EList<EEnumLiteral> _eLiterals = en.getELiterals();
        values.addAll(_eLiterals);
      }
      _xblockexpression = Scopes.scopeFor(values);
    }
    return _xblockexpression;
  }
  
  /**
   * ListType.value can contain any EEnumLiteral from the input EEnum.
   */
  public IScope scope_ListType_value(final AttributeScalar attScal, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EObject> values = new ArrayList<EObject>();
      EList<EAttribute> _attribute = attScal.getAttribute();
      EAttribute attribute = _attribute.get(0);
      EClassifier _eType = attribute.getEType();
      if ((_eType instanceof EEnum)) {
        EClassifier _eType_1 = attribute.getEType();
        final EEnum en = ((EEnum) _eType_1);
        EList<EEnumLiteral> _eLiterals = en.getELiterals();
        values.addAll(_eLiterals);
      }
      _xblockexpression = Scopes.scopeFor(values);
    }
    return _xblockexpression;
  }
  
  /**
   * ObjectAttributeType.objSel can contain the previous defined mutators
   */
  public IScope scope_ObjectAttributeType_objSel(final SelectObjectMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      String _metamodel_1 = definition.getMetamodel();
      EClass _type_1 = com.getType();
      String _name_1 = _type_1.getName();
      final List<EReference> references = this.getEReferences(_metamodel_1, _name_1);
      for (final EReference eref : references) {
        EClassifier _eType = eref.getEType();
        String _name_2 = _eType.getName();
        scontainers.add(_name_2);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_3 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_3, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_2 = mutator.getType();
          String _name_4 = _type_2.getName();
          boolean _contains = scontainers.contains(_name_4);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObjectAttributeType.objSel can contain the previous defined mutators
   */
  public IScope scope_ObjectAttributeType_objSel(final ModifyInformationMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final List<Mutator> commands = this.getCommands(com);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = com.getType();
      final List<EClass> containers = this.getEContainers(_metamodel, _type);
      final List<String> scontainers = new ArrayList<String>();
      for (final EClassifier cl : containers) {
        String _name = cl.getName();
        scontainers.add(_name);
      }
      String _metamodel_1 = definition.getMetamodel();
      EClass _type_1 = com.getType();
      String _name_1 = _type_1.getName();
      final List<EReference> references = this.getEReferences(_metamodel_1, _name_1);
      for (final EReference eref : references) {
        EClassifier _eType = eref.getEType();
        String _name_2 = _eType.getName();
        scontainers.add(_name_2);
      }
      final ArrayList<Mutator> scope = new ArrayList<Mutator>();
      for (final Mutator mutator : commands) {
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        String _name_3 = mutator.getName();
        boolean _notEquals = (!Objects.equal(_name_3, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _indexOf = commands.indexOf(mutator);
          int _indexOf_1 = commands.indexOf(com);
          boolean _lessThan = (_indexOf < _indexOf_1);
          _and_2 = _lessThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          _and_1 = (((((mutator instanceof CreateObjectMutator) || (mutator instanceof ModifyInformationMutator)) || (mutator instanceof SelectObjectMutator)) || (mutator instanceof CloneObjectMutator)) || (mutator instanceof RetypeObjectMutator));
        }
        if (!_and_1) {
          _and = false;
        } else {
          EClass _type_2 = mutator.getType();
          String _name_4 = _type_2.getName();
          boolean _contains = scontainers.contains(_name_4);
          _and = _contains;
        }
        if (_and) {
          scope.add(mutator);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * ObjectAttributeType.attribute must be of the type defined by com.type
   */
  public IScope scope_ObjectAttributeType_attribute(final ObjectAttributeType com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ObjectEmitter _objSel = com.getObjSel();
      final MutatorEnvironment env = this.getMutatorEnvironment(_objSel);
      Mutator mut = null;
      EObject container = com.eContainer();
      while ((((container instanceof Mutator) == false) && (!Objects.equal(container, null)))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      mut = ((Mutator) container);
      final List<Mutator> commands = this.getCommands(mut);
      String className = null;
      for (final Mutator command : commands) {
        String _name = command.getName();
        boolean _notEquals = (!Objects.equal(_name, null));
        if (_notEquals) {
          String _name_1 = command.getName();
          ObjectEmitter _objSel_1 = com.getObjSel();
          String _name_2 = _objSel_1.getName();
          boolean _equals = _name_1.equals(_name_2);
          if (_equals) {
            String _type = this.getType(command);
            className = _type;
          }
        }
      }
      IScope _xifexpression = null;
      boolean _and = false;
      boolean _notEquals_1 = (!Objects.equal(env, null));
      if (!_notEquals_1) {
        _and = false;
      } else {
        boolean _notEquals_2 = (!Objects.equal(className, null));
        _and = _notEquals_2;
      }
      if (_and) {
        IScope _xblockexpression_1 = null;
        {
          final Definition definition = env.getDefinition();
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          _xblockexpression_1 = Scopes.scopeFor(_eAttributes);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        ArrayList<EObject> _arrayList = new ArrayList<EObject>();
        _xifexpression = Scopes.scopeFor(_arrayList);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  /**
   * MinValueType.attribute must be of the type defined by com.type
   */
  public IScope scope_MinValueType_attribute(final MinValueType com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EAttribute> scopes = new ArrayList<EAttribute>();
      Mutator mut = null;
      EObject container = com.eContainer();
      while ((((container instanceof Mutator) == false) && (!Objects.equal(container, null)))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      boolean _notEquals = (!Objects.equal(container, null));
      if (_notEquals) {
        mut = ((Mutator) container);
        final MutatorEnvironment env = this.getMutatorEnvironment(mut);
        final Definition definition = env.getDefinition();
        String className = null;
        if ((mut instanceof CreateObjectMutator)) {
          EClass _type = ((CreateObjectMutator)mut).getType();
          String _name = _type.getName();
          className = _name;
        }
        if ((mut instanceof CloneObjectMutator)) {
          ObSelectionStrategy _object = ((CloneObjectMutator)mut).getObject();
          if ((_object instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_1 = ((CloneObjectMutator)mut).getObject();
            final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_1);
            ObjectEmitter _objSel = selection.getObjSel();
            if ((_objSel instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_1 = selection.getObjSel();
              EClass _type_1 = _objSel_1.getType();
              String _name_1 = _type_1.getName();
              className = _name_1;
            }
            ObjectEmitter _objSel_2 = selection.getObjSel();
            if ((_objSel_2 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_3 = selection.getObjSel();
              ObSelectionStrategy _object_2 = ((SelectObjectMutator) _objSel_3).getObject();
              EClass _type_2 = _object_2.getType();
              String _name_2 = _type_2.getName();
              className = _name_2;
            }
            ObjectEmitter _objSel_4 = selection.getObjSel();
            if ((_objSel_4 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_5 = selection.getObjSel();
              String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
              className = _selectSampleMutatorHelperName;
            }
            ObjectEmitter _objSel_6 = selection.getObjSel();
            if ((_objSel_6 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_7 = selection.getObjSel();
              EClass _type_3 = _objSel_7.getType();
              String _name_3 = _type_3.getName();
              className = _name_3;
            }
            ObjectEmitter _objSel_8 = selection.getObjSel();
            if ((_objSel_8 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_9 = selection.getObjSel();
              EClass _type_4 = _objSel_9.getType();
              String _name_4 = _type_4.getName();
              className = _name_4;
            }
          }
          ObSelectionStrategy _object_3 = ((CloneObjectMutator)mut).getObject();
          if ((_object_3 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_4 = ((CloneObjectMutator)mut).getObject();
            final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_4);
            ObjectEmitter _objSel_10 = selection_1.getObjSel();
            if ((_objSel_10 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_11 = selection_1.getObjSel();
              EClass _type_5 = _objSel_11.getType();
              String _name_5 = _type_5.getName();
              className = _name_5;
            }
            ObjectEmitter _objSel_12 = selection_1.getObjSel();
            if ((_objSel_12 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_13 = selection_1.getObjSel();
              ObSelectionStrategy _object_5 = ((SelectObjectMutator) _objSel_13).getObject();
              EClass _type_6 = _object_5.getType();
              String _name_6 = _type_6.getName();
              className = _name_6;
            }
            ObjectEmitter _objSel_14 = selection_1.getObjSel();
            if ((_objSel_14 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_15 = selection_1.getObjSel();
              String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
              className = _selectSampleMutatorHelperName_1;
            }
            ObjectEmitter _objSel_16 = selection_1.getObjSel();
            if ((_objSel_16 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_17 = selection_1.getObjSel();
              EClass _type_7 = _objSel_17.getType();
              String _name_7 = _type_7.getName();
              className = _name_7;
            }
            ObjectEmitter _objSel_18 = selection_1.getObjSel();
            if ((_objSel_18 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_19 = selection_1.getObjSel();
              EClass _type_8 = _objSel_19.getType();
              String _name_8 = _type_8.getName();
              className = _name_8;
            }
          }
          ObSelectionStrategy _object_6 = ((CloneObjectMutator)mut).getObject();
          if ((_object_6 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_7 = ((CloneObjectMutator)mut).getObject();
            final RandomTypeSelection selection_2 = ((RandomTypeSelection) _object_7);
            EClass _type_9 = selection_2.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
          ObSelectionStrategy _object_8 = ((CloneObjectMutator)mut).getObject();
          if ((_object_8 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_9 = ((CloneObjectMutator)mut).getObject();
            final CompleteTypeSelection selection_3 = ((CompleteTypeSelection) _object_9);
            EClass _type_10 = selection_3.getType();
            String _name_10 = _type_10.getName();
            className = _name_10;
          }
        }
        if ((mut instanceof SelectObjectMutator)) {
          ObSelectionStrategy _object_10 = ((SelectObjectMutator)mut).getObject();
          if ((_object_10 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_11 = ((SelectObjectMutator)mut).getObject();
            final SpecificObjectSelection selection_4 = ((SpecificObjectSelection) _object_11);
            ObjectEmitter _objSel_20 = selection_4.getObjSel();
            if ((_objSel_20 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_21 = selection_4.getObjSel();
              EClass _type_11 = _objSel_21.getType();
              String _name_11 = _type_11.getName();
              className = _name_11;
            }
            ObjectEmitter _objSel_22 = selection_4.getObjSel();
            if ((_objSel_22 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_23 = selection_4.getObjSel();
              ObSelectionStrategy _object_12 = ((SelectObjectMutator) _objSel_23).getObject();
              EClass _type_12 = _object_12.getType();
              String _name_12 = _type_12.getName();
              className = _name_12;
            }
            ObjectEmitter _objSel_24 = selection_4.getObjSel();
            if ((_objSel_24 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_25 = selection_4.getObjSel();
              String _selectSampleMutatorHelperName_2 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_25));
              className = _selectSampleMutatorHelperName_2;
            }
            ObjectEmitter _objSel_26 = selection_4.getObjSel();
            if ((_objSel_26 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_27 = selection_4.getObjSel();
              EClass _type_13 = _objSel_27.getType();
              String _name_13 = _type_13.getName();
              className = _name_13;
            }
            ObjectEmitter _objSel_28 = selection_4.getObjSel();
            if ((_objSel_28 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_29 = selection_4.getObjSel();
              EClass _type_14 = _objSel_29.getType();
              String _name_14 = _type_14.getName();
              className = _name_14;
            }
          }
          ObSelectionStrategy _object_13 = ((SelectObjectMutator)mut).getObject();
          if ((_object_13 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_14 = ((SelectObjectMutator)mut).getObject();
            final SpecificClosureSelection selection_5 = ((SpecificClosureSelection) _object_14);
            ObjectEmitter _objSel_30 = selection_5.getObjSel();
            if ((_objSel_30 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_31 = selection_5.getObjSel();
              EClass _type_15 = _objSel_31.getType();
              String _name_15 = _type_15.getName();
              className = _name_15;
            }
            ObjectEmitter _objSel_32 = selection_5.getObjSel();
            if ((_objSel_32 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_33 = selection_5.getObjSel();
              ObSelectionStrategy _object_15 = ((SelectObjectMutator) _objSel_33).getObject();
              EClass _type_16 = _object_15.getType();
              String _name_16 = _type_16.getName();
              className = _name_16;
            }
            ObjectEmitter _objSel_34 = selection_5.getObjSel();
            if ((_objSel_34 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_35 = selection_5.getObjSel();
              String _selectSampleMutatorHelperName_3 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_35));
              className = _selectSampleMutatorHelperName_3;
            }
            ObjectEmitter _objSel_36 = selection_5.getObjSel();
            if ((_objSel_36 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_37 = selection_5.getObjSel();
              EClass _type_17 = _objSel_37.getType();
              String _name_17 = _type_17.getName();
              className = _name_17;
            }
            ObjectEmitter _objSel_38 = selection_5.getObjSel();
            if ((_objSel_38 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_39 = selection_5.getObjSel();
              EClass _type_18 = _objSel_39.getType();
              String _name_18 = _type_18.getName();
              className = _name_18;
            }
          }
          ObSelectionStrategy _object_16 = ((SelectObjectMutator)mut).getObject();
          if ((_object_16 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_17 = ((SelectObjectMutator)mut).getObject();
            final RandomTypeSelection selection_6 = ((RandomTypeSelection) _object_17);
            EClass _type_19 = selection_6.getType();
            String _name_19 = _type_19.getName();
            className = _name_19;
          }
          ObSelectionStrategy _object_18 = ((SelectObjectMutator)mut).getObject();
          if ((_object_18 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_19 = ((SelectObjectMutator)mut).getObject();
            final CompleteTypeSelection selection_7 = ((CompleteTypeSelection) _object_19);
            EClass _type_20 = selection_7.getType();
            String _name_20 = _type_20.getName();
            className = _name_20;
          }
        }
        if ((mut instanceof ModifyInformationMutator)) {
          ObSelectionStrategy _object_20 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_20 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_21 = ((ModifyInformationMutator)mut).getObject();
            final SpecificObjectSelection selection_8 = ((SpecificObjectSelection) _object_21);
            ObjectEmitter _objSel_40 = selection_8.getObjSel();
            if ((_objSel_40 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_41 = selection_8.getObjSel();
              EClass _type_21 = _objSel_41.getType();
              String _name_21 = _type_21.getName();
              className = _name_21;
            }
            ObjectEmitter _objSel_42 = selection_8.getObjSel();
            if ((_objSel_42 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_43 = selection_8.getObjSel();
              ObSelectionStrategy _object_22 = ((SelectObjectMutator) _objSel_43).getObject();
              EClass _type_22 = _object_22.getType();
              String _name_22 = _type_22.getName();
              className = _name_22;
            }
            ObjectEmitter _objSel_44 = selection_8.getObjSel();
            if ((_objSel_44 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_45 = selection_8.getObjSel();
              String _selectSampleMutatorHelperName_4 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_45));
              className = _selectSampleMutatorHelperName_4;
            }
            ObjectEmitter _objSel_46 = selection_8.getObjSel();
            if ((_objSel_46 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_47 = selection_8.getObjSel();
              EClass _type_23 = _objSel_47.getType();
              String _name_23 = _type_23.getName();
              className = _name_23;
            }
            ObjectEmitter _objSel_48 = selection_8.getObjSel();
            if ((_objSel_48 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_49 = selection_8.getObjSel();
              EClass _type_24 = _objSel_49.getType();
              String _name_24 = _type_24.getName();
              className = _name_24;
            }
          }
          ObSelectionStrategy _object_23 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_23 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_24 = ((ModifyInformationMutator)mut).getObject();
            final SpecificClosureSelection selection_9 = ((SpecificClosureSelection) _object_24);
            ObjectEmitter _objSel_50 = selection_9.getObjSel();
            if ((_objSel_50 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_51 = selection_9.getObjSel();
              EClass _type_25 = _objSel_51.getType();
              String _name_25 = _type_25.getName();
              className = _name_25;
            }
            ObjectEmitter _objSel_52 = selection_9.getObjSel();
            if ((_objSel_52 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_53 = selection_9.getObjSel();
              ObSelectionStrategy _object_25 = ((SelectObjectMutator) _objSel_53).getObject();
              EClass _type_26 = _object_25.getType();
              String _name_26 = _type_26.getName();
              className = _name_26;
            }
            ObjectEmitter _objSel_54 = selection_9.getObjSel();
            if ((_objSel_54 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_55 = selection_9.getObjSel();
              String _selectSampleMutatorHelperName_5 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_55));
              className = _selectSampleMutatorHelperName_5;
            }
            ObjectEmitter _objSel_56 = selection_9.getObjSel();
            if ((_objSel_56 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_57 = selection_9.getObjSel();
              EClass _type_27 = _objSel_57.getType();
              String _name_27 = _type_27.getName();
              className = _name_27;
            }
            ObjectEmitter _objSel_58 = selection_9.getObjSel();
            if ((_objSel_58 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_59 = selection_9.getObjSel();
              EClass _type_28 = _objSel_59.getType();
              String _name_28 = _type_28.getName();
              className = _name_28;
            }
          }
          ObSelectionStrategy _object_26 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_26 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_27 = ((ModifyInformationMutator)mut).getObject();
            final RandomTypeSelection selection_10 = ((RandomTypeSelection) _object_27);
            EClass _type_29 = selection_10.getType();
            String _name_29 = _type_29.getName();
            className = _name_29;
          }
          ObSelectionStrategy _object_28 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_28 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_29 = ((ModifyInformationMutator)mut).getObject();
            final CompleteTypeSelection selection_11 = ((CompleteTypeSelection) _object_29);
            EClass _type_30 = selection_11.getType();
            String _name_30 = _type_30.getName();
            className = _name_30;
          }
        }
        boolean _notEquals_1 = (!Objects.equal(className, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          scopes.addAll(_eAttributes);
        }
      }
      _xblockexpression = Scopes.scopeFor(scopes);
    }
    return _xblockexpression;
  }
  
  /**
   * MaxValueType.attribute must be of the type defined by com.type
   */
  public IScope scope_MaxValueType_attribute(final MaxValueType com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EAttribute> scopes = new ArrayList<EAttribute>();
      Mutator mut = null;
      EObject container = com.eContainer();
      while ((((container instanceof Mutator) == false) && (!Objects.equal(container, null)))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      boolean _notEquals = (!Objects.equal(container, null));
      if (_notEquals) {
        mut = ((Mutator) container);
        final MutatorEnvironment env = this.getMutatorEnvironment(mut);
        final Definition definition = env.getDefinition();
        String className = null;
        if ((mut instanceof CreateObjectMutator)) {
          EClass _type = ((CreateObjectMutator)mut).getType();
          String _name = _type.getName();
          className = _name;
        }
        if ((mut instanceof CloneObjectMutator)) {
          ObSelectionStrategy _object = ((CloneObjectMutator)mut).getObject();
          if ((_object instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_1 = ((CloneObjectMutator)mut).getObject();
            final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_1);
            ObjectEmitter _objSel = selection.getObjSel();
            if ((_objSel instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_1 = selection.getObjSel();
              EClass _type_1 = _objSel_1.getType();
              String _name_1 = _type_1.getName();
              className = _name_1;
            }
            ObjectEmitter _objSel_2 = selection.getObjSel();
            if ((_objSel_2 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_3 = selection.getObjSel();
              ObSelectionStrategy _object_2 = ((SelectObjectMutator) _objSel_3).getObject();
              EClass _type_2 = _object_2.getType();
              String _name_2 = _type_2.getName();
              className = _name_2;
            }
            ObjectEmitter _objSel_4 = selection.getObjSel();
            if ((_objSel_4 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_5 = selection.getObjSel();
              String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
              className = _selectSampleMutatorHelperName;
            }
            ObjectEmitter _objSel_6 = selection.getObjSel();
            if ((_objSel_6 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_7 = selection.getObjSel();
              EClass _type_3 = _objSel_7.getType();
              String _name_3 = _type_3.getName();
              className = _name_3;
            }
            ObjectEmitter _objSel_8 = selection.getObjSel();
            if ((_objSel_8 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_9 = selection.getObjSel();
              EClass _type_4 = _objSel_9.getType();
              String _name_4 = _type_4.getName();
              className = _name_4;
            }
          }
          ObSelectionStrategy _object_3 = ((CloneObjectMutator)mut).getObject();
          if ((_object_3 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_4 = ((CloneObjectMutator)mut).getObject();
            final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_4);
            ObjectEmitter _objSel_10 = selection_1.getObjSel();
            if ((_objSel_10 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_11 = selection_1.getObjSel();
              EClass _type_5 = _objSel_11.getType();
              String _name_5 = _type_5.getName();
              className = _name_5;
            }
            ObjectEmitter _objSel_12 = selection_1.getObjSel();
            if ((_objSel_12 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_13 = selection_1.getObjSel();
              ObSelectionStrategy _object_5 = ((SelectObjectMutator) _objSel_13).getObject();
              EClass _type_6 = _object_5.getType();
              String _name_6 = _type_6.getName();
              className = _name_6;
            }
            ObjectEmitter _objSel_14 = selection_1.getObjSel();
            if ((_objSel_14 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_15 = selection_1.getObjSel();
              String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
              className = _selectSampleMutatorHelperName_1;
            }
            ObjectEmitter _objSel_16 = selection_1.getObjSel();
            if ((_objSel_16 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_17 = selection_1.getObjSel();
              EClass _type_7 = _objSel_17.getType();
              String _name_7 = _type_7.getName();
              className = _name_7;
            }
            ObjectEmitter _objSel_18 = selection_1.getObjSel();
            if ((_objSel_18 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_19 = selection_1.getObjSel();
              EClass _type_8 = _objSel_19.getType();
              String _name_8 = _type_8.getName();
              className = _name_8;
            }
          }
          ObSelectionStrategy _object_6 = ((CloneObjectMutator)mut).getObject();
          if ((_object_6 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_7 = ((CloneObjectMutator)mut).getObject();
            final RandomTypeSelection selection_2 = ((RandomTypeSelection) _object_7);
            EClass _type_9 = selection_2.getType();
            String _name_9 = _type_9.getName();
            className = _name_9;
          }
          ObSelectionStrategy _object_8 = ((CloneObjectMutator)mut).getObject();
          if ((_object_8 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_9 = ((CloneObjectMutator)mut).getObject();
            final CompleteTypeSelection selection_3 = ((CompleteTypeSelection) _object_9);
            EClass _type_10 = selection_3.getType();
            String _name_10 = _type_10.getName();
            className = _name_10;
          }
        }
        if ((mut instanceof SelectObjectMutator)) {
          ObSelectionStrategy _object_10 = ((SelectObjectMutator)mut).getObject();
          if ((_object_10 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_11 = ((SelectObjectMutator)mut).getObject();
            final SpecificObjectSelection selection_4 = ((SpecificObjectSelection) _object_11);
            ObjectEmitter _objSel_20 = selection_4.getObjSel();
            if ((_objSel_20 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_21 = selection_4.getObjSel();
              EClass _type_11 = _objSel_21.getType();
              String _name_11 = _type_11.getName();
              className = _name_11;
            }
            ObjectEmitter _objSel_22 = selection_4.getObjSel();
            if ((_objSel_22 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_23 = selection_4.getObjSel();
              ObSelectionStrategy _object_12 = ((SelectObjectMutator) _objSel_23).getObject();
              EClass _type_12 = _object_12.getType();
              String _name_12 = _type_12.getName();
              className = _name_12;
            }
            ObjectEmitter _objSel_24 = selection_4.getObjSel();
            if ((_objSel_24 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_25 = selection_4.getObjSel();
              String _selectSampleMutatorHelperName_2 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_25));
              className = _selectSampleMutatorHelperName_2;
            }
            ObjectEmitter _objSel_26 = selection_4.getObjSel();
            if ((_objSel_26 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_27 = selection_4.getObjSel();
              EClass _type_13 = _objSel_27.getType();
              String _name_13 = _type_13.getName();
              className = _name_13;
            }
            ObjectEmitter _objSel_28 = selection_4.getObjSel();
            if ((_objSel_28 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_29 = selection_4.getObjSel();
              EClass _type_14 = _objSel_29.getType();
              String _name_14 = _type_14.getName();
              className = _name_14;
            }
          }
          ObSelectionStrategy _object_13 = ((SelectObjectMutator)mut).getObject();
          if ((_object_13 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_14 = ((SelectObjectMutator)mut).getObject();
            final SpecificClosureSelection selection_5 = ((SpecificClosureSelection) _object_14);
            ObjectEmitter _objSel_30 = selection_5.getObjSel();
            if ((_objSel_30 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_31 = selection_5.getObjSel();
              EClass _type_15 = _objSel_31.getType();
              String _name_15 = _type_15.getName();
              className = _name_15;
            }
            ObjectEmitter _objSel_32 = selection_5.getObjSel();
            if ((_objSel_32 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_33 = selection_5.getObjSel();
              ObSelectionStrategy _object_15 = ((SelectObjectMutator) _objSel_33).getObject();
              EClass _type_16 = _object_15.getType();
              String _name_16 = _type_16.getName();
              className = _name_16;
            }
            ObjectEmitter _objSel_34 = selection_5.getObjSel();
            if ((_objSel_34 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_35 = selection_5.getObjSel();
              String _selectSampleMutatorHelperName_3 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_35));
              className = _selectSampleMutatorHelperName_3;
            }
            ObjectEmitter _objSel_36 = selection_5.getObjSel();
            if ((_objSel_36 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_37 = selection_5.getObjSel();
              EClass _type_17 = _objSel_37.getType();
              String _name_17 = _type_17.getName();
              className = _name_17;
            }
            ObjectEmitter _objSel_38 = selection_5.getObjSel();
            if ((_objSel_38 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_39 = selection_5.getObjSel();
              EClass _type_18 = _objSel_39.getType();
              String _name_18 = _type_18.getName();
              className = _name_18;
            }
          }
          ObSelectionStrategy _object_16 = ((SelectObjectMutator)mut).getObject();
          if ((_object_16 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_17 = ((SelectObjectMutator)mut).getObject();
            final RandomTypeSelection selection_6 = ((RandomTypeSelection) _object_17);
            EClass _type_19 = selection_6.getType();
            String _name_19 = _type_19.getName();
            className = _name_19;
          }
          ObSelectionStrategy _object_18 = ((SelectObjectMutator)mut).getObject();
          if ((_object_18 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_19 = ((SelectObjectMutator)mut).getObject();
            final CompleteTypeSelection selection_7 = ((CompleteTypeSelection) _object_19);
            EClass _type_20 = selection_7.getType();
            String _name_20 = _type_20.getName();
            className = _name_20;
          }
        }
        if ((mut instanceof ModifyInformationMutator)) {
          ObSelectionStrategy _object_20 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_20 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_21 = ((ModifyInformationMutator)mut).getObject();
            final SpecificObjectSelection selection_8 = ((SpecificObjectSelection) _object_21);
            ObjectEmitter _objSel_40 = selection_8.getObjSel();
            if ((_objSel_40 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_41 = selection_8.getObjSel();
              EClass _type_21 = _objSel_41.getType();
              String _name_21 = _type_21.getName();
              className = _name_21;
            }
            ObjectEmitter _objSel_42 = selection_8.getObjSel();
            if ((_objSel_42 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_43 = selection_8.getObjSel();
              ObSelectionStrategy _object_22 = ((SelectObjectMutator) _objSel_43).getObject();
              EClass _type_22 = _object_22.getType();
              String _name_22 = _type_22.getName();
              className = _name_22;
            }
            ObjectEmitter _objSel_44 = selection_8.getObjSel();
            if ((_objSel_44 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_45 = selection_8.getObjSel();
              String _selectSampleMutatorHelperName_4 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_45));
              className = _selectSampleMutatorHelperName_4;
            }
            ObjectEmitter _objSel_46 = selection_8.getObjSel();
            if ((_objSel_46 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_47 = selection_8.getObjSel();
              EClass _type_23 = _objSel_47.getType();
              String _name_23 = _type_23.getName();
              className = _name_23;
            }
            ObjectEmitter _objSel_48 = selection_8.getObjSel();
            if ((_objSel_48 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_49 = selection_8.getObjSel();
              EClass _type_24 = _objSel_49.getType();
              String _name_24 = _type_24.getName();
              className = _name_24;
            }
          }
          ObSelectionStrategy _object_23 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_23 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_24 = ((ModifyInformationMutator)mut).getObject();
            final SpecificClosureSelection selection_9 = ((SpecificClosureSelection) _object_24);
            ObjectEmitter _objSel_50 = selection_9.getObjSel();
            if ((_objSel_50 instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_51 = selection_9.getObjSel();
              EClass _type_25 = _objSel_51.getType();
              String _name_25 = _type_25.getName();
              className = _name_25;
            }
            ObjectEmitter _objSel_52 = selection_9.getObjSel();
            if ((_objSel_52 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_53 = selection_9.getObjSel();
              ObSelectionStrategy _object_25 = ((SelectObjectMutator) _objSel_53).getObject();
              EClass _type_26 = _object_25.getType();
              String _name_26 = _type_26.getName();
              className = _name_26;
            }
            ObjectEmitter _objSel_54 = selection_9.getObjSel();
            if ((_objSel_54 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_55 = selection_9.getObjSel();
              String _selectSampleMutatorHelperName_5 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_55));
              className = _selectSampleMutatorHelperName_5;
            }
            ObjectEmitter _objSel_56 = selection_9.getObjSel();
            if ((_objSel_56 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_57 = selection_9.getObjSel();
              EClass _type_27 = _objSel_57.getType();
              String _name_27 = _type_27.getName();
              className = _name_27;
            }
            ObjectEmitter _objSel_58 = selection_9.getObjSel();
            if ((_objSel_58 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_59 = selection_9.getObjSel();
              EClass _type_28 = _objSel_59.getType();
              String _name_28 = _type_28.getName();
              className = _name_28;
            }
          }
          ObSelectionStrategy _object_26 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_26 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_27 = ((ModifyInformationMutator)mut).getObject();
            final RandomTypeSelection selection_10 = ((RandomTypeSelection) _object_27);
            EClass _type_29 = selection_10.getType();
            String _name_29 = _type_29.getName();
            className = _name_29;
          }
          ObSelectionStrategy _object_28 = ((ModifyInformationMutator)mut).getObject();
          if ((_object_28 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_29 = ((ModifyInformationMutator)mut).getObject();
            final CompleteTypeSelection selection_11 = ((CompleteTypeSelection) _object_29);
            EClass _type_30 = selection_11.getType();
            String _name_30 = _type_30.getName();
            className = _name_30;
          }
        }
        boolean _notEquals_1 = (!Objects.equal(className, null));
        if (_notEquals_1) {
          String _metamodel = null;
          if (definition!=null) {
            _metamodel=definition.getMetamodel();
          }
          List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
          scopes.addAll(_eAttributes);
        }
      }
      _xblockexpression = Scopes.scopeFor(scopes);
    }
    return _xblockexpression;
  }
  
  /**
   * RandomNumberType.attribute must be of the type defined by com.type
   */
  public IScope scope_RandomNumberType_max(final RandomNumberType com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      ArrayList<EAttribute> scopes = new ArrayList<EAttribute>();
      String className = null;
      Definition definition = null;
      Mutator mut = null;
      EObject container = com.eContainer();
      while ((((container instanceof Mutator) == false) && (!Objects.equal(container, null)))) {
        {
          EObject _eContainer = container.eContainer();
          container = _eContainer;
          mut = ((Mutator) container);
          final MutatorEnvironment env = this.getMutatorEnvironment(mut);
          Definition _definition = env.getDefinition();
          definition = _definition;
        }
      }
      ObSelectionStrategy _object = com.getObject();
      boolean _notEquals = (!Objects.equal(_object, null));
      if (_notEquals) {
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_2);
          ObjectEmitter _objSel = selection.getObjSel();
          if ((_objSel instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_1 = selection.getObjSel();
            EClass _type = _objSel_1.getType();
            String _name = _type.getName();
            className = _name;
          }
          ObjectEmitter _objSel_2 = selection.getObjSel();
          if ((_objSel_2 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_3 = selection.getObjSel();
            ObSelectionStrategy _object_3 = ((SelectObjectMutator) _objSel_3).getObject();
            EClass _type_1 = _object_3.getType();
            String _name_1 = _type_1.getName();
            className = _name_1;
          }
          ObjectEmitter _objSel_4 = selection.getObjSel();
          if ((_objSel_4 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_5 = selection.getObjSel();
            String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
            className = _selectSampleMutatorHelperName;
          }
          ObjectEmitter _objSel_6 = selection.getObjSel();
          if ((_objSel_6 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_7 = selection.getObjSel();
            EClass _type_2 = _objSel_7.getType();
            String _name_2 = _type_2.getName();
            className = _name_2;
          }
          ObjectEmitter _objSel_8 = selection.getObjSel();
          if ((_objSel_8 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_9 = selection.getObjSel();
            EClass _type_3 = _objSel_9.getType();
            String _name_3 = _type_3.getName();
            className = _name_3;
          }
        }
        ObSelectionStrategy _object_4 = com.getObject();
        if ((_object_4 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_5 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_5);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_4 = _objSel_11.getType();
            String _name_4 = _type_4.getName();
            className = _name_4;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_6 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_5 = _object_6.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_6 = _objSel_17.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_7 = _objSel_19.getType();
            String _name_7 = _type_7.getName();
            className = _name_7;
          }
        }
        ObSelectionStrategy _object_7 = com.getObject();
        if ((_object_7 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_8 = com.getObject();
          final RandomTypeSelection selection_2 = ((RandomTypeSelection) _object_8);
          EClass _type_8 = selection_2.getType();
          String _name_8 = _type_8.getName();
          className = _name_8;
        }
        ObSelectionStrategy _object_9 = com.getObject();
        if ((_object_9 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_10 = com.getObject();
          final CompleteTypeSelection selection_3 = ((CompleteTypeSelection) _object_10);
          EClass _type_9 = selection_3.getType();
          String _name_9 = _type_9.getName();
          className = _name_9;
        }
        String _metamodel = null;
        if (definition!=null) {
          _metamodel=definition.getMetamodel();
        }
        List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
        scopes.addAll(_eAttributes);
      }
      _xblockexpression = Scopes.scopeFor(scopes);
    }
    return _xblockexpression;
  }
  
  /**
   * SelectSampleMutator.features must be features of the type defined by com.type
   */
  public IScope scope_SelectSampleMutator_features(final SelectSampleMutator com, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final MutatorEnvironment env = this.getMutatorEnvironment(com);
      final Definition definition = env.getDefinition();
      final List<EStructuralFeature> scope = new ArrayList<EStructuralFeature>();
      ObSelectionStrategy _object = com.getObject();
      if ((_object instanceof ObSelectionStrategy)) {
        String className = null;
        ObSelectionStrategy _object_1 = com.getObject();
        if ((_object_1 instanceof RandomTypeSelection)) {
          ObSelectionStrategy _object_2 = com.getObject();
          EClass _type = _object_2.getType();
          String _name = _type.getName();
          className = _name;
        }
        ObSelectionStrategy _object_3 = com.getObject();
        if ((_object_3 instanceof CompleteTypeSelection)) {
          ObSelectionStrategy _object_4 = com.getObject();
          EClass _type_1 = _object_4.getType();
          String _name_1 = _type_1.getName();
          className = _name_1;
        }
        ObSelectionStrategy _object_5 = com.getObject();
        if ((_object_5 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _object_6 = com.getObject();
          final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_6);
          EReference _refType = selection.getRefType();
          boolean _equals = Objects.equal(_refType, null);
          if (_equals) {
            ObjectEmitter _objSel = selection.getObjSel();
            if ((_objSel instanceof CreateObjectMutator)) {
              ObjectEmitter _objSel_1 = selection.getObjSel();
              EClass _type_2 = _objSel_1.getType();
              String _name_2 = _type_2.getName();
              className = _name_2;
            }
            ObjectEmitter _objSel_2 = selection.getObjSel();
            if ((_objSel_2 instanceof SelectObjectMutator)) {
              ObjectEmitter _objSel_3 = selection.getObjSel();
              ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_3).getObject();
              EClass _type_3 = _object_7.getType();
              String _name_3 = _type_3.getName();
              className = _name_3;
            }
            ObjectEmitter _objSel_4 = selection.getObjSel();
            if ((_objSel_4 instanceof SelectSampleMutator)) {
              ObjectEmitter _objSel_5 = selection.getObjSel();
              String _selectSampleMutatorHelperName = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_5));
              className = _selectSampleMutatorHelperName;
            }
            ObjectEmitter _objSel_6 = selection.getObjSel();
            if ((_objSel_6 instanceof CloneObjectMutator)) {
              ObjectEmitter _objSel_7 = selection.getObjSel();
              EClass _type_4 = _objSel_7.getType();
              String _name_4 = _type_4.getName();
              className = _name_4;
            }
            ObjectEmitter _objSel_8 = selection.getObjSel();
            if ((_objSel_8 instanceof RetypeObjectMutator)) {
              ObjectEmitter _objSel_9 = selection.getObjSel();
              EClass _type_5 = _objSel_9.getType();
              String _name_5 = _type_5.getName();
              className = _name_5;
            }
          } else {
            EReference _refType_1 = selection.getRefType();
            EClassifier _eType = _refType_1.getEType();
            String _name_6 = _eType.getName();
            className = _name_6;
          }
        }
        ObSelectionStrategy _object_8 = com.getObject();
        if ((_object_8 instanceof SpecificClosureSelection)) {
          ObSelectionStrategy _object_9 = com.getObject();
          final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_9);
          ObjectEmitter _objSel_10 = selection_1.getObjSel();
          if ((_objSel_10 instanceof CreateObjectMutator)) {
            ObjectEmitter _objSel_11 = selection_1.getObjSel();
            EClass _type_6 = _objSel_11.getType();
            String _name_7 = _type_6.getName();
            className = _name_7;
          }
          ObjectEmitter _objSel_12 = selection_1.getObjSel();
          if ((_objSel_12 instanceof SelectObjectMutator)) {
            ObjectEmitter _objSel_13 = selection_1.getObjSel();
            ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_13).getObject();
            EClass _type_7 = _object_10.getType();
            String _name_8 = _type_7.getName();
            className = _name_8;
          }
          ObjectEmitter _objSel_14 = selection_1.getObjSel();
          if ((_objSel_14 instanceof SelectSampleMutator)) {
            ObjectEmitter _objSel_15 = selection_1.getObjSel();
            String _selectSampleMutatorHelperName_1 = MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) _objSel_15));
            className = _selectSampleMutatorHelperName_1;
          }
          ObjectEmitter _objSel_16 = selection_1.getObjSel();
          if ((_objSel_16 instanceof CloneObjectMutator)) {
            ObjectEmitter _objSel_17 = selection_1.getObjSel();
            EClass _type_8 = _objSel_17.getType();
            String _name_9 = _type_8.getName();
            className = _name_9;
          }
          ObjectEmitter _objSel_18 = selection_1.getObjSel();
          if ((_objSel_18 instanceof RetypeObjectMutator)) {
            ObjectEmitter _objSel_19 = selection_1.getObjSel();
            EClass _type_9 = _objSel_19.getType();
            String _name_10 = _type_9.getName();
            className = _name_10;
          }
        }
        String _metamodel = definition.getMetamodel();
        List<EAttribute> _eAttributes = this.getEAttributes(_metamodel, className);
        scope.addAll(_eAttributes);
        String _metamodel_1 = definition.getMetamodel();
        List<EReference> _eReferences = this.getEReferences(_metamodel_1, className);
        scope.addAll(_eReferences);
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * PathElementCS.pathName can contain any EStructuralFeature defined by the
   * constraint.type.name
   */
  public IScope scope_PathElementCS_pathName(final Constraint constraint, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final List<EStructuralFeature> scope = new ArrayList<EStructuralFeature>();
      EObject container = constraint.eContainer();
      while (((!Objects.equal(container, null)) && ((container instanceof MutatorEnvironment) == false))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      final MutatorEnvironment env = ((MutatorEnvironment) container);
      final Definition definition = env.getDefinition();
      String _metamodel = definition.getMetamodel();
      EClass _type = constraint.getType();
      String _name = _type.getName();
      List<EStructuralFeature> _eStructuralFeatures = this.getEStructuralFeatures(_metamodel, _name);
      scope.addAll(_eStructuralFeatures);
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * PathElementCS.pathName can contain any EStructuralFeature defined by the
   * expression variable
   */
  public IScope scope_NavigationPathElementCS_pathName(final InvariantCS invariant, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final List<EStructuralFeature> scope = new ArrayList<EStructuralFeature>();
      EObject container = invariant.eContainer();
      while (((!Objects.equal(container, null)) && ((container instanceof MutatorEnvironment) == false))) {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
      final MutatorEnvironment env = ((MutatorEnvironment) container);
      final Definition definition = env.getDefinition();
      ExpCS _exp = invariant.getExp();
      if ((_exp instanceof CallExpCS)) {
        ExpCS _exp_1 = invariant.getExp();
        final CallExpCS callExpCS = ((CallExpCS) _exp_1);
        CallExpCS _source = callExpCS.getSource();
        if ((_source instanceof NameExpCS)) {
          CallExpCS _source_1 = callExpCS.getSource();
          final NameExpCS nameExpCS = ((NameExpCS) _source_1);
          PathNameCS _expName = nameExpCS.getExpName();
          EList<PathCS> _path = _expName.getPath();
          PathCS _get = _path.get(0);
          final PathElementCS pathElementCS = ((PathElementCS) _get);
          String _metamodel = definition.getMetamodel();
          EStructuralFeature _pathName = pathElementCS.getPathName();
          EClassifier _eType = _pathName.getEType();
          String _name = _eType.getName();
          List<EStructuralFeature> _eStructuralFeatures = this.getEStructuralFeatures(_metamodel, _name);
          scope.addAll(_eStructuralFeatures);
        }
      }
      _xblockexpression = Scopes.scopeFor(scope);
    }
    return _xblockexpression;
  }
  
  /**
   * It returns the mutator environment that contains an object
   */
  private MutatorEnvironment getMutatorEnvironment(final ObjectEmitter oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  private MutatorEnvironment getMutatorEnvironment(final ReferenceSet oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  private MutatorEnvironment getMutatorEnvironment(final Constraint oe) {
    return EcoreUtil2.<MutatorEnvironment>getContainerOfType(oe, MutatorEnvironment.class);
  }
  
  /**
   * It returns the list of commands in the scope of the received mutator.
   * The scope can be either the environment or a composite mutator.
   * @param Mutator
   * @return List<Mutator>
   */
  private List<Mutator> getCommands(final Mutator com) {
    EObject _eContainer = com.eContainer();
    if ((_eContainer instanceof Block)) {
      EObject _eContainer_1 = com.eContainer();
      return ((Block) _eContainer_1).getCommands();
    }
    EObject _eContainer_2 = com.eContainer();
    if ((_eContainer_2 instanceof CompositeMutator)) {
      EObject _eContainer_3 = com.eContainer();
      return ((CompositeMutator) _eContainer_3).getCommands();
    }
    EObject _eContainer_4 = com.eContainer();
    if ((_eContainer_4 instanceof MutatorEnvironment)) {
      EObject _eContainer_5 = com.eContainer();
      return ((MutatorEnvironment) _eContainer_5).getCommands();
    }
    return new ArrayList<Mutator>();
  }
  
  /**
   * It returns the type to which a mutator applies.
   */
  private String getType(final Mutator mutator) {
    if ((mutator instanceof SelectObjectMutator)) {
      ObSelectionStrategy _object = ((SelectObjectMutator) mutator).getObject();
      EClass _type = null;
      if (_object!=null) {
        _type=_object.getType();
      }
      String _name = null;
      if (_type!=null) {
        _name=_type.getName();
      }
      return _name;
    }
    if ((mutator instanceof SelectSampleMutator)) {
      ObSelectionStrategy _object_1 = ((SelectSampleMutator) mutator).getObject();
      if ((_object_1 instanceof RandomTypeSelection)) {
        ObSelectionStrategy _object_2 = ((SelectSampleMutator) mutator).getObject();
        EClass _type_1 = null;
        if (_object_2!=null) {
          _type_1=_object_2.getType();
        }
        String _name_1 = null;
        if (_type_1!=null) {
          _name_1=_type_1.getName();
        }
        return _name_1;
      }
      ObSelectionStrategy _object_3 = ((SelectSampleMutator) mutator).getObject();
      if ((_object_3 instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_4 = ((SelectSampleMutator) mutator).getObject();
        EReference _refType = ((SpecificObjectSelection) _object_4).getRefType();
        boolean _equals = Objects.equal(_refType, null);
        if (_equals) {
          ObSelectionStrategy _object_5 = ((SelectSampleMutator) mutator).getObject();
          final ObjectEmitter o = ((SpecificObjectSelection) _object_5).getObjSel();
          if ((o instanceof SelectObjectMutator)) {
            ObSelectionStrategy _object_6 = ((SelectObjectMutator) o).getObject();
            EClass _type_2 = null;
            if (_object_6!=null) {
              _type_2=_object_6.getType();
            }
            String _name_2 = null;
            if (_type_2!=null) {
              _name_2=_type_2.getName();
            }
            return _name_2;
          }
          if ((o instanceof CreateObjectMutator)) {
            EClass _type_3 = ((CreateObjectMutator) o).getType();
            String _name_3 = null;
            if (_type_3!=null) {
              _name_3=_type_3.getName();
            }
            return _name_3;
          }
          if ((o instanceof SelectSampleMutator)) {
            return MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) o));
          }
          if ((o instanceof CloneObjectMutator)) {
            ObSelectionStrategy _object_7 = ((CloneObjectMutator) o).getObject();
            EClass _type_4 = null;
            if (_object_7!=null) {
              _type_4=_object_7.getType();
            }
            String _name_4 = null;
            if (_type_4!=null) {
              _name_4=_type_4.getName();
            }
            return _name_4;
          }
          if ((o instanceof RetypeObjectMutator)) {
            ObSelectionStrategy _object_8 = ((RetypeObjectMutator) o).getObject();
            EClass _type_5 = null;
            if (_object_8!=null) {
              _type_5=_object_8.getType();
            }
            String _name_5 = null;
            if (_type_5!=null) {
              _name_5=_type_5.getName();
            }
            return _name_5;
          }
        } else {
          ObSelectionStrategy _object_9 = ((SelectSampleMutator) mutator).getObject();
          EReference _refType_1 = ((SpecificObjectSelection) _object_9).getRefType();
          EClassifier _eType = _refType_1.getEType();
          return _eType.getName();
        }
      }
      ObSelectionStrategy _object_10 = ((SelectSampleMutator) mutator).getObject();
      if ((_object_10 instanceof SpecificClosureSelection)) {
        ObSelectionStrategy _object_11 = ((SelectSampleMutator) mutator).getObject();
        EReference _refType_2 = ((SpecificObjectSelection) _object_11).getRefType();
        boolean _equals_1 = Objects.equal(_refType_2, null);
        if (_equals_1) {
          ObSelectionStrategy _object_12 = ((SelectSampleMutator) mutator).getObject();
          final ObjectEmitter o_1 = ((SpecificClosureSelection) _object_12).getObjSel();
          if ((o_1 instanceof SelectObjectMutator)) {
            ObSelectionStrategy _object_13 = ((SelectObjectMutator) o_1).getObject();
            EClass _type_6 = null;
            if (_object_13!=null) {
              _type_6=_object_13.getType();
            }
            String _name_6 = null;
            if (_type_6!=null) {
              _name_6=_type_6.getName();
            }
            return _name_6;
          }
          if ((o_1 instanceof CreateObjectMutator)) {
            EClass _type_7 = ((CreateObjectMutator) o_1).getType();
            String _name_7 = null;
            if (_type_7!=null) {
              _name_7=_type_7.getName();
            }
            return _name_7;
          }
          if ((o_1 instanceof SelectSampleMutator)) {
            return MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) o_1));
          }
          if ((o_1 instanceof CloneObjectMutator)) {
            ObSelectionStrategy _object_14 = ((CloneObjectMutator) o_1).getObject();
            EClass _type_8 = null;
            if (_object_14!=null) {
              _type_8=_object_14.getType();
            }
            String _name_8 = null;
            if (_type_8!=null) {
              _name_8=_type_8.getName();
            }
            return _name_8;
          }
          if ((o_1 instanceof RetypeObjectMutator)) {
            ObSelectionStrategy _object_15 = ((RetypeObjectMutator) o_1).getObject();
            EClass _type_9 = null;
            if (_object_15!=null) {
              _type_9=_object_15.getType();
            }
            String _name_9 = null;
            if (_type_9!=null) {
              _name_9=_type_9.getName();
            }
            return _name_9;
          }
        } else {
          ObSelectionStrategy _object_16 = ((SelectSampleMutator) mutator).getObject();
          EReference _refType_3 = ((SpecificClosureSelection) _object_16).getRefType();
          EClassifier _eType_1 = _refType_3.getEType();
          return _eType_1.getName();
        }
      }
    }
    if ((mutator instanceof ModifyInformationMutator)) {
      ObSelectionStrategy _object_17 = ((ModifyInformationMutator) mutator).getObject();
      if ((_object_17 instanceof RandomTypeSelection)) {
        ObSelectionStrategy _object_18 = ((ModifyInformationMutator) mutator).getObject();
        EClass _type_10 = null;
        if (_object_18!=null) {
          _type_10=_object_18.getType();
        }
        String _name_10 = null;
        if (_type_10!=null) {
          _name_10=_type_10.getName();
        }
        return _name_10;
      }
      ObSelectionStrategy _object_19 = ((ModifyInformationMutator) mutator).getObject();
      if ((_object_19 instanceof SpecificObjectSelection)) {
        ObSelectionStrategy _object_20 = ((ModifyInformationMutator) mutator).getObject();
        final ObjectEmitter o_2 = ((SpecificObjectSelection) _object_20).getObjSel();
        if ((o_2 instanceof SelectObjectMutator)) {
          ObSelectionStrategy _object_21 = ((SelectObjectMutator) o_2).getObject();
          EClass _type_11 = null;
          if (_object_21!=null) {
            _type_11=_object_21.getType();
          }
          String _name_11 = null;
          if (_type_11!=null) {
            _name_11=_type_11.getName();
          }
          return _name_11;
        }
        if ((o_2 instanceof CreateObjectMutator)) {
          EClass _type_12 = ((CreateObjectMutator) o_2).getType();
          String _name_12 = null;
          if (_type_12!=null) {
            _name_12=_type_12.getName();
          }
          return _name_12;
        }
        if ((o_2 instanceof SelectSampleMutator)) {
          return MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) o_2));
        }
        if ((o_2 instanceof CloneObjectMutator)) {
          ObSelectionStrategy _object_22 = ((CloneObjectMutator) o_2).getObject();
          EClass _type_13 = null;
          if (_object_22!=null) {
            _type_13=_object_22.getType();
          }
          String _name_13 = null;
          if (_type_13!=null) {
            _name_13=_type_13.getName();
          }
          return _name_13;
        }
        if ((o_2 instanceof RetypeObjectMutator)) {
          ObSelectionStrategy _object_23 = ((RetypeObjectMutator) o_2).getObject();
          EClass _type_14 = null;
          if (_object_23!=null) {
            _type_14=_object_23.getType();
          }
          String _name_14 = null;
          if (_type_14!=null) {
            _name_14=_type_14.getName();
          }
          return _name_14;
        }
      }
      ObSelectionStrategy _object_24 = ((ModifyInformationMutator) mutator).getObject();
      if ((_object_24 instanceof SpecificClosureSelection)) {
        ObSelectionStrategy _object_25 = ((ModifyInformationMutator) mutator).getObject();
        final ObjectEmitter o_3 = ((SpecificClosureSelection) _object_25).getObjSel();
        if ((o_3 instanceof SelectObjectMutator)) {
          ObSelectionStrategy _object_26 = ((SelectObjectMutator) o_3).getObject();
          EClass _type_15 = null;
          if (_object_26!=null) {
            _type_15=_object_26.getType();
          }
          String _name_15 = null;
          if (_type_15!=null) {
            _name_15=_type_15.getName();
          }
          return _name_15;
        }
        if ((o_3 instanceof CreateObjectMutator)) {
          EClass _type_16 = ((CreateObjectMutator) o_3).getType();
          String _name_16 = null;
          if (_type_16!=null) {
            _name_16=_type_16.getName();
          }
          return _name_16;
        }
        if ((o_3 instanceof SelectSampleMutator)) {
          return MutatorUtils.selectSampleMutatorHelperName(((SelectSampleMutator) o_3));
        }
        if ((o_3 instanceof CloneObjectMutator)) {
          ObSelectionStrategy _object_27 = ((CloneObjectMutator) o_3).getObject();
          EClass _type_17 = null;
          if (_object_27!=null) {
            _type_17=_object_27.getType();
          }
          String _name_17 = null;
          if (_type_17!=null) {
            _name_17=_type_17.getName();
          }
          return _name_17;
        }
        if ((o_3 instanceof RetypeObjectMutator)) {
          ObSelectionStrategy _object_28 = ((RetypeObjectMutator) o_3).getObject();
          EClass _type_18 = null;
          if (_object_28!=null) {
            _type_18=_object_28.getType();
          }
          String _name_18 = null;
          if (_type_18!=null) {
            _name_18=_type_18.getName();
          }
          return _name_18;
        }
      }
    }
    EClass _type_19 = mutator.getType();
    String _name_19 = null;
    if (_type_19!=null) {
      _name_19=_type_19.getName();
    }
    return _name_19;
  }
  
  /**
   * It receives a list of commands, and returns the command with the given name in commands[0..maxindex].
   */
  private Mutator getCommand(final String name, final List<Mutator> commands, final int maxindex) {
    Mutator command = null;
    for (final Mutator mutator : commands) {
      boolean _and = false;
      String _name = mutator.getName();
      boolean _equals = false;
      if (_name!=null) {
        _equals=_name.equals(name);
      }
      if (!_equals) {
        _and = false;
      } else {
        int _indexOf = commands.indexOf(mutator);
        boolean _lessThan = (_indexOf < maxindex);
        _and = _lessThan;
      }
      if (_and) {
        command = mutator;
      }
    }
    return command;
  }
  
  /**
   * Gets the EClass list defined in the given meta-model
   */
  private List<EClass> getEClassesHelper(final List<EPackage> packages) {
    List<EClass> classes = new ArrayList<EClass>();
    for (final EPackage pck : packages) {
      {
        EList<EClassifier> _eClassifiers = pck.getEClassifiers();
        for (final EClassifier cl : _eClassifiers) {
          if ((cl instanceof EClass)) {
            classes.add(((EClass) cl));
          }
        }
        EList<EPackage> _eSubpackages = pck.getESubpackages();
        boolean _notEquals = (!Objects.equal(_eSubpackages, null));
        if (_notEquals) {
          EList<EPackage> _eSubpackages_1 = pck.getESubpackages();
          List<EClass> _eClassesHelper = this.getEClassesHelper(_eSubpackages_1);
          classes.addAll(_eClassesHelper);
        }
      }
    }
    return classes;
  }
  
  /**
   * It returns the list of classes defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EClass>
   */
  private List<EClass> getEClasses(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EPackage pck : metamodel) {
        {
          EList<EClassifier> _eClassifiers = pck.getEClassifiers();
          for (final EClassifier cl : _eClassifiers) {
            if ((cl instanceof EClass)) {
              classes.add(((EClass) cl));
            }
          }
          EList<EPackage> _eSubpackages = pck.getESubpackages();
          boolean _notEquals = (!Objects.equal(_eSubpackages, null));
          if (_notEquals) {
            EList<EPackage> _eSubpackages_1 = pck.getESubpackages();
            List<EClass> _eClassesHelper = this.getEClassesHelper(_eSubpackages_1);
            classes.addAll(_eClassesHelper);
          }
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes existing in a model.
   * @param String file containing the model
   * @return List<EClass>
   */
  private List<EClass> getModelEClasses(final String metamodelFile, final String modelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final Resource model = ModelManager.loadModel(metamodel, modelFile);
      final List<EObject> classes = ModelManager.getAllObjects(model);
      final List<EClass> ret = new ArrayList<EClass>();
      for (final EObject o : classes) {
        EClass _eClass = o.eClass();
        boolean _contains = ret.contains(_eClass);
        boolean _not = (!_contains);
        if (_not) {
          EClass _eClass_1 = o.eClass();
          ret.add(_eClass_1);
        }
      }
      return ret;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of references defined in a meta-model.
   * @param String file containing the metamodel
   * @return List<EReference>
   */
  private List<EReference> getEReferences(final String metamodelFile) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      final List<EReference> references = new ArrayList<EReference>();
      for (final EPackage pck : metamodel) {
        {
          EList<EClassifier> _eClassifiers = pck.getEClassifiers();
          for (final EClassifier cl : _eClassifiers) {
            if ((cl instanceof EClass)) {
              EList<EReference> _eReferences = ((EClass) cl).getEReferences();
              references.addAll(_eReferences);
            }
          }
          EList<EPackage> _eSubpackages = pck.getESubpackages();
          for (final EPackage spck : _eSubpackages) {
            EList<EClassifier> _eClassifiers_1 = spck.getEClassifiers();
            for (final EClassifier cl_1 : _eClassifiers_1) {
              if ((cl_1 instanceof EClass)) {
                EList<EReference> _eReferences_1 = ((EClass) cl_1).getEReferences();
                references.addAll(_eReferences_1);
              }
            }
          }
        }
      }
      return references;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes which can contain (through a containment relation) the given class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getEContainers(final String metamodelFile, final EClass eclass) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      URI _uRI = EcoreUtil.getURI(eclass);
      final List<EClassifier> containers = ModelManager.getContainerTypes(metamodel, _uRI);
      final List<EClass> classes = new ArrayList<EClass>();
      for (final EClassifier cl : containers) {
        if ((cl instanceof EClass)) {
          classes.add(((EClass) cl));
        }
      }
      return classes;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of classes which defines the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getESources(final String metamodelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getEClasses(metamodelFile);
    final List<EClass> esources = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      EStructuralFeature _eStructuralFeature = cl.getEStructuralFeature(ereferenceName);
      boolean _notEquals = (!Objects.equal(_eStructuralFeature, null));
      if (_notEquals) {
        esources.add(cl);
      }
    }
    return esources;
  }
  
  /**
   * It returns the list of classes which are pointed by the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containments
   */
  private List<EClass> getETargets(final String metamodelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getEClasses(metamodelFile);
    final List<EReference> ereferences = this.getEReferences(metamodelFile);
    final List<EClass> etargets = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      for (final EReference rl : ereferences) {
        boolean _and = false;
        String _name = cl.getName();
        EClassifier _eType = rl.getEType();
        String _name_1 = _eType.getName();
        boolean _equals = _name.equals(_name_1);
        if (!_equals) {
          _and = false;
        } else {
          String _name_2 = rl.getName();
          boolean _equals_1 = _name_2.equals(ereferenceName);
          _and = _equals_1;
        }
        if (_and) {
          etargets.add(cl);
        }
      }
    }
    return etargets;
  }
  
  /**
   * It returns the list of classes which defines the given relation.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EClass> list of containers
   */
  private List<EClass> getModelESources(final String metamodelFile, final String modelFile, final String ereferenceName) {
    final List<EClass> eclasses = this.getModelEClasses(metamodelFile, modelFile);
    final List<EClass> esources = new ArrayList<EClass>();
    for (final EClass cl : eclasses) {
      EStructuralFeature _eStructuralFeature = cl.getEStructuralFeature(ereferenceName);
      boolean _notEquals = (!Objects.equal(_eStructuralFeature, null));
      if (_notEquals) {
        esources.add(cl);
      }
    }
    return esources;
  }
  
  /**
   * It returns the list of containment references from a source class to a target class.
   * @param String file containing the metamodel
   * @param String source class name
   * @param String target class name
   * @return List<EReference> list of references
   */
  private List<EReference> getEContainmentReferences(final String metamodelFile, final String esourceclassName, final String etargetclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(esourceclassName, metamodel);
      final EClass sourceclass = ((EClass) _objectOfType);
      EObject _objectOfType_1 = ModelManager.getObjectOfType(etargetclassName, metamodel);
      final EClass targetclass = ((EClass) _objectOfType_1);
      final List<EReference> references = new ArrayList<EReference>();
      EList<EReference> _eAllReferences = sourceclass.getEAllReferences();
      for (final EReference ref : _eAllReferences) {
        boolean _and = false;
        boolean _and_1 = false;
        EClass _eReferenceType = ref.getEReferenceType();
        boolean _isSuperTypeOf = _eReferenceType.isSuperTypeOf(targetclass);
        if (!_isSuperTypeOf) {
          _and_1 = false;
        } else {
          boolean _isContainment = ref.isContainment();
          _and_1 = _isContainment;
        }
        if (!_and_1) {
          _and = false;
        } else {
          boolean _isChangeable = ref.isChangeable();
          _and = _isChangeable;
        }
        if (_and) {
          references.add(ref);
        }
      }
      return references;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It returns the list of containment references from a source class to a target class.
   * @param String file containing the metamodel
   * @param String source class name
   * @param String target class name
   * @return List<EReference> list of references
   */
  private List<EReference> getEReferences(final String metamodelFile, final String esourceclassName, final String etargetclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(esourceclassName, metamodel);
      final EClass sourceclass = ((EClass) _objectOfType);
      EObject _objectOfType_1 = ModelManager.getObjectOfType(etargetclassName, metamodel);
      final EClass targetclass = ((EClass) _objectOfType_1);
      final List<EReference> references = new ArrayList<EReference>();
      EList<EReference> _eAllReferences = sourceclass.getEAllReferences();
      for (final EReference ref : _eAllReferences) {
        EClass _eReferenceType = ref.getEReferenceType();
        boolean _isSuperTypeOf = _eReferenceType.isSuperTypeOf(targetclass);
        if (_isSuperTypeOf) {
          references.add(ref);
        }
      }
      return references;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of attributes of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EAttribute> getEAttributes(final String metamodelFile, final String eclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllAttributes();
      } else {
        return new ArrayList<EAttribute>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of attributes of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EReference> getEReferences(final String metamodelFile, final String eclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllReferences();
      } else {
        return new ArrayList<EReference>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * It return the list of structural features of a class.
   * @param String file containing the metamodel
   * @param String class name
   * @return List<EAttribute> list of attributes
   */
  private List<EStructuralFeature> getEStructuralFeatures(final String metamodelFile, final String eclassName) {
    try {
      final List<EPackage> metamodel = ModelManager.loadMetaModel(metamodelFile);
      EObject _objectOfType = ModelManager.getObjectOfType(eclassName, metamodel);
      final EClass eclass = ((EClass) _objectOfType);
      boolean _notEquals = (!Objects.equal(eclass, null));
      if (_notEquals) {
        return eclass.getEAllStructuralFeatures();
      } else {
        return new ArrayList<EStructuralFeature>();
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
