/**
 * generated by Xtext
 */
package wodel.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import manager.ModelManager;
import manager.UseGeneratorUtils;
import manager.WodelContext;
import mutatorenvironment.Block;
import mutatorenvironment.Constraint;
import mutatorenvironment.Definition;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.miniOCL.InvariantCS;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.preferences.IPreferencesService;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import wodel.dsls.WodelUtils;

/**
 * @author Pablo Gomez-Abajo - Wodel USE code generator.
 * 
 * Generates the USE code and the .properties file for
 * the seeds synthesizer.
 */
@SuppressWarnings("all")
public class WodelUseGenerator implements IGenerator {
  private static class Cardinality {
    private int min = 0;
    
    private int max = 0;
  }
  
  private String fileName;
  
  private String modelName;
  
  private String useName;
  
  private String propertiesName;
  
  private String path;
  
  private EClass root;
  
  private String dummyClassName = "Dummy";
  
  private HashMap<URI, HashMap<URI, Map.Entry<String, String>>> useReferences = new HashMap<URI, HashMap<URI, Map.Entry<String, String>>>();
  
  private int maxInteger;
  
  private int minInteger;
  
  private int maxReal;
  
  private int minReal;
  
  private int maxString;
  
  private int maxObjectsCardinality;
  
  private int maxAssociationsCardinality;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    WodelContext.setProject(null);
    WodelContext.getProject();
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _project = WodelContext.getProject();
    String _plus_1 = (_plus + _project);
    this.path = _plus_1;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorEnvironment> _filter = Iterables.<MutatorEnvironment>filter(_iterable, MutatorEnvironment.class);
    for (final MutatorEnvironment e : _filter) {
      {
        IPreferencesService _preferencesService = Platform.getPreferencesService();
        String _string = _preferencesService.getString("wodel.dsls.Wodel", "Maximum integer value", "100", null);
        int _parseInt = Integer.parseInt(_string);
        this.maxInteger = _parseInt;
        IPreferencesService _preferencesService_1 = Platform.getPreferencesService();
        String _string_1 = _preferencesService_1.getString("wodel.dsls.Wodel", "Minimum integer value", "-100", null);
        int _parseInt_1 = Integer.parseInt(_string_1);
        this.minInteger = _parseInt_1;
        IPreferencesService _preferencesService_2 = Platform.getPreferencesService();
        String _string_2 = _preferencesService_2.getString("wodel.dsls.Wodel", "Maximum real value", "100", null);
        int _parseInt_2 = Integer.parseInt(_string_2);
        this.maxReal = _parseInt_2;
        IPreferencesService _preferencesService_3 = Platform.getPreferencesService();
        String _string_3 = _preferencesService_3.getString("wodel.dsls.Wodel", "Minimum real value", "0", null);
        int _parseInt_3 = Integer.parseInt(_string_3);
        this.minReal = _parseInt_3;
        IPreferencesService _preferencesService_4 = Platform.getPreferencesService();
        String _string_4 = _preferencesService_4.getString("wodel.dsls.Wodel", "Maximum string value", "10", null);
        int _parseInt_4 = Integer.parseInt(_string_4);
        this.maxString = _parseInt_4;
        IPreferencesService _preferencesService_5 = Platform.getPreferencesService();
        String _string_5 = _preferencesService_5.getString("wodel.dsls.Wodel", "Maximum cardinality for objects value", "10", null);
        int _parseInt_5 = Integer.parseInt(_string_5);
        this.maxObjectsCardinality = _parseInt_5;
        IPreferencesService _preferencesService_6 = Platform.getPreferencesService();
        String _string_6 = _preferencesService_6.getString("wodel.dsls.Wodel", "Maximum cardinality for associations value", "10", null);
        int _parseInt_6 = Integer.parseInt(_string_6);
        this.maxAssociationsCardinality = _parseInt_6;
        URI _uRI = resource.getURI();
        String _lastSegment = _uRI.lastSegment();
        this.fileName = _lastSegment;
        String _replaceAll = this.fileName.replaceAll(".mutator", ".java");
        this.fileName = _replaceAll;
        String _replaceAll_1 = this.fileName.replaceAll(".java", "");
        this.modelName = _replaceAll_1;
        String _replaceAll_2 = this.fileName.replaceAll(".java", ".use");
        this.useName = _replaceAll_2;
        String _replaceAll_3 = this.fileName.replaceAll(".java", ".properties");
        this.propertiesName = _replaceAll_3;
        CharSequence _use = this.use(e, resource);
        CharSequence _removeComments = this.removeComments(_use, "use");
        fsa.generateFile(this.useName, _removeComments);
        CharSequence _properties = this.properties(e);
        CharSequence _removeComments_1 = this.removeComments(_properties, "properties");
        fsa.generateFile(this.propertiesName, _removeComments_1);
      }
    }
  }
  
  public CharSequence removeComments(final CharSequence contents, final String type) {
    boolean _equals = type.equals("use");
    if (_equals) {
      String _string = contents.toString();
      String _replaceAll = _string.replaceAll("--.*", "");
      return _replaceAll.replaceAll("(?m)^[ \t]*\r?\n", "");
    }
    boolean _equals_1 = type.equals("properties");
    if (_equals_1) {
      String _string_1 = contents.toString();
      String _replaceAll_1 = _string_1.replaceAll("#.*", "");
      return _replaceAll_1.replaceAll("(?m)^[ \t]*\r?\n", "");
    }
    return null;
  }
  
  public int getRandom(final int range) {
    if ((range == 1)) {
      return 0;
    }
    long _nanoTime = System.nanoTime();
    int _intValue = Long.valueOf(_nanoTime).intValue();
    int value = (_intValue % range);
    if ((value < 0)) {
      value = (value * (-1));
    }
    return value;
  }
  
  public void incContainers(final EClass eclass, final HashMap<String, WodelUseGenerator.Cardinality> classes, final List<EPackage> packages, final EClass root) {
    URI _uRI = EcoreUtil.getURI(eclass);
    List<EClassifier> containers = ModelManager.getContainerTypes(packages, _uRI);
    for (final EClassifier container : containers) {
      boolean _and = false;
      String _name = container.getName();
      String _name_1 = root.getName();
      boolean _equals = _name.equals(_name_1);
      boolean _not = (!_equals);
      if (!_not) {
        _and = false;
      } else {
        String _name_2 = container.getName();
        String _name_3 = eclass.getName();
        boolean _equals_1 = _name_2.equals(_name_3);
        boolean _not_1 = (!_equals_1);
        _and = _not_1;
      }
      if (_and) {
        String _name_4 = container.getName();
        WodelUseGenerator.Cardinality cardinality = classes.get(_name_4);
        EList<EReference> _eAllReferences = ((EClass) container).getEAllReferences();
        for (final EReference ref : _eAllReferences) {
          EClassifier _eType = ref.getEType();
          String _name_5 = _eType.getName();
          String _name_6 = eclass.getName();
          boolean _equals_2 = _name_5.equals(_name_6);
          if (_equals_2) {
            boolean _isContainment = ref.isContainment();
            if (_isContainment) {
              if ((cardinality.min == 0)) {
                cardinality.min++;
              }
            }
          }
        }
        String _name_7 = container.getName();
        classes.put(_name_7, cardinality);
        this.incContainers(((EClass) container), classes, packages, root);
      }
    }
  }
  
  public void processBlocks(final HashMap<String, WodelUseGenerator.Cardinality> classes, final HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>> blockCardinalities) {
    Set<String> _keySet = blockCardinalities.keySet();
    for (final String blockName : _keySet) {
      {
        HashMap<String, WodelUseGenerator.Cardinality> cardinality = blockCardinalities.get(blockName);
        Set<String> _keySet_1 = cardinality.keySet();
        for (final String className : _keySet_1) {
          {
            WodelUseGenerator.Cardinality cBlock = cardinality.get(className);
            WodelUseGenerator.Cardinality cMain = classes.get(className);
            if ((cBlock.min > cMain.min)) {
              cMain.min = cBlock.min;
            }
            classes.put(className, cMain);
          }
        }
      }
    }
  }
  
  public CharSequence generate(final MutatorEnvironment e, final List<EPackage> packages, final List<EClass> eclasses, final HashMap<URI, String> classNames) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# ");
    HashMap<String, WodelUseGenerator.Cardinality> classes = new HashMap<String, WodelUseGenerator.Cardinality>();
    _builder.newLineIfNotEmpty();
    {
      Set<URI> _keySet = classNames.keySet();
      for(final URI classURI : _keySet) {
        _builder.append("# ");
        WodelUseGenerator.Cardinality cardinality = new WodelUseGenerator.Cardinality();
        _builder.newLineIfNotEmpty();
        _builder.append("# ");
        _builder.append(cardinality.min = 0, "");
        _builder.newLineIfNotEmpty();
        {
          URI _uRI = EcoreUtil.getURI(this.root);
          boolean _equals = _uRI.equals(classURI);
          if (_equals) {
            _builder.append("# ");
            int _plusPlus = cardinality.min++;
            _builder.append(_plusPlus, "");
            _builder.newLineIfNotEmpty();
            _builder.append("# ");
            _builder.append(cardinality.max = 1, "");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("# ");
            _builder.append(cardinality.max = this.maxObjectsCardinality, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("# ");
        String _get = classNames.get(classURI);
        WodelUseGenerator.Cardinality _put = classes.put(_get, cardinality);
        _builder.append(_put, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Block> _blocks = e.getBlocks();
      int _size = _blocks.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("# ");
        HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>> blockCardinalities = new HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>>();
        _builder.newLineIfNotEmpty();
        {
          EList<Block> _blocks_1 = e.getBlocks();
          for(final Block b : _blocks_1) {
            _builder.append("# ");
            HashMap<String, WodelUseGenerator.Cardinality> cls = new HashMap<String, WodelUseGenerator.Cardinality>();
            _builder.newLineIfNotEmpty();
            {
              Set<URI> _keySet_1 = classNames.keySet();
              for(final URI classURI_1 : _keySet_1) {
                _builder.append("# ");
                WodelUseGenerator.Cardinality cardinality_1 = new WodelUseGenerator.Cardinality();
                _builder.newLineIfNotEmpty();
                _builder.append("# ");
                _builder.append(cardinality_1.min = 0, "");
                _builder.newLineIfNotEmpty();
                {
                  URI _uRI_1 = EcoreUtil.getURI(this.root);
                  boolean _equals_1 = _uRI_1.equals(classURI_1);
                  if (_equals_1) {
                    _builder.append("# ");
                    int _plusPlus_1 = cardinality_1.min++;
                    _builder.append(_plusPlus_1, "");
                    _builder.newLineIfNotEmpty();
                    _builder.append("# ");
                    _builder.append(cardinality_1.max = 1, "");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("# ");
                    _builder.append(cardinality_1.max = this.maxObjectsCardinality, "");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("# ");
            String _name = b.getName();
            HashMap<String, WodelUseGenerator.Cardinality> _put_1 = blockCardinalities.put(_name, cls);
            _builder.append(_put_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("#");
        this.processBlocks(classes, blockCardinalities);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      Set<URI> _keySet_2 = classNames.keySet();
      for(final URI classURI_2 : _keySet_2) {
        String useClassName = classNames.get(classURI_2);
        _builder.newLineIfNotEmpty();
        String _encodeWord = UseGeneratorUtils.encodeWord(useClassName);
        _builder.append(_encodeWord, "");
        _builder.append("_min = ");
        WodelUseGenerator.Cardinality _get_1 = classes.get(useClassName);
        _builder.append(_get_1.min, "");
        _builder.newLineIfNotEmpty();
        String _encodeWord_1 = UseGeneratorUtils.encodeWord(useClassName);
        _builder.append(_encodeWord_1, "");
        _builder.append("_max = ");
        WodelUseGenerator.Cardinality _get_2 = classes.get(useClassName);
        _builder.append(_get_2.max, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("# Associations");
    _builder.newLine();
    _builder.append("# ");
    HashMap<String, Integer> associationNames = new HashMap<String, Integer>();
    _builder.newLineIfNotEmpty();
    {
      for(final EClass eclass : eclasses) {
        _builder.append("# ");
        EPackage pck = eclass.getEPackage();
        _builder.newLineIfNotEmpty();
        _builder.append("# ");
        List<EReference> refs = eclass.getEAllReferences();
        _builder.newLineIfNotEmpty();
        {
          int _size_1 = refs.size();
          boolean _greaterThan_1 = (_size_1 > 0);
          if (_greaterThan_1) {
            {
              for(final EReference ref : refs) {
                _builder.append("# ");
                EClass _eReferenceType = ref.getEReferenceType();
                EPackage refEPackage = _eReferenceType.getEPackage();
                _builder.newLineIfNotEmpty();
                {
                  boolean _notEquals = (!Objects.equal(refEPackage, null));
                  if (_notEquals) {
                    _builder.append("# ");
                    String _name_1 = pck.getName();
                    String _plus = (_name_1 + "XxxX");
                    String _name_2 = eclass.getName();
                    String _plus_1 = (_plus + _name_2);
                    String _plus_2 = (_plus_1 + "XxxX");
                    String _name_3 = refEPackage.getName();
                    String _plus_3 = (_plus_2 + _name_3);
                    String _plus_4 = (_plus_3 + "XxxX");
                    EClassifier _eType = ref.getEType();
                    String _name_4 = _eType.getName();
                    String associationName = (_plus_4 + _name_4);
                    _builder.newLineIfNotEmpty();
                    {
                      Integer _get_3 = associationNames.get(associationName);
                      boolean _notEquals_1 = (!Objects.equal(_get_3, null));
                      if (_notEquals_1) {
                        _builder.append("# ");
                        Integer _get_4 = associationNames.get(associationName);
                        int _plus_5 = ((_get_4).intValue() + 1);
                        Integer _put_2 = associationNames.put(associationName, Integer.valueOf(_plus_5));
                        _builder.append(_put_2, "");
                        _builder.newLineIfNotEmpty();
                        _builder.append("# ");
                        String _associationName = associationName;
                        Integer _get_5 = associationNames.get(associationName);
                        String _plus_6 = associationName = (_associationName + _get_5);
                        _builder.append(_plus_6, "");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("# ");
                        Integer _put_3 = associationNames.put(associationName, Integer.valueOf(0));
                        _builder.append(_put_3, "");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("# ");
                    int min = 0;
                    _builder.newLineIfNotEmpty();
                    {
                      String _name_5 = refEPackage.getName();
                      String _plus_7 = (_name_5 + "XxxX");
                      EClassifier _eType_1 = ref.getEType();
                      String _name_6 = _eType_1.getName();
                      String _plus_8 = (_plus_7 + _name_6);
                      WodelUseGenerator.Cardinality _get_6 = classes.get(_plus_8);
                      boolean _notEquals_2 = (!Objects.equal(_get_6, null));
                      if (_notEquals_2) {
                        {
                          String _name_7 = pck.getName();
                          String _plus_9 = (_name_7 + "XxxX");
                          String _name_8 = eclass.getName();
                          String _plus_10 = (_plus_9 + _name_8);
                          WodelUseGenerator.Cardinality _get_7 = classes.get(_plus_10);
                          String _name_9 = refEPackage.getName();
                          String _plus_11 = (_name_9 + "XxxX");
                          EClassifier _eType_2 = ref.getEType();
                          String _name_10 = _eType_2.getName();
                          String _plus_12 = (_plus_11 + _name_10);
                          WodelUseGenerator.Cardinality _get_8 = classes.get(_plus_12);
                          if ((_get_7.min < _get_8.min)) {
                            _builder.append("# ");
                            String _name_11 = pck.getName();
                            String _plus_13 = (_name_11 + "XxxX");
                            String _name_12 = eclass.getName();
                            String _plus_14 = (_plus_13 + _name_12);
                            WodelUseGenerator.Cardinality _get_9 = classes.get(_plus_14);
                            _builder.append(min = _get_9.min, "");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("# ");
                            String _name_13 = refEPackage.getName();
                            String _plus_15 = (_name_13 + "XxxX");
                            EClassifier _eType_3 = ref.getEType();
                            String _name_14 = _eType_3.getName();
                            String _plus_16 = (_plus_15 + _name_14);
                            WodelUseGenerator.Cardinality _get_10 = classes.get(_plus_16);
                            _builder.append(min = _get_10.min, "");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      } else {
                        _builder.append("# ");
                        _builder.append(min = 0, "");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    String _encodeWord_2 = UseGeneratorUtils.encodeWord(associationName);
                    _builder.append(_encodeWord_2, "");
                    _builder.append("_min = ");
                    _builder.append(min, "");
                    _builder.newLineIfNotEmpty();
                    String _encodeWord_3 = UseGeneratorUtils.encodeWord(associationName);
                    _builder.append(_encodeWord_3, "");
                    _builder.append("_max = ");
                    _builder.append(this.maxAssociationsCardinality, "");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence properties(final MutatorEnvironment e) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[default]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Integer_min = ");
      _builder.append(this.minInteger, "");
      _builder.newLineIfNotEmpty();
      _builder.append("Integer_max = ");
      _builder.append(this.maxInteger, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("Real_min = ");
      _builder.append(this.minReal, "");
      _builder.newLineIfNotEmpty();
      _builder.append("Real_max = ");
      _builder.append(this.maxReal, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("String_max = ");
      _builder.append(this.maxString, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append(this.dummyClassName, "");
      _builder.append("_min = 1");
      _builder.newLineIfNotEmpty();
      _builder.append(this.dummyClassName, "");
      _builder.append("_max = 1");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("# ");
      Definition _definition = e.getDefinition();
      String _metamodel = _definition.getMetamodel();
      List<EPackage> packages = ModelManager.loadMetaModel(_metamodel);
      _builder.newLineIfNotEmpty();
      _builder.append("# ");
      List<EClass> eclasses = ModelManager.getEClasses(packages);
      _builder.newLineIfNotEmpty();
      _builder.append("# ");
      HashMap<URI, String> classNames = UseGeneratorUtils.buildClassNames(eclasses);
      _builder.newLineIfNotEmpty();
      _builder.append("# ");
      EClass _rootEClass = ModelManager.getRootEClass(packages);
      _builder.append(this.root = _rootEClass, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      CharSequence _generate = this.generate(e, packages, eclasses, classNames);
      _builder.append(_generate, "");
      _builder.newLineIfNotEmpty();
      _builder.append("aggregationcyclefreeness = on");
      _builder.newLine();
      _builder.append("forbiddensharing = on");
      _builder.newLine();
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public CharSequence use(final MutatorEnvironment e, final Resource model) {
    StringConcatenation _builder = new StringConcatenation();
    String _generateUSE = UseGeneratorUtils.generateUSE(model, e, this.modelName, this.useReferences);
    _builder.append(_generateUSE, "");
    _builder.newLineIfNotEmpty();
    int i = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<Constraint> _constraints = e.getConstraints();
      for(final Constraint constraint : _constraints) {
        {
          EList<InvariantCS> _expressions = constraint.getExpressions();
          boolean _notEquals = (!Objects.equal(_expressions, null));
          if (_notEquals) {
            {
              EList<InvariantCS> _expressions_1 = constraint.getExpressions();
              for(final InvariantCS inv : _expressions_1) {
                String constraintText = WodelUtils.getConstraintText(inv);
                _builder.newLineIfNotEmpty();
                {
                  int _length = constraintText.length();
                  boolean _greaterThan = (_length > 0);
                  if (_greaterThan) {
                    int _indexOf = constraintText.indexOf("->");
                    String feature = constraintText.substring(0, _indexOf);
                    _builder.newLineIfNotEmpty();
                    EClass eclass = constraint.getType();
                    _builder.newLineIfNotEmpty();
                    EClass featureclass = null;
                    _builder.newLineIfNotEmpty();
                    {
                      EList<EStructuralFeature> _eAllStructuralFeatures = eclass.getEAllStructuralFeatures();
                      for(final EStructuralFeature sf : _eAllStructuralFeatures) {
                        {
                          String _name = sf.getName();
                          boolean _equals = _name.equals(feature);
                          if (_equals) {
                            _builder.append("-- ");
                            EClassifier _eType = sf.getEType();
                            _builder.append(featureclass = ((EClass) _eType), "");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                    {
                      boolean _notEquals_1 = (!Objects.equal(featureclass, null));
                      if (_notEquals_1) {
                        _builder.append("inv mutcode");
                        _builder.append(i, "");
                        _builder.append(" : ");
                        String _name_1 = featureclass.getName();
                        _builder.append(_name_1, "");
                        _builder.append(".allInstances()->");
                        int _indexOf_1 = constraintText.indexOf("->");
                        int _length_1 = "->".length();
                        int _plus = (_indexOf_1 + _length_1);
                        int _length_2 = constraintText.length();
                        String _substring = constraintText.substring(_plus, _length_2);
                        _builder.append(_substring, "");
                        _builder.newLineIfNotEmpty();
                        _builder.append("-- ");
                        int _plusPlus = i++;
                        _builder.append(_plusPlus, "");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          EList<String> _rules = constraint.getRules();
          boolean _notEquals_2 = (!Objects.equal(_rules, null));
          if (_notEquals_2) {
            {
              EList<String> _rules_1 = constraint.getRules();
              for(final String rule : _rules_1) {
                {
                  int _length_3 = rule.length();
                  boolean _greaterThan_1 = (_length_3 > 0);
                  if (_greaterThan_1) {
                    int _indexOf_2 = rule.indexOf("->");
                    String feature_1 = rule.substring(0, _indexOf_2);
                    _builder.newLineIfNotEmpty();
                    EClass eclass_1 = constraint.getType();
                    _builder.newLineIfNotEmpty();
                    EClass featureclass_1 = null;
                    _builder.newLineIfNotEmpty();
                    {
                      EList<EStructuralFeature> _eAllStructuralFeatures_1 = eclass_1.getEAllStructuralFeatures();
                      for(final EStructuralFeature sf_1 : _eAllStructuralFeatures_1) {
                        {
                          String _name_2 = sf_1.getName();
                          boolean _equals_1 = _name_2.equals(feature_1);
                          if (_equals_1) {
                            _builder.append("-- ");
                            EClassifier _eType_1 = sf_1.getEType();
                            _builder.append(featureclass_1 = ((EClass) _eType_1), "");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                    {
                      boolean _notEquals_3 = (!Objects.equal(featureclass_1, null));
                      if (_notEquals_3) {
                        _builder.append("inv mutcode");
                        _builder.append(i, "");
                        _builder.append(" : ");
                        String _name_3 = featureclass_1.getName();
                        _builder.append(_name_3, "");
                        _builder.append(".allInstances()->");
                        int _indexOf_3 = rule.indexOf("->");
                        int _length_4 = "->".length();
                        int _plus_1 = (_indexOf_3 + _length_4);
                        int _length_5 = rule.length();
                        String _substring_1 = rule.substring(_plus_1, _length_5);
                        _builder.append(_substring_1, "");
                        _builder.newLineIfNotEmpty();
                        _builder.append("-- ");
                        int _plusPlus_1 = i++;
                        _builder.append(_plusPlus_1, "");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
