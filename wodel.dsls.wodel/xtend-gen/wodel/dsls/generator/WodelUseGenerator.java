/**
 * generated by Xtext
 */
package wodel.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import manager.ModelManager;
import manager.MutatorDependencies;
import manager.MutatorUtils;
import manager.UseUtils;
import manager.WodelContext;
import mutatorenvironment.AttributeCopy;
import mutatorenvironment.AttributeEvaluation;
import mutatorenvironment.AttributeEvaluationType;
import mutatorenvironment.AttributeOperation;
import mutatorenvironment.AttributeReverse;
import mutatorenvironment.AttributeScalar;
import mutatorenvironment.AttributeSet;
import mutatorenvironment.AttributeSwap;
import mutatorenvironment.AttributeType;
import mutatorenvironment.AttributeUnset;
import mutatorenvironment.Block;
import mutatorenvironment.BooleanType;
import mutatorenvironment.CloneObjectMutator;
import mutatorenvironment.CompleteTypeSelection;
import mutatorenvironment.CreateObjectMutator;
import mutatorenvironment.CreateReferenceMutator;
import mutatorenvironment.Definition;
import mutatorenvironment.DoubleType;
import mutatorenvironment.Evaluation;
import mutatorenvironment.Expression;
import mutatorenvironment.IntegerType;
import mutatorenvironment.ModifyInformationMutator;
import mutatorenvironment.ModifySourceReferenceMutator;
import mutatorenvironment.ModifyTargetReferenceMutator;
import mutatorenvironment.Mutator;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.ObSelectionStrategy;
import mutatorenvironment.ObjectAttributeType;
import mutatorenvironment.ObjectEmitter;
import mutatorenvironment.Operator;
import mutatorenvironment.OtherTypeSelection;
import mutatorenvironment.RandomTypeSelection;
import mutatorenvironment.ReferenceEvaluation;
import mutatorenvironment.ReferenceInit;
import mutatorenvironment.ReferenceSet;
import mutatorenvironment.RemoveCompleteReferenceMutator;
import mutatorenvironment.RemoveObjectMutator;
import mutatorenvironment.SelectObjectMutator;
import mutatorenvironment.SelectSampleMutator;
import mutatorenvironment.SpecificBooleanType;
import mutatorenvironment.SpecificClosureSelection;
import mutatorenvironment.SpecificDoubleType;
import mutatorenvironment.SpecificIntegerType;
import mutatorenvironment.SpecificObjectSelection;
import mutatorenvironment.SpecificStringType;
import mutatorenvironment.StringType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import wodel.dsls.scoping.WodelScopeProvider;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class WodelUseGenerator implements IGenerator {
  private static class Cardinality {
    private int min = 0;
    
    private int max = 10;
  }
  
  private static class Constraint {
    private String text = "";
    
    private HashMap<String, Integer> sizeByBlock = new HashMap<String, Integer>();
    
    private String type = "";
    
    private List<String> variables = new ArrayList<String>();
    
    private String className = "";
  }
  
  private static class Mandatory {
    private String className = "";
    
    private String featureName = "";
    
    private String value = "";
    
    private String type = "";
  }
  
  private String fileName;
  
  private String className;
  
  private String useName;
  
  private String propertiesName;
  
  private String path;
  
  private EClass root;
  
  private List<WodelUseGenerator.Mandatory> mandatories = new ArrayList<WodelUseGenerator.Mandatory>();
  
  private String dummyClassName = "Dummy";
  
  private HashMap<String, HashMap<String, String>> useReferences = new HashMap<String, HashMap<String, String>>();
  
  private HashMap<String, Boolean> closures = new HashMap<String, Boolean>();
  
  private HashMap<String, Integer> maxSize = new HashMap<String, Integer>();
  
  private MutatorDependencies mutatorDependencies;
  
  private HashMap<String, HashMap<String, List<WodelUseGenerator.Constraint>>> mutConstraint = new HashMap<String, HashMap<String, List<WodelUseGenerator.Constraint>>>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    WodelContext.setProject(null);
    WodelContext.getProject();
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _project = WodelContext.getProject();
    String _plus_1 = (_plus + _project);
    this.path = _plus_1;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorEnvironment> _filter = Iterables.<MutatorEnvironment>filter(_iterable, MutatorEnvironment.class);
    for (final MutatorEnvironment e : _filter) {
      {
        URI _uRI = resource.getURI();
        String _lastSegment = _uRI.lastSegment();
        this.fileName = _lastSegment;
        String _replaceAll = this.fileName.replaceAll(".mutator", ".java");
        this.fileName = _replaceAll;
        String _replaceAll_1 = this.fileName.replaceAll(".java", "");
        this.className = _replaceAll_1;
        String _replaceAll_2 = this.fileName.replaceAll(".java", ".use");
        this.useName = _replaceAll_2;
        String _replaceAll_3 = this.fileName.replaceAll(".java", ".properties");
        this.propertiesName = _replaceAll_3;
        CharSequence _use = this.use(e);
        CharSequence _removeComments = this.removeComments(_use, "use");
        fsa.generateFile(this.useName, _removeComments);
        CharSequence _properties = this.properties(e);
        CharSequence _removeComments_1 = this.removeComments(_properties, "properties");
        fsa.generateFile(this.propertiesName, _removeComments_1);
      }
    }
  }
  
  public CharSequence removeComments(final CharSequence contents, final String type) {
    boolean _equals = type.equals("use");
    if (_equals) {
      String _string = contents.toString();
      String _replaceAll = _string.replaceAll("--.*", "");
      return _replaceAll.replaceAll("(?m)^[ \t]*\r?\n", "");
    }
    boolean _equals_1 = type.equals("properties");
    if (_equals_1) {
      String _string_1 = contents.toString();
      String _replaceAll_1 = _string_1.replaceAll("#.*", "");
      return _replaceAll_1.replaceAll("(?m)^[ \t]*\r?\n", "");
    }
    return null;
  }
  
  public int getRandom(final int range) {
    if ((range == 1)) {
      return 0;
    }
    long _nanoTime = System.nanoTime();
    int _intValue = Long.valueOf(_nanoTime).intValue();
    int value = (_intValue % range);
    if ((value < 0)) {
      value = (value * (-1));
    }
    return value;
  }
  
  public void incContainers(final EClass eclass, final HashMap<String, WodelUseGenerator.Cardinality> classes, final List<EPackage> packages, final EClass root) {
    String _name = eclass.getName();
    List<EClassifier> containers = ModelManager.getContainerTypes(packages, _name);
    for (final EClassifier container : containers) {
      boolean _and = false;
      String _name_1 = container.getName();
      String _name_2 = root.getName();
      boolean _equals = _name_1.equals(_name_2);
      boolean _not = (!_equals);
      if (!_not) {
        _and = false;
      } else {
        String _name_3 = container.getName();
        String _name_4 = eclass.getName();
        boolean _equals_1 = _name_3.equals(_name_4);
        boolean _not_1 = (!_equals_1);
        _and = _not_1;
      }
      if (_and) {
        String _name_5 = container.getName();
        WodelUseGenerator.Cardinality cardinality = classes.get(_name_5);
        EList<EReference> _eAllReferences = ((EClass) container).getEAllReferences();
        for (final EReference ref : _eAllReferences) {
          EClassifier _eType = ref.getEType();
          String _name_6 = _eType.getName();
          String _name_7 = eclass.getName();
          boolean _equals_2 = _name_6.equals(_name_7);
          if (_equals_2) {
            boolean _isContainment = ref.isContainment();
            if (_isContainment) {
              if ((cardinality.min == 0)) {
                cardinality.min++;
              }
            }
          }
        }
        String _name_8 = container.getName();
        classes.put(_name_8, cardinality);
        this.incContainers(((EClass) container), classes, packages, root);
      }
    }
  }
  
  public WodelUseGenerator.Mandatory getMandatory(final List<WodelUseGenerator.Mandatory> mandatories, final String featureName) {
    for (final WodelUseGenerator.Mandatory mandatory : mandatories) {
      boolean _equals = mandatory.featureName.equals(featureName);
      if (_equals) {
        return mandatory;
      }
    }
    return null;
  }
  
  public void process(final HashMap<String, WodelUseGenerator.Cardinality> classes, final List<Mutator> commands, final ArrayList<EPackage> packages) {
    for (final Mutator mut : commands) {
      {
        if ((mut instanceof CreateObjectMutator)) {
          EClass _type = ((CreateObjectMutator)mut).getType();
          boolean _notEquals = (!Objects.equal(_type, null));
          if (_notEquals) {
            EClass _type_1 = ((CreateObjectMutator)mut).getType();
            String name = _type_1.getName();
            List<EClassifier> containers = ModelManager.getContainerTypes(packages, name);
            for (final EClassifier container : containers) {
              {
                EReference containerReference = null;
                EList<EReference> _eAllReferences = ((EClass) container).getEAllReferences();
                for (final EReference ref : _eAllReferences) {
                  boolean _and = false;
                  EClassifier _eType = ref.getEType();
                  String _name = _eType.getName();
                  boolean _equals = _name.equals(name);
                  if (!_equals) {
                    _and = false;
                  } else {
                    boolean _isContainment = ref.isContainment();
                    _and = _isContainment;
                  }
                  if (_and) {
                    containerReference = ref;
                  }
                }
              }
            }
          }
        }
        if ((mut instanceof RemoveObjectMutator)) {
          ObSelectionStrategy _object = ((RemoveObjectMutator)mut).getObject();
          boolean _notEquals_1 = (!Objects.equal(_object, null));
          if (_notEquals_1) {
            ObSelectionStrategy _object_1 = ((RemoveObjectMutator)mut).getObject();
            String name_1 = MutatorUtils.getTypeName(_object_1);
            boolean _containsKey = classes.containsKey(name_1);
            if (_containsKey) {
              WodelUseGenerator.Cardinality cardinality = classes.get(name_1);
              if ((cardinality.min == 0)) {
                cardinality.min++;
              }
            }
          }
        }
        if ((mut instanceof CreateReferenceMutator)) {
          ObSelectionStrategy _target = ((CreateReferenceMutator)mut).getTarget();
          boolean _notEquals_2 = (!Objects.equal(_target, null));
          if (_notEquals_2) {
            ObSelectionStrategy _target_1 = ((CreateReferenceMutator)mut).getTarget();
            String name_2 = MutatorUtils.getTypeName(_target_1);
            boolean _containsKey_1 = classes.containsKey(name_2);
            if (_containsKey_1) {
              WodelUseGenerator.Cardinality cardinality_1 = classes.get(name_2);
              if ((cardinality_1.min == 0)) {
                cardinality_1.min++;
              }
            }
          }
          ObSelectionStrategy _source = ((CreateReferenceMutator)mut).getSource();
          boolean _notEquals_3 = (!Objects.equal(_source, null));
          if (_notEquals_3) {
            ObSelectionStrategy _source_1 = ((CreateReferenceMutator)mut).getSource();
            String name_3 = MutatorUtils.getTypeName(_source_1);
            boolean _containsKey_2 = classes.containsKey(name_3);
            if (_containsKey_2) {
              WodelUseGenerator.Cardinality cardinality_2 = classes.get(name_3);
              if ((cardinality_2.min == 0)) {
                cardinality_2.min++;
              }
            }
          }
        }
        if ((mut instanceof ModifySourceReferenceMutator)) {
          ObSelectionStrategy _source_2 = ((ModifySourceReferenceMutator)mut).getSource();
          boolean _notEquals_4 = (!Objects.equal(_source_2, null));
          if (_notEquals_4) {
            ObSelectionStrategy _source_3 = ((ModifySourceReferenceMutator)mut).getSource();
            String name_4 = MutatorUtils.getTypeName(_source_3);
            boolean _containsKey_3 = classes.containsKey(name_4);
            if (_containsKey_3) {
              WodelUseGenerator.Cardinality cardinality_3 = classes.get(name_4);
              if ((cardinality_3.min == 0)) {
                cardinality_3.min++;
              }
            }
          }
          ObSelectionStrategy _newSource = ((ModifySourceReferenceMutator)mut).getNewSource();
          boolean _notEquals_5 = (!Objects.equal(_newSource, null));
          if (_notEquals_5) {
            ObSelectionStrategy _newSource_1 = ((ModifySourceReferenceMutator)mut).getNewSource();
            String name_5 = MutatorUtils.getTypeName(_newSource_1);
            boolean _containsKey_4 = classes.containsKey(name_5);
            if (_containsKey_4) {
              WodelUseGenerator.Cardinality cardinality_4 = classes.get(name_5);
              if ((cardinality_4.min == 0)) {
                cardinality_4.min++;
              }
            }
          }
        }
        if ((mut instanceof ModifyTargetReferenceMutator)) {
          ObSelectionStrategy _source_4 = ((ModifyTargetReferenceMutator)mut).getSource();
          boolean _notEquals_6 = (!Objects.equal(_source_4, null));
          if (_notEquals_6) {
            ObSelectionStrategy _source_5 = ((ModifyTargetReferenceMutator)mut).getSource();
            String name_6 = MutatorUtils.getTypeName(_source_5);
            boolean _containsKey_5 = classes.containsKey(name_6);
            if (_containsKey_5) {
              WodelUseGenerator.Cardinality cardinality_5 = classes.get(name_6);
              if ((cardinality_5.min == 0)) {
                cardinality_5.min++;
              }
            }
          }
          ObSelectionStrategy _newTarget = ((ModifyTargetReferenceMutator)mut).getNewTarget();
          boolean _notEquals_7 = (!Objects.equal(_newTarget, null));
          if (_notEquals_7) {
            ObSelectionStrategy _newTarget_1 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
            String name_7 = MutatorUtils.getTypeName(_newTarget_1);
            boolean _containsKey_6 = classes.containsKey(name_7);
            if (_containsKey_6) {
              WodelUseGenerator.Cardinality cardinality_6 = classes.get(name_7);
              if ((cardinality_6.min == 0)) {
                cardinality_6.min++;
              }
            }
          }
        }
        if ((mut instanceof RemoveCompleteReferenceMutator)) {
          EClass _type_2 = ((RemoveCompleteReferenceMutator)mut).getType();
          boolean _notEquals_8 = (!Objects.equal(_type_2, null));
          if (_notEquals_8) {
            EClass _type_3 = ((RemoveCompleteReferenceMutator)mut).getType();
            String name_8 = _type_3.getName();
            boolean _containsKey_7 = classes.containsKey(name_8);
            if (_containsKey_7) {
              WodelUseGenerator.Cardinality cardinality_7 = classes.get(name_8);
              if ((cardinality_7.min == 0)) {
                cardinality_7.min++;
              }
            }
          }
        }
        if ((mut instanceof SelectObjectMutator)) {
          ObSelectionStrategy _object_2 = ((SelectObjectMutator)mut).getObject();
          boolean _notEquals_9 = (!Objects.equal(_object_2, null));
          if (_notEquals_9) {
            ObSelectionStrategy _object_3 = ((SelectObjectMutator)mut).getObject();
            String name_9 = MutatorUtils.getTypeName(_object_3);
            boolean _containsKey_8 = classes.containsKey(name_9);
            if (_containsKey_8) {
              WodelUseGenerator.Cardinality cardinality_8 = classes.get(name_9);
              if ((cardinality_8.min == 0)) {
                cardinality_8.min++;
              }
            }
          }
        }
        if ((mut instanceof SelectSampleMutator)) {
          ObSelectionStrategy _object_4 = ((SelectSampleMutator)mut).getObject();
          boolean _notEquals_10 = (!Objects.equal(_object_4, null));
          if (_notEquals_10) {
            ObSelectionStrategy _object_5 = ((SelectSampleMutator)mut).getObject();
            String name_10 = MutatorUtils.getTypeName(_object_5);
            boolean _containsKey_9 = classes.containsKey(name_10);
            if (_containsKey_9) {
              WodelUseGenerator.Cardinality cardinality_9 = classes.get(name_10);
              if ((cardinality_9.min == 0)) {
                cardinality_9.min++;
              }
            }
          }
        }
        if ((mut instanceof CloneObjectMutator)) {
          ObSelectionStrategy _object_6 = ((CloneObjectMutator)mut).getObject();
          boolean _notEquals_11 = (!Objects.equal(_object_6, null));
          if (_notEquals_11) {
            ObSelectionStrategy _object_7 = ((CloneObjectMutator)mut).getObject();
            String name_11 = MutatorUtils.getTypeName(_object_7);
            boolean _containsKey_10 = classes.containsKey(name_11);
            if (_containsKey_10) {
              WodelUseGenerator.Cardinality cardinality_10 = classes.get(name_11);
              if ((cardinality_10.min == 0)) {
                cardinality_10.min++;
              }
            }
          }
        }
        if ((mut instanceof ModifyInformationMutator)) {
          ObSelectionStrategy _object_8 = ((ModifyInformationMutator)mut).getObject();
          boolean _notEquals_12 = (!Objects.equal(_object_8, null));
          if (_notEquals_12) {
            ObSelectionStrategy _object_9 = ((ModifyInformationMutator)mut).getObject();
            String name_12 = MutatorUtils.getTypeName(_object_9);
            boolean _containsKey_11 = classes.containsKey(name_12);
            if (_containsKey_11) {
              WodelUseGenerator.Cardinality cardinality_11 = classes.get(name_12);
              if ((cardinality_11.min == 0)) {
                cardinality_11.min++;
              }
            }
          }
        }
      }
    }
  }
  
  public void processBlocks(final HashMap<String, WodelUseGenerator.Cardinality> classes, final HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>> blockCardinalities) {
    Set<String> _keySet = blockCardinalities.keySet();
    for (final String blockName : _keySet) {
      {
        HashMap<String, WodelUseGenerator.Cardinality> cardinality = blockCardinalities.get(blockName);
        Set<String> _keySet_1 = cardinality.keySet();
        for (final String className : _keySet_1) {
          {
            WodelUseGenerator.Cardinality cBlock = cardinality.get(className);
            WodelUseGenerator.Cardinality cMain = classes.get(className);
            if ((cBlock.min > cMain.min)) {
              cMain.min = cBlock.min;
            }
            classes.put(className, cMain);
          }
        }
      }
    }
  }
  
  public CharSequence properties(final MutatorEnvironment e) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[default]");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Integer_min = -100");
      _builder.newLine();
      _builder.append("Integer_max = 100");
      _builder.newLine();
      _builder.newLine();
      _builder.append("String_max = 10");
      _builder.newLine();
      _builder.newLine();
      _builder.append(this.dummyClassName, "");
      _builder.append("_min = 1");
      _builder.newLineIfNotEmpty();
      _builder.append(this.dummyClassName, "");
      _builder.append("_max = 1");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("# ");
      Definition _definition = e.getDefinition();
      String _metamodel = _definition.getMetamodel();
      ArrayList<EPackage> packages = ModelManager.loadMetaModel(_metamodel);
      _builder.newLineIfNotEmpty();
      _builder.append("# ");
      ArrayList<EClass> eclasses = ModelManager.getEClasses(packages);
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass : eclasses) {
          _builder.append("#");
          String _name = eclass.getName();
          List<EClassifier> containerTypes = ModelManager.getContainerTypes(packages, _name);
          _builder.newLineIfNotEmpty();
          {
            int _size = containerTypes.size();
            boolean _equals = (_size == 0);
            if (_equals) {
              _builder.append("#");
              _builder.append(this.root = eclass, "");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      _builder.append("# ");
      HashMap<String, WodelUseGenerator.Cardinality> classes = new HashMap<String, WodelUseGenerator.Cardinality>();
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass_1 : eclasses) {
          _builder.append("# ");
          WodelUseGenerator.Cardinality cardinality = new WodelUseGenerator.Cardinality();
          _builder.newLineIfNotEmpty();
          _builder.append("# ");
          _builder.append(cardinality.min = 0, "");
          _builder.newLineIfNotEmpty();
          {
            String _name_1 = eclass_1.getName();
            String _name_2 = this.root.getName();
            boolean _equals_1 = _name_1.equals(_name_2);
            if (_equals_1) {
              _builder.append("# ");
              int _plusPlus = cardinality.min++;
              _builder.append(_plusPlus, "");
              _builder.newLineIfNotEmpty();
              _builder.append("# ");
              _builder.append(cardinality.max = 1, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("# ");
          String _name_3 = eclass_1.getName();
          WodelUseGenerator.Cardinality _put = classes.put(_name_3, cardinality);
          _builder.append(_put, "");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Mutator> _commands = e.getCommands();
        int _size_1 = _commands.size();
        boolean _greaterThan = (_size_1 > 0);
        if (_greaterThan) {
          _builder.append("# ");
          EList<Mutator> _commands_1 = e.getCommands();
          this.process(classes, _commands_1, packages);
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      {
        EList<Block> _blocks = e.getBlocks();
        int _size_2 = _blocks.size();
        boolean _greaterThan_1 = (_size_2 > 0);
        if (_greaterThan_1) {
          _builder.append("# ");
          HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>> blockCardinalities = new HashMap<String, HashMap<String, WodelUseGenerator.Cardinality>>();
          _builder.newLineIfNotEmpty();
          {
            EList<Block> _blocks_1 = e.getBlocks();
            for(final Block b : _blocks_1) {
              _builder.append("# ");
              HashMap<String, WodelUseGenerator.Cardinality> cls = new HashMap<String, WodelUseGenerator.Cardinality>();
              _builder.newLineIfNotEmpty();
              {
                for(final EClass eclass_2 : eclasses) {
                  _builder.append("# ");
                  WodelUseGenerator.Cardinality cardinality_1 = new WodelUseGenerator.Cardinality();
                  _builder.newLineIfNotEmpty();
                  _builder.append("# ");
                  _builder.append(cardinality_1.min = 0, "");
                  _builder.newLineIfNotEmpty();
                  {
                    String _name_4 = eclass_2.getName();
                    String _name_5 = this.root.getName();
                    boolean _equals_2 = _name_4.equals(_name_5);
                    if (_equals_2) {
                      _builder.append("# ");
                      int _plusPlus_1 = cardinality_1.min++;
                      _builder.append(_plusPlus_1, "");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("# ");
                  String _name_6 = eclass_2.getName();
                  WodelUseGenerator.Cardinality _put_1 = cls.put(_name_6, cardinality_1);
                  _builder.append(_put_1, "");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("# ");
              EList<Mutator> _commands_2 = b.getCommands();
              this.process(cls, _commands_2, packages);
              _builder.newLineIfNotEmpty();
              _builder.append("# ");
              String _name_7 = b.getName();
              HashMap<String, WodelUseGenerator.Cardinality> _put_2 = blockCardinalities.put(_name_7, cls);
              _builder.append(_put_2, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.newLine();
          _builder.append("#");
          this.processBlocks(classes, blockCardinalities);
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      {
        for(final EClass eclass_3 : eclasses) {
          String _name_8 = eclass_3.getName();
          _builder.append(_name_8, "");
          _builder.append("_min = ");
          String _name_9 = eclass_3.getName();
          WodelUseGenerator.Cardinality _get = classes.get(_name_9);
          _builder.append(_get.min, "");
          _builder.newLineIfNotEmpty();
          String _name_10 = eclass_3.getName();
          _builder.append(_name_10, "");
          _builder.append("_max = ");
          String _name_11 = eclass_3.getName();
          WodelUseGenerator.Cardinality _get_1 = classes.get(_name_11);
          _builder.append(_get_1.max, "");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("# Associations");
      _builder.newLine();
      _builder.append("# ");
      HashMap<String, Integer> associationNames = new HashMap<String, Integer>();
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass_4 : eclasses) {
          _builder.append("# ");
          List<EReference> refs = eclass_4.getEReferences();
          _builder.newLineIfNotEmpty();
          {
            int _size_3 = refs.size();
            boolean _greaterThan_2 = (_size_3 > 0);
            if (_greaterThan_2) {
              {
                for(final EReference ref : refs) {
                  _builder.append("# ");
                  String _name_12 = eclass_4.getName();
                  EClassifier _eType = ref.getEType();
                  String _name_13 = _eType.getName();
                  String associationName = (_name_12 + _name_13);
                  _builder.newLineIfNotEmpty();
                  {
                    Integer _get_2 = associationNames.get(associationName);
                    boolean _notEquals = (!Objects.equal(_get_2, null));
                    if (_notEquals) {
                      _builder.append("# ");
                      Integer _get_3 = associationNames.get(associationName);
                      int _plus = ((_get_3).intValue() + 1);
                      Integer _put_3 = associationNames.put(associationName, Integer.valueOf(_plus));
                      _builder.append(_put_3, "");
                      _builder.newLineIfNotEmpty();
                      _builder.append("# ");
                      String _associationName = associationName;
                      Integer _get_4 = associationNames.get(associationName);
                      String _plus_1 = associationName = (_associationName + _get_4);
                      _builder.append(_plus_1, "");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("# ");
                      Integer _put_4 = associationNames.put(associationName, Integer.valueOf(0));
                      _builder.append(_put_4, "");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("# ");
                  int min = 0;
                  _builder.newLineIfNotEmpty();
                  {
                    String _name_14 = eclass_4.getName();
                    WodelUseGenerator.Cardinality _get_5 = classes.get(_name_14);
                    EClassifier _eType_1 = ref.getEType();
                    String _name_15 = _eType_1.getName();
                    WodelUseGenerator.Cardinality _get_6 = classes.get(_name_15);
                    if ((_get_5.min < _get_6.min)) {
                      _builder.append("# ");
                      String _name_16 = eclass_4.getName();
                      WodelUseGenerator.Cardinality _get_7 = classes.get(_name_16);
                      _builder.append(min = _get_7.min, "");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("# ");
                      EClassifier _eType_2 = ref.getEType();
                      String _name_17 = _eType_2.getName();
                      WodelUseGenerator.Cardinality _get_8 = classes.get(_name_17);
                      _builder.append(min = _get_8.min, "");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append(associationName, "");
                  _builder.append("_min = ");
                  _builder.append(min, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append(associationName, "");
                  _builder.append("_max = 10");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void getSizeConstraints(final EClass rootClass, final EClass eclass, final List<EPackage> packages, final List<WodelUseGenerator.Constraint> constraints, final boolean inc, final EReference ref, final String blockName, final boolean isContainer) {
    try {
      WodelUseGenerator.Constraint constraint = new WodelUseGenerator.Constraint();
      String _name = eclass.getName();
      String _encodeWord = UseUtils.encodeWord(_name);
      String _plus = (_encodeWord + ".allInstances()->size()");
      constraint.text = _plus;
      constraint.type = "size";
      String _name_1 = eclass.getName();
      constraint.className = _name_1;
      String _name_2 = eclass.getName();
      String _name_3 = rootClass.getName();
      boolean _equals = _name_2.equals(_name_3);
      boolean _not = (!_equals);
      if (_not) {
        boolean b = false;
        for (final WodelUseGenerator.Constraint c : constraints) {
          boolean _equals_1 = constraint.text.equals(c.text);
          if (_equals_1) {
            b = true;
            constraint = c;
          }
        }
        if ((b == false)) {
          boolean containerInc = false;
          if ((inc == true)) {
            Integer _get = constraint.sizeByBlock.get(blockName);
            boolean _notEquals = (!Objects.equal(_get, null));
            if (_notEquals) {
              if ((isContainer == false)) {
                Integer _get_1 = constraint.sizeByBlock.get(blockName);
                int _plus_1 = ((_get_1).intValue() + 1);
                constraint.sizeByBlock.put(blockName, Integer.valueOf(_plus_1));
              }
            } else {
              if ((isContainer == false)) {
                constraint.sizeByBlock.put(blockName, Integer.valueOf(1));
              }
            }
          } else {
            constraint.sizeByBlock.put(blockName, Integer.valueOf(0));
          }
          boolean _notEquals_1 = (!Objects.equal(ref, null));
          if (_notEquals_1) {
            boolean _and = false;
            int _upperBound = ref.getUpperBound();
            boolean _notEquals_2 = (_upperBound != (-1));
            if (!_notEquals_2) {
              _and = false;
            } else {
              Integer _get_2 = constraint.sizeByBlock.get(blockName);
              int _upperBound_1 = ref.getUpperBound();
              boolean _greaterThan = ((_get_2).intValue() > _upperBound_1);
              _and = _greaterThan;
            }
            if (_and) {
              containerInc = true;
            }
          }
          constraints.add(constraint);
          String _name_4 = eclass.getName();
          List<EClassifier> containers = ModelManager.getContainerTypes(packages, _name_4);
          int _size = containers.size();
          boolean _equals_2 = (_size == 1);
          if (_equals_2) {
            EClassifier _get_3 = containers.get(0);
            EClass container = ((EClass) _get_3);
            EReference contRef = ModelManager.getContainingReference(container, eclass);
            this.getSizeConstraints(rootClass, container, packages, constraints, containerInc, contRef, blockName, true);
          }
        }
        if ((b == true)) {
          boolean containerInc_1 = false;
          Integer _get_4 = constraint.sizeByBlock.get(blockName);
          boolean _equals_3 = Objects.equal(_get_4, null);
          if (_equals_3) {
            constraint.sizeByBlock.put(blockName, Integer.valueOf(0));
          } else {
            if ((isContainer == false)) {
              Integer _get_5 = constraint.sizeByBlock.get(blockName);
              int _plus_2 = ((_get_5).intValue() + 1);
              constraint.sizeByBlock.put(blockName, Integer.valueOf(_plus_2));
            }
          }
          boolean _notEquals_3 = (!Objects.equal(ref, null));
          if (_notEquals_3) {
            boolean _and_1 = false;
            int _upperBound_2 = ref.getUpperBound();
            boolean _notEquals_4 = (_upperBound_2 != (-1));
            if (!_notEquals_4) {
              _and_1 = false;
            } else {
              Integer _get_6 = constraint.sizeByBlock.get(blockName);
              int _upperBound_3 = ref.getUpperBound();
              boolean _greaterThan_1 = ((_get_6).intValue() > _upperBound_3);
              _and_1 = _greaterThan_1;
            }
            if (_and_1) {
              containerInc_1 = true;
            }
          }
          String _name_5 = eclass.getName();
          List<EClassifier> containers_1 = ModelManager.getContainerTypes(packages, _name_5);
          int _size_1 = containers_1.size();
          boolean _equals_4 = (_size_1 == 1);
          if (_equals_4) {
            EClassifier _get_7 = containers_1.get(0);
            EClass container_1 = ((EClass) _get_7);
            EReference contRef_1 = ModelManager.getContainingReference(container_1, eclass);
            this.getSizeConstraints(rootClass, container_1, packages, constraints, containerInc_1, contRef_1, blockName, true);
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void compile(final List<Mutator> commands, final EClass rootClass, final List<EPackage> packages, final List<String> classNames, final List<WodelUseGenerator.Constraint> constraints, final String blockName) {
    for (final Mutator mut : commands) {
      {
        Integer times = this.mutatorDependencies.needsOCLConstraints(mut);
        boolean _and = false;
        boolean _notEquals = (!Objects.equal(times, null));
        if (!_notEquals) {
          _and = false;
        } else {
          _and = ((times).intValue() > 0);
        }
        if (_and) {
          String mutName = MutatorUtils.getMutatorName(mut);
          if ((mut instanceof CreateObjectMutator)) {
            EClass _type = ((CreateObjectMutator)mut).getType();
            boolean _notEquals_1 = (!Objects.equal(_type, null));
            if (_notEquals_1) {
              EClass _type_1 = ((CreateObjectMutator)mut).getType();
              String name = _type_1.getName();
              List<EClassifier> containers = ModelManager.getContainerTypes(packages, name);
              for (final EClassifier container : containers) {
                {
                  EReference containerReference = null;
                  EList<EReference> _eAllReferences = ((EClass) container).getEAllReferences();
                  for (final EReference ref : _eAllReferences) {
                    boolean _and_1 = false;
                    EClassifier _eType = ref.getEType();
                    String _name = _eType.getName();
                    boolean _equals = _name.equals(name);
                    if (!_equals) {
                      _and_1 = false;
                    } else {
                      boolean _isContainment = ref.isContainment();
                      _and_1 = _isContainment;
                    }
                    if (_and_1) {
                      containerReference = ref;
                    }
                  }
                  boolean _notEquals_2 = (!Objects.equal(containerReference, null));
                  if (_notEquals_2) {
                    String _name_1 = container.getName();
                    boolean _contains = classNames.contains(_name_1);
                    if (_contains) {
                      this.getSizeConstraints(rootClass, ((EClass) container), packages, constraints, false, null, blockName, false);
                    }
                  }
                }
              }
              EList<ReferenceSet> _references = ((CreateObjectMutator)mut).getReferences();
              boolean _notEquals_2 = (!Objects.equal(_references, null));
              if (_notEquals_2) {
                EList<ReferenceSet> _references_1 = ((CreateObjectMutator)mut).getReferences();
                this.compile(_references_1, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof RemoveObjectMutator)) {
            ObSelectionStrategy _object = ((RemoveObjectMutator)mut).getObject();
            boolean _notEquals_3 = (!Objects.equal(_object, null));
            if (_notEquals_3) {
              ObSelectionStrategy _object_1 = ((RemoveObjectMutator)mut).getObject();
              String name_1 = MutatorUtils.getTypeName(_object_1);
              boolean _contains = classNames.contains(name_1);
              if (_contains) {
                for (int i = 0; (i < (times).intValue()); i++) {
                  EClass _eClassByName = ModelManager.getEClassByName(packages, name_1);
                  this.getSizeConstraints(rootClass, _eClassByName, packages, constraints, false, null, blockName, false);
                }
              }
              ObSelectionStrategy _object_2 = ((RemoveObjectMutator)mut).getObject();
              Expression _expression = _object_2.getExpression();
              boolean _notEquals_4 = (!Objects.equal(_expression, null));
              if (_notEquals_4) {
                ObSelectionStrategy _object_3 = ((RemoveObjectMutator)mut).getObject();
                Expression _expression_1 = _object_3.getExpression();
                this.compile(_expression_1, name_1, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof CreateReferenceMutator)) {
            ObSelectionStrategy _target = ((CreateReferenceMutator)mut).getTarget();
            boolean _notEquals_5 = (!Objects.equal(_target, null));
            if (_notEquals_5) {
              ObSelectionStrategy _target_1 = ((CreateReferenceMutator)mut).getTarget();
              String name_2 = MutatorUtils.getTypeName(_target_1);
              boolean _contains_1 = classNames.contains(name_2);
              if (_contains_1) {
                EClass _eClassByName = ModelManager.getEClassByName(packages, name_2);
                this.getSizeConstraints(rootClass, _eClassByName, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _target_2 = ((CreateReferenceMutator)mut).getTarget();
              Expression _expression_2 = _target_2.getExpression();
              boolean _notEquals_6 = (!Objects.equal(_expression_2, null));
              if (_notEquals_6) {
                ObSelectionStrategy _target_3 = ((CreateReferenceMutator)mut).getTarget();
                Expression _expression_3 = _target_3.getExpression();
                this.compile(_expression_3, name_2, constraints, blockName, mutName);
              }
            }
            ObSelectionStrategy _source = ((CreateReferenceMutator)mut).getSource();
            boolean _notEquals_7 = (!Objects.equal(_source, null));
            if (_notEquals_7) {
              ObSelectionStrategy _source_1 = ((CreateReferenceMutator)mut).getSource();
              String name_3 = MutatorUtils.getTypeName(_source_1);
              boolean _contains_2 = classNames.contains(name_3);
              if (_contains_2) {
                EClass _eClassByName_1 = ModelManager.getEClassByName(packages, name_3);
                this.getSizeConstraints(rootClass, _eClassByName_1, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _source_2 = ((CreateReferenceMutator)mut).getSource();
              Expression _expression_4 = _source_2.getExpression();
              boolean _notEquals_8 = (!Objects.equal(_expression_4, null));
              if (_notEquals_8) {
                ObSelectionStrategy _source_3 = ((CreateReferenceMutator)mut).getSource();
                Expression _expression_5 = _source_3.getExpression();
                this.compile(_expression_5, name_3, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof ModifySourceReferenceMutator)) {
            ObSelectionStrategy _source_4 = ((ModifySourceReferenceMutator)mut).getSource();
            boolean _notEquals_9 = (!Objects.equal(_source_4, null));
            if (_notEquals_9) {
              ObSelectionStrategy _source_5 = ((ModifySourceReferenceMutator)mut).getSource();
              String name_4 = MutatorUtils.getTypeName(_source_5);
              boolean _contains_3 = classNames.contains(name_4);
              if (_contains_3) {
                EClass _eClassByName_2 = ModelManager.getEClassByName(packages, name_4);
                this.getSizeConstraints(rootClass, _eClassByName_2, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _source_6 = ((ModifySourceReferenceMutator)mut).getSource();
              Expression _expression_6 = _source_6.getExpression();
              boolean _notEquals_10 = (!Objects.equal(_expression_6, null));
              if (_notEquals_10) {
                ObSelectionStrategy _source_7 = ((ModifySourceReferenceMutator)mut).getSource();
                Expression _expression_7 = _source_7.getExpression();
                this.compile(_expression_7, name_4, constraints, blockName, mutName);
              }
            }
            ObSelectionStrategy _newSource = ((ModifySourceReferenceMutator)mut).getNewSource();
            boolean _notEquals_11 = (!Objects.equal(_newSource, null));
            if (_notEquals_11) {
              ObSelectionStrategy _newSource_1 = ((ModifySourceReferenceMutator)mut).getNewSource();
              String name_5 = MutatorUtils.getTypeName(_newSource_1);
              boolean _contains_4 = classNames.contains(name_5);
              if (_contains_4) {
                EClass _eClassByName_3 = ModelManager.getEClassByName(packages, name_5);
                this.getSizeConstraints(rootClass, _eClassByName_3, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _newSource_2 = ((ModifySourceReferenceMutator)mut).getNewSource();
              Expression _expression_8 = _newSource_2.getExpression();
              boolean _notEquals_12 = (!Objects.equal(_expression_8, null));
              if (_notEquals_12) {
                ObSelectionStrategy _newSource_3 = ((ModifySourceReferenceMutator)mut).getNewSource();
                Expression _expression_9 = _newSource_3.getExpression();
                this.compile(_expression_9, name_5, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof ModifyTargetReferenceMutator)) {
            ObSelectionStrategy _source_8 = ((ModifyTargetReferenceMutator)mut).getSource();
            boolean _notEquals_13 = (!Objects.equal(_source_8, null));
            if (_notEquals_13) {
              ObSelectionStrategy _source_9 = ((ModifyTargetReferenceMutator)mut).getSource();
              String name_6 = MutatorUtils.getTypeName(_source_9);
              boolean _contains_5 = classNames.contains(name_6);
              if (_contains_5) {
                EClass _eClassByName_4 = ModelManager.getEClassByName(packages, name_6);
                this.getSizeConstraints(rootClass, _eClassByName_4, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _source_10 = ((ModifyTargetReferenceMutator)mut).getSource();
              Expression _expression_10 = _source_10.getExpression();
              boolean _notEquals_14 = (!Objects.equal(_expression_10, null));
              if (_notEquals_14) {
                ObSelectionStrategy _source_11 = ((ModifyTargetReferenceMutator)mut).getSource();
                Expression _expression_11 = _source_11.getExpression();
                this.compile(_expression_11, name_6, constraints, blockName, mutName);
              }
            }
            ObSelectionStrategy _newTarget = ((ModifyTargetReferenceMutator)mut).getNewTarget();
            boolean _notEquals_15 = (!Objects.equal(_newTarget, null));
            if (_notEquals_15) {
              ObSelectionStrategy _newTarget_1 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
              String name_7 = MutatorUtils.getTypeName(_newTarget_1);
              boolean _contains_6 = classNames.contains(name_7);
              if (_contains_6) {
                ObSelectionStrategy _newTarget_2 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
                if ((_newTarget_2 instanceof OtherTypeSelection)) {
                  EClass _eClassByName_5 = ModelManager.getEClassByName(packages, name_7);
                  this.getSizeConstraints(rootClass, _eClassByName_5, packages, constraints, true, null, blockName, false);
                } else {
                  EClass _eClassByName_6 = ModelManager.getEClassByName(packages, name_7);
                  this.getSizeConstraints(rootClass, _eClassByName_6, packages, constraints, false, null, blockName, false);
                }
              }
              ObSelectionStrategy _newTarget_3 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
              Expression _expression_12 = _newTarget_3.getExpression();
              boolean _notEquals_16 = (!Objects.equal(_expression_12, null));
              if (_notEquals_16) {
                ObSelectionStrategy _newTarget_4 = ((ModifyTargetReferenceMutator)mut).getNewTarget();
                Expression _expression_13 = _newTarget_4.getExpression();
                this.compile(_expression_13, name_7, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof RemoveCompleteReferenceMutator)) {
            EClass _type_2 = ((RemoveCompleteReferenceMutator)mut).getType();
            boolean _notEquals_17 = (!Objects.equal(_type_2, null));
            if (_notEquals_17) {
              EClass _type_3 = ((RemoveCompleteReferenceMutator)mut).getType();
              String name_8 = _type_3.getName();
              boolean _contains_7 = classNames.contains(name_8);
              if (_contains_7) {
                EClass _eClassByName_7 = ModelManager.getEClassByName(packages, name_8);
                this.getSizeConstraints(rootClass, _eClassByName_7, packages, constraints, false, null, blockName, false);
              }
            }
          }
          if ((mut instanceof SelectObjectMutator)) {
            ObSelectionStrategy _object_4 = ((SelectObjectMutator)mut).getObject();
            boolean _notEquals_18 = (!Objects.equal(_object_4, null));
            if (_notEquals_18) {
              ObSelectionStrategy _object_5 = ((SelectObjectMutator)mut).getObject();
              String name_9 = MutatorUtils.getTypeName(_object_5);
              boolean _contains_8 = classNames.contains(name_9);
              if (_contains_8) {
                EClass _eClassByName_8 = ModelManager.getEClassByName(packages, name_9);
                this.getSizeConstraints(rootClass, _eClassByName_8, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _object_6 = ((SelectObjectMutator)mut).getObject();
              Expression _expression_14 = _object_6.getExpression();
              boolean _notEquals_19 = (!Objects.equal(_expression_14, null));
              if (_notEquals_19) {
                ObSelectionStrategy _object_7 = ((SelectObjectMutator)mut).getObject();
                Expression _expression_15 = _object_7.getExpression();
                this.compile(_expression_15, name_9, constraints, blockName, mutName);
              }
              ObSelectionStrategy _container = ((SelectObjectMutator)mut).getContainer();
              boolean _notEquals_20 = (!Objects.equal(_container, null));
              if (_notEquals_20) {
                ObSelectionStrategy _container_1 = ((SelectObjectMutator)mut).getContainer();
                if ((_container_1 instanceof SpecificClosureSelection)) {
                  this.closures.put(name_9, Boolean.valueOf(true));
                }
              }
            }
          }
          if ((mut instanceof SelectSampleMutator)) {
            ObSelectionStrategy _object_8 = ((SelectSampleMutator)mut).getObject();
            boolean _notEquals_21 = (!Objects.equal(_object_8, null));
            if (_notEquals_21) {
              ObSelectionStrategy _object_9 = ((SelectSampleMutator)mut).getObject();
              String name_10 = MutatorUtils.getTypeName(_object_9);
              boolean _contains_9 = classNames.contains(name_10);
              if (_contains_9) {
                EClass _eClassByName_9 = ModelManager.getEClassByName(packages, name_10);
                this.getSizeConstraints(rootClass, _eClassByName_9, packages, constraints, false, null, blockName, false);
              }
            }
          }
          if ((mut instanceof CloneObjectMutator)) {
            ObSelectionStrategy _object_10 = ((CloneObjectMutator)mut).getObject();
            boolean _notEquals_22 = (!Objects.equal(_object_10, null));
            if (_notEquals_22) {
              ObSelectionStrategy _object_11 = ((CloneObjectMutator)mut).getObject();
              String name_11 = MutatorUtils.getTypeName(_object_11);
              boolean _contains_10 = classNames.contains(name_11);
              if (_contains_10) {
                EClass _eClassByName_10 = ModelManager.getEClassByName(packages, name_11);
                this.getSizeConstraints(rootClass, _eClassByName_10, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _object_12 = ((CloneObjectMutator)mut).getObject();
              Expression _expression_16 = _object_12.getExpression();
              boolean _notEquals_23 = (!Objects.equal(_expression_16, null));
              if (_notEquals_23) {
                ObSelectionStrategy _object_13 = ((CloneObjectMutator)mut).getObject();
                Expression _expression_17 = _object_13.getExpression();
                EList<AttributeSet> _attributes = ((CloneObjectMutator)mut).getAttributes();
                this.compile(_expression_17, name_11, _attributes, constraints, blockName, mutName);
              }
            }
          }
          if ((mut instanceof ModifyInformationMutator)) {
            ObSelectionStrategy _object_14 = ((ModifyInformationMutator)mut).getObject();
            boolean _notEquals_24 = (!Objects.equal(_object_14, null));
            if (_notEquals_24) {
              ObSelectionStrategy _object_15 = ((ModifyInformationMutator)mut).getObject();
              String name_12 = MutatorUtils.getTypeName(_object_15);
              boolean _contains_11 = classNames.contains(name_12);
              if (_contains_11) {
                EClass _eClassByName_11 = ModelManager.getEClassByName(packages, name_12);
                this.getSizeConstraints(rootClass, _eClassByName_11, packages, constraints, false, null, blockName, false);
              }
              ObSelectionStrategy _object_16 = ((ModifyInformationMutator)mut).getObject();
              Expression _expression_18 = _object_16.getExpression();
              boolean _notEquals_25 = (!Objects.equal(_expression_18, null));
              if (_notEquals_25) {
                ObSelectionStrategy _object_17 = ((ModifyInformationMutator)mut).getObject();
                Expression _expression_19 = _object_17.getExpression();
                this.compile(_expression_19, name_12, constraints, blockName, mutName);
                ObSelectionStrategy _object_18 = ((ModifyInformationMutator)mut).getObject();
                Expression _expression_20 = _object_18.getExpression();
                EList<AttributeSet> _attributes_1 = ((ModifyInformationMutator)mut).getAttributes();
                this.compile(_expression_20, name_12, _attributes_1, constraints, blockName, mutName);
              }
              EList<ReferenceSet> _references_2 = ((ModifyInformationMutator)mut).getReferences();
              boolean _notEquals_26 = (!Objects.equal(_references_2, null));
              if (_notEquals_26) {
                EList<ReferenceSet> _references_3 = ((ModifyInformationMutator)mut).getReferences();
                this.compile(_references_3, constraints, blockName, mutName);
              }
            }
          }
        }
      }
    }
  }
  
  public String getUniqueName(final String newName, final List<String> names, final int n) {
    String returnName = newName;
    ArrayList<String> nextNames = new ArrayList<String>();
    int _size = names.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      boolean _contains = names.contains(newName);
      if (_contains) {
        returnName = (newName + Integer.valueOf(n));
        nextNames.addAll(names);
        nextNames.remove(newName);
        String _uniqueName = this.getUniqueName(returnName, nextNames, (n + 1));
        returnName = _uniqueName;
      }
    }
    return returnName;
  }
  
  public int maxSize(final WodelUseGenerator.Constraint constraint) {
    int max = 0;
    Set<String> _keySet = constraint.sizeByBlock.keySet();
    for (final String blockName : _keySet) {
      Integer _get = constraint.sizeByBlock.get(blockName);
      boolean _greaterThan = ((_get).intValue() > max);
      if (_greaterThan) {
        Integer _get_1 = constraint.sizeByBlock.get(blockName);
        max = (_get_1).intValue();
      }
    }
    return max;
  }
  
  public CharSequence use(final MutatorEnvironment e) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("   \t");
      _builder.append("model ");
      String _encodeWord = UseUtils.encodeWord(this.className);
      _builder.append(_encodeWord, "   \t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      Definition _definition = e.getDefinition();
      String _metamodel = _definition.getMetamodel();
      ArrayList<EPackage> packages = ModelManager.loadMetaModel(_metamodel);
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      ArrayList<EClass> classes = ModelManager.getEClasses(packages);
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      ArrayList<String> classNames = new ArrayList<String>();
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      List<WodelUseGenerator.Constraint> constraints = new ArrayList<WodelUseGenerator.Constraint>();
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass : classes) {
          _builder.append("\t");
          _builder.append("--");
          String _name = eclass.getName();
          List<EClassifier> containerTypes = ModelManager.getContainerTypes(packages, _name);
          _builder.newLineIfNotEmpty();
          {
            int _size = containerTypes.size();
            boolean _equals = (_size == 0);
            if (_equals) {
              _builder.append("\t");
              _builder.append("--");
              _builder.append(this.root = eclass, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("-- ");
          String _name_1 = eclass.getName();
          boolean _add = classNames.add(_name_1);
          _builder.append(_add, "\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("-- ");
          String _name_2 = eclass.getName();
          Boolean _put = this.closures.put(_name_2, Boolean.valueOf(false));
          _builder.append(_put, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-- ");
      _builder.newLine();
      {
        for(final EClass eclass_1 : classes) {
          _builder.append("\t");
          _builder.append("--");
          ArrayList<String> superclasses = new ArrayList<String>();
          _builder.newLineIfNotEmpty();
          {
            EList<EClass> _eSuperTypes = eclass_1.getESuperTypes();
            for(final EClass superclass : _eSuperTypes) {
              _builder.append("\t");
              _builder.append("--");
              String _name_3 = superclass.getName();
              boolean _add_1 = superclasses.add(_name_3);
              _builder.append(_add_1, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("--");
          String superclassestext = "";
          _builder.newLineIfNotEmpty();
          {
            int _size_1 = superclasses.size();
            boolean _greaterThan = (_size_1 > 0);
            if (_greaterThan) {
              _builder.append("\t");
              _builder.append("--");
              String _get = superclasses.get(0);
              _builder.append(superclassestext = _get, "\t");
              _builder.newLineIfNotEmpty();
              {
                int _size_2 = superclasses.size();
                boolean _greaterThan_1 = (_size_2 > 1);
                if (_greaterThan_1) {
                  {
                    int _size_3 = superclasses.size();
                    int _minus = (_size_3 - 1);
                    List<String> _subList = superclasses.subList(1, _minus);
                    for(final String superclassname : _subList) {
                      _builder.append("\t");
                      _builder.append("--");
                      _builder.append(superclassestext = ((superclassestext + ", ") + superclassname), "\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("\t");
              _builder.append("class ");
              String _name_4 = eclass_1.getName();
              String _encodeWord_1 = UseUtils.encodeWord(_name_4);
              _builder.append(_encodeWord_1, "\t");
              _builder.append(" < ");
              String _encodeWord_2 = UseUtils.encodeWord(superclassestext);
              _builder.append(_encodeWord_2, "\t");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("class ");
              String _name_5 = eclass_1.getName();
              String _encodeWord_3 = UseUtils.encodeWord(_name_5);
              _builder.append(_encodeWord_3, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("-- ");
          List<EAttribute> atts = eclass_1.getEAttributes();
          _builder.newLineIfNotEmpty();
          {
            int _size_4 = atts.size();
            boolean _greaterThan_2 = (_size_4 > 0);
            if (_greaterThan_2) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("attributes");
              _builder.newLine();
              {
                for(final EAttribute att : atts) {
                  {
                    EClassifier _eType = att.getEType();
                    String _name_6 = _eType.getName();
                    boolean _equals_1 = _name_6.equals("EString");
                    if (_equals_1) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      String _name_7 = att.getName();
                      String _encodeWord_4 = UseUtils.encodeWord(_name_7);
                      _builder.append(_encodeWord_4, "\t\t\t");
                      _builder.append(" : String");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EClassifier _eType_1 = att.getEType();
                    String _name_8 = _eType_1.getName();
                    boolean _equals_2 = _name_8.equals("EBoolean");
                    if (_equals_2) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      String _name_9 = att.getName();
                      String _encodeWord_5 = UseUtils.encodeWord(_name_9);
                      _builder.append(_encodeWord_5, "\t\t\t");
                      _builder.append(" : Boolean");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EClassifier _eType_2 = att.getEType();
                    String _name_10 = _eType_2.getName();
                    boolean _equals_3 = _name_10.equals("EInt");
                    if (_equals_3) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      String _name_11 = att.getName();
                      String _encodeWord_6 = UseUtils.encodeWord(_name_11);
                      _builder.append(_encodeWord_6, "\t\t\t");
                      _builder.append(" : Integer");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EClassifier _eType_3 = att.getEType();
                    String _name_12 = _eType_3.getName();
                    boolean _equals_4 = _name_12.equals("EDouble");
                    if (_equals_4) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      String _name_13 = att.getName();
                      String _encodeWord_7 = UseUtils.encodeWord(_name_13);
                      _builder.append(_encodeWord_7, "\t\t\t");
                      _builder.append(" : Double");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          _builder.append("\t");
          _builder.append("end");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-- ");
      String _uniqueName = this.getUniqueName(this.dummyClassName, classNames, 0);
      _builder.append(this.dummyClassName = _uniqueName, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("class ");
      String _encodeWord_8 = UseUtils.encodeWord(this.dummyClassName);
      _builder.append(_encodeWord_8, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("end");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      {
        for(final EClass eclass_2 : classes) {
          {
            EList<EAttribute> _eAllAttributes = eclass_2.getEAllAttributes();
            for(final EAttribute att_1 : _eAllAttributes) {
              {
                int _lowerBound = att_1.getLowerBound();
                boolean _greaterThan_3 = (_lowerBound > 0);
                if (_greaterThan_3) {
                  _builder.append("\t");
                  _builder.append("-- ");
                  WodelUseGenerator.Constraint constraint = new WodelUseGenerator.Constraint();
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("-- ");
                  String _name_14 = eclass_2.getName();
                  String _encodeWord_9 = UseUtils.encodeWord(_name_14);
                  String _plus = (_encodeWord_9 + ".allInstances()->forAll(");
                  String _name_15 = eclass_2.getName();
                  String _substring = _name_15.substring(0, 1);
                  String _lowerCase = _substring.toLowerCase();
                  String _plus_1 = (_plus + _lowerCase);
                  String _plus_2 = (_plus_1 + " | ");
                  String _name_16 = eclass_2.getName();
                  String _substring_1 = _name_16.substring(0, 1);
                  String _lowerCase_1 = _substring_1.toLowerCase();
                  String _plus_3 = (_plus_2 + _lowerCase_1);
                  String _plus_4 = (_plus_3 + ".");
                  String _name_17 = att_1.getName();
                  String _encodeWord_10 = UseUtils.encodeWord(_name_17);
                  String _plus_5 = (_plus_4 + _encodeWord_10);
                  String _plus_6 = (_plus_5 + " <> null)");
                  _builder.append(constraint.text = _plus_6, "\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("-- ");
                  _builder.append(constraint.type = "forAll", "\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("-- ");
                  String _name_18 = eclass_2.getName();
                  String _substring_2 = _name_18.substring(0, 1);
                  String _lowerCase_2 = _substring_2.toLowerCase();
                  boolean _add_2 = constraint.variables.add(_lowerCase_2);
                  _builder.append(_add_2, "\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("-- ");
                  String _name_19 = eclass_2.getName();
                  _builder.append(constraint.className = _name_19, "\t");
                  _builder.newLineIfNotEmpty();
                  {
                    WodelUseGenerator.Constraint _constraint = this.getConstraint(constraints, constraint);
                    boolean _equals_5 = Objects.equal(_constraint, null);
                    if (_equals_5) {
                      _builder.append("\t");
                      _builder.append("-- ");
                      boolean _add_3 = constraints.add(constraint);
                      _builder.append(_add_3, "\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        EList<Mutator> _commands = e.getCommands();
        int _size_5 = _commands.size();
        boolean _greaterThan_4 = (_size_5 > 0);
        if (_greaterThan_4) {
          _builder.append("\t");
          _builder.append("-- ");
          EList<Mutator> _commands_1 = e.getCommands();
          MutatorDependencies _mutatorDependencies = new MutatorDependencies(_commands_1);
          _builder.append(this.mutatorDependencies = _mutatorDependencies, "\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          EList<Mutator> _commands_2 = e.getCommands();
          this.compile(_commands_2, this.root, packages, classNames, constraints, "MAIN");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      {
        EList<Block> _blocks = e.getBlocks();
        int _size_6 = _blocks.size();
        boolean _greaterThan_5 = (_size_6 > 0);
        if (_greaterThan_5) {
          {
            EList<Block> _blocks_1 = e.getBlocks();
            for(final Block b : _blocks_1) {
              _builder.append("\t");
              _builder.append("-- ");
              EList<Mutator> _commands_3 = b.getCommands();
              MutatorDependencies _mutatorDependencies_1 = new MutatorDependencies(_commands_3);
              _builder.append(this.mutatorDependencies = _mutatorDependencies_1, "\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              EList<Mutator> _commands_4 = b.getCommands();
              String _name_20 = b.getName();
              this.compile(_commands_4, this.root, packages, classNames, constraints, _name_20);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-- Associations");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-- ");
      HashMap<String, Integer> associationNames = new HashMap<String, Integer>();
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      HashMap<String, Integer> roleNames = new HashMap<String, Integer>();
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("-- ");
      List<EReference> references = new ArrayList<EReference>();
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass_3 : classes) {
          _builder.append("\t");
          _builder.append("-- ");
          List<EReference> refs = eclass_3.getEReferences();
          _builder.newLineIfNotEmpty();
          {
            int _size_7 = refs.size();
            boolean _greaterThan_6 = (_size_7 > 0);
            if (_greaterThan_6) {
              {
                for(final EReference ref : refs) {
                  _builder.append("\t");
                  _builder.append("-- ");
                  boolean _add_4 = references.add(ref);
                  _builder.append(_add_4, "\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("-- ");
                  String _name_21 = eclass_3.getName();
                  EClassifier _eType_4 = ref.getEType();
                  String _name_22 = _eType_4.getName();
                  String associationName = (_name_21 + _name_22);
                  _builder.newLineIfNotEmpty();
                  {
                    Integer _get_1 = associationNames.get(associationName);
                    boolean _notEquals = (!Objects.equal(_get_1, null));
                    if (_notEquals) {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _get_2 = associationNames.get(associationName);
                      int _plus_7 = ((_get_2).intValue() + 1);
                      Integer _put_1 = associationNames.put(associationName, Integer.valueOf(_plus_7));
                      _builder.append(_put_1, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      String _associationName = associationName;
                      Integer _get_3 = associationNames.get(associationName);
                      String _plus_8 = associationName = (_associationName + _get_3);
                      _builder.append(_plus_8, "\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _put_2 = associationNames.put(associationName, Integer.valueOf(0));
                      _builder.append(_put_2, "\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t");
                  _builder.append("-- ");
                  String _name_23 = eclass_3.getName();
                  String _lowerCase_3 = _name_23.toLowerCase();
                  EClassifier _eType_5 = ref.getEType();
                  String _name_24 = _eType_5.getName();
                  String _lowerCase_4 = _name_24.toLowerCase();
                  String srcRoleName = (_lowerCase_3 + _lowerCase_4);
                  _builder.newLineIfNotEmpty();
                  {
                    Integer _get_4 = roleNames.get(srcRoleName);
                    boolean _notEquals_1 = (!Objects.equal(_get_4, null));
                    if (_notEquals_1) {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _get_5 = roleNames.get(srcRoleName);
                      int _plus_9 = ((_get_5).intValue() + 1);
                      Integer _put_3 = roleNames.put(srcRoleName, Integer.valueOf(_plus_9));
                      _builder.append(_put_3, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      String _srcRoleName = srcRoleName;
                      Integer _get_6 = roleNames.get(srcRoleName);
                      String _plus_10 = srcRoleName = (_srcRoleName + _get_6);
                      _builder.append(_plus_10, "\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _put_4 = roleNames.put(srcRoleName, Integer.valueOf(0));
                      _builder.append(_put_4, "\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t");
                  _builder.append("-- ");
                  String tarRoleName = ref.getName();
                  _builder.newLineIfNotEmpty();
                  {
                    Integer _get_7 = roleNames.get(tarRoleName);
                    boolean _notEquals_2 = (!Objects.equal(_get_7, null));
                    if (_notEquals_2) {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _get_8 = roleNames.get(tarRoleName);
                      int _plus_11 = ((_get_8).intValue() + 1);
                      Integer _put_5 = roleNames.put(tarRoleName, Integer.valueOf(_plus_11));
                      _builder.append(_put_5, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      String _tarRoleName = tarRoleName;
                      Integer _get_9 = roleNames.get(tarRoleName);
                      String _plus_12 = tarRoleName = (_tarRoleName + _get_9);
                      _builder.append(_plus_12, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      HashMap<String, String> useReference = null;
                      _builder.newLineIfNotEmpty();
                      {
                        String _name_25 = eclass_3.getName();
                        HashMap<String, String> _get_10 = this.useReferences.get(_name_25);
                        boolean _notEquals_3 = (!Objects.equal(_get_10, null));
                        if (_notEquals_3) {
                          _builder.append("\t");
                          _builder.append("-- ");
                          String _name_26 = eclass_3.getName();
                          HashMap<String, String> _get_11 = this.useReferences.get(_name_26);
                          _builder.append(useReference = _get_11, "\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t");
                          _builder.append("-- ");
                          HashMap<String, String> _hashMap = new HashMap<String, String>();
                          _builder.append(useReference = _hashMap, "\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append("\t");
                      _builder.append("-- ");
                      String _name_27 = ref.getName();
                      String _put_6 = useReference.put(_name_27, tarRoleName);
                      _builder.append(_put_6, "\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      String _name_28 = eclass_3.getName();
                      HashMap<String, String> _put_7 = this.useReferences.put(_name_28, useReference);
                      _builder.append(_put_7, "\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t");
                      _builder.append("-- ");
                      Integer _put_8 = roleNames.put(tarRoleName, Integer.valueOf(0));
                      _builder.append(_put_8, "\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    boolean _isContainment = ref.isContainment();
                    boolean _equals_6 = (_isContainment == false);
                    if (_equals_6) {
                      _builder.append("\t");
                      _builder.append("association ");
                      String _encodeWord_11 = UseUtils.encodeWord(associationName);
                      _builder.append(_encodeWord_11, "\t");
                      _builder.append(" between");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    boolean _isContainment_1 = ref.isContainment();
                    boolean _equals_7 = (_isContainment_1 == true);
                    if (_equals_7) {
                      _builder.append("\t");
                      _builder.append("composition ");
                      String _encodeWord_12 = UseUtils.encodeWord(associationName);
                      _builder.append(_encodeWord_12, "\t");
                      _builder.append(" between");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t");
                  _builder.append("\t");
                  String _name_29 = eclass_3.getName();
                  String _encodeWord_13 = UseUtils.encodeWord(_name_29);
                  _builder.append(_encodeWord_13, "\t\t");
                  _builder.append("[*] role ");
                  String _encodeWord_14 = UseUtils.encodeWord(srcRoleName);
                  _builder.append(_encodeWord_14, "\t\t");
                  _builder.newLineIfNotEmpty();
                  {
                    boolean _and = false;
                    int _lowerBound_1 = ref.getLowerBound();
                    boolean _equals_8 = (_lowerBound_1 == 0);
                    if (!_equals_8) {
                      _and = false;
                    } else {
                      int _upperBound = ref.getUpperBound();
                      boolean _equals_9 = (_upperBound == (-1));
                      _and = _equals_9;
                    }
                    if (_and) {
                      _builder.append("\t");
                      EClassifier _eType_6 = ref.getEType();
                      String _name_30 = _eType_6.getName();
                      String _encodeWord_15 = UseUtils.encodeWord(_name_30);
                      _builder.append(_encodeWord_15, "\t");
                      _builder.append("[*] role ");
                      String _encodeWord_16 = UseUtils.encodeWord(tarRoleName);
                      _builder.append(_encodeWord_16, "\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      int _upperBound_1 = ref.getUpperBound();
                      boolean _equals_10 = (_upperBound_1 == (-1));
                      if (_equals_10) {
                        _builder.append("\t");
                        EClassifier _eType_7 = ref.getEType();
                        String _name_31 = _eType_7.getName();
                        String _encodeWord_17 = UseUtils.encodeWord(_name_31);
                        _builder.append(_encodeWord_17, "\t");
                        _builder.append("[");
                        int _lowerBound_2 = ref.getLowerBound();
                        _builder.append(_lowerBound_2, "\t");
                        _builder.append("..*] role ");
                        String _encodeWord_18 = UseUtils.encodeWord(tarRoleName);
                        _builder.append(_encodeWord_18, "\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        int _lowerBound_3 = ref.getLowerBound();
                        int _upperBound_2 = ref.getUpperBound();
                        boolean _notEquals_4 = (_lowerBound_3 != _upperBound_2);
                        if (_notEquals_4) {
                          _builder.append("\t");
                          EClassifier _eType_8 = ref.getEType();
                          String _name_32 = _eType_8.getName();
                          String _encodeWord_19 = UseUtils.encodeWord(_name_32);
                          _builder.append(_encodeWord_19, "\t");
                          _builder.append("[");
                          int _lowerBound_4 = ref.getLowerBound();
                          _builder.append(_lowerBound_4, "\t");
                          _builder.append("..");
                          int _upperBound_3 = ref.getUpperBound();
                          _builder.append(_upperBound_3, "\t");
                          _builder.append("] role ");
                          String _encodeWord_20 = UseUtils.encodeWord(tarRoleName);
                          _builder.append(_encodeWord_20, "\t");
                          _builder.newLineIfNotEmpty();
                        } else {
                          int _lowerBound_5 = ref.getLowerBound();
                          int _upperBound_4 = ref.getUpperBound();
                          boolean _equals_11 = (_lowerBound_5 == _upperBound_4);
                          if (_equals_11) {
                            _builder.append("\t");
                            EClassifier _eType_9 = ref.getEType();
                            String _name_33 = _eType_9.getName();
                            String _encodeWord_21 = UseUtils.encodeWord(_name_33);
                            _builder.append(_encodeWord_21, "\t");
                            _builder.append("[");
                            int _lowerBound_6 = ref.getLowerBound();
                            _builder.append(_lowerBound_6, "\t");
                            _builder.append("] role ");
                            String _encodeWord_22 = UseUtils.encodeWord(tarRoleName);
                            _builder.append(_encodeWord_22, "\t");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                  _builder.append("\t");
                  _builder.append("end");
                  _builder.newLine();
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("constraints");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("context ");
      _builder.append(this.dummyClassName, "\t");
      _builder.newLineIfNotEmpty();
      {
        for(final EClass eclass_4 : classes) {
          _builder.append("\t");
          _builder.append("-- ");
          List<EAnnotation> annotations = eclass_4.getEAnnotations();
          _builder.newLineIfNotEmpty();
          {
            int _size_8 = annotations.size();
            boolean _greaterThan_7 = (_size_8 > 0);
            if (_greaterThan_7) {
              {
                for(final EAnnotation a : annotations) {
                  {
                    String _source = a.getSource();
                    boolean _equals_12 = _source.equals("http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot");
                    if (_equals_12) {
                      _builder.append("\t");
                      _builder.append("-- ");
                      EMap<String, String> oclmap = a.getDetails();
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("-- ");
                      Set<String> keys = oclmap.keySet();
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_9 = keys.size();
                        boolean _greaterThan_8 = (_size_9 > 0);
                        if (_greaterThan_8) {
                          {
                            for(final String key : keys) {
                              _builder.append("\t");
                              _builder.append("-- ");
                              String ocl = oclmap.get(key);
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("-- ");
                              int _indexOf = ocl.indexOf("self.");
                              int _length = "self.".length();
                              int _plus_13 = (_indexOf + _length);
                              int _indexOf_1 = ocl.indexOf("->");
                              String refName = ocl.substring(_plus_13, _indexOf_1);
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t");
                              _builder.append("-- ");
                              WodelUseGenerator.Constraint constraint_1 = new WodelUseGenerator.Constraint();
                              _builder.newLineIfNotEmpty();
                              {
                                EList<EReference> _eReferences = eclass_4.getEReferences();
                                for(final EReference ref_1 : _eReferences) {
                                  {
                                    String _name_34 = ref_1.getName();
                                    boolean _equals_13 = _name_34.equals(refName);
                                    if (_equals_13) {
                                      _builder.append("\t");
                                      _builder.append("-- ");
                                      EClassifier _eType_10 = ref_1.getEType();
                                      String _name_35 = _eType_10.getName();
                                      String _plus_14 = (_name_35 + ".allInstances()");
                                      String _replace = ocl.replace(("self." + refName), _plus_14);
                                      _builder.append(constraint_1.text = _replace, "\t");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("\t");
                                      _builder.append("-- ");
                                      _builder.append(constraint_1.type = "metamodel", "\t");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("\t");
                                      _builder.append("-- ");
                                      EClassifier _eType_11 = ref_1.getEType();
                                      String _name_36 = _eType_11.getName();
                                      _builder.append(constraint_1.className = _name_36, "\t");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        boolean _or = false;
                                        int _indexOf_2 = constraint_1.text.indexOf("exists");
                                        boolean _notEquals_5 = (_indexOf_2 != (-1));
                                        if (_notEquals_5) {
                                          _or = true;
                                        } else {
                                          int _indexOf_3 = constraint_1.text.indexOf("one");
                                          boolean _notEquals_6 = (_indexOf_3 != (-1));
                                          _or = _notEquals_6;
                                        }
                                        if (_or) {
                                          _builder.append("\t");
                                          _builder.append("-- ");
                                          WodelUseGenerator.Mandatory mandatory = new WodelUseGenerator.Mandatory();
                                          _builder.newLineIfNotEmpty();
                                          {
                                            int _indexOf_4 = constraint_1.text.indexOf("exists");
                                            boolean _notEquals_7 = (_indexOf_4 != (-1));
                                            if (_notEquals_7) {
                                              _builder.append("\t");
                                              _builder.append("-- ");
                                              _builder.append(mandatory.type = "exists", "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                          {
                                            int _indexOf_5 = constraint_1.text.indexOf("one");
                                            boolean _notEquals_8 = (_indexOf_5 != (-1));
                                            if (_notEquals_8) {
                                              _builder.append("\t");
                                              _builder.append("-- ");
                                              _builder.append(mandatory.type = "one", "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                          _builder.append("\t");
                                          _builder.append("-- ");
                                          EClassifier _eType_12 = ref_1.getEType();
                                          String _name_37 = _eType_12.getName();
                                          _builder.append(mandatory.className = _name_37, "\t");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("\t");
                                          _builder.append("-- ");
                                          int _lastIndexOf = constraint_1.text.lastIndexOf(".");
                                          int _plus_15 = (_lastIndexOf + 1);
                                          int _lastIndexOf_1 = constraint_1.text.lastIndexOf(")");
                                          String clause = constraint_1.text.substring(_plus_15, _lastIndexOf_1);
                                          _builder.newLineIfNotEmpty();
                                          {
                                            boolean _and_1 = false;
                                            int _lastIndexOf_2 = constraint_1.text.lastIndexOf(".");
                                            int _lastIndexOf_3 = constraint_1.text.lastIndexOf("|");
                                            boolean _greaterThan_9 = (_lastIndexOf_2 > _lastIndexOf_3);
                                            if (!_greaterThan_9) {
                                              _and_1 = false;
                                            } else {
                                              int _lastIndexOf_4 = constraint_1.text.lastIndexOf(".");
                                              int _lastIndexOf_5 = constraint_1.text.lastIndexOf("=");
                                              boolean _lessThan = (_lastIndexOf_4 < _lastIndexOf_5);
                                              _and_1 = _lessThan;
                                            }
                                            if (_and_1) {
                                              {
                                                int _indexOf_6 = clause.indexOf("=");
                                                boolean _notEquals_9 = (_indexOf_6 != (-1));
                                                if (_notEquals_9) {
                                                  _builder.append("\t");
                                                  _builder.append("--");
                                                  String[] clauseParts = clause.split("=");
                                                  _builder.newLineIfNotEmpty();
                                                  _builder.append("\t");
                                                  _builder.append("--");
                                                  int j = 0;
                                                  _builder.newLineIfNotEmpty();
                                                  {
                                                    for(final String clausePart : clauseParts) {
                                                      _builder.append("\t");
                                                      _builder.append("--");
                                                      String _trim = clausePart.trim();
                                                      String _set = clauseParts[j] = _trim;
                                                      _builder.append(_set, "\t");
                                                      _builder.newLineIfNotEmpty();
                                                      _builder.append("\t");
                                                      _builder.append("--");
                                                      int _plusPlus = j++;
                                                      _builder.append(_plusPlus, "\t");
                                                      _builder.newLineIfNotEmpty();
                                                    }
                                                  }
                                                  _builder.append("\t");
                                                  _builder.append("-- ");
                                                  String _get_12 = clauseParts[0];
                                                  _builder.append(mandatory.featureName = _get_12, "\t");
                                                  _builder.newLineIfNotEmpty();
                                                  _builder.append("\t");
                                                  _builder.append("-- ");
                                                  String _get_13 = clauseParts[1];
                                                  _builder.append(mandatory.value = _get_13, "\t");
                                                  _builder.newLineIfNotEmpty();
                                                } else {
                                                  _builder.append("\t");
                                                  _builder.append("-- ");
                                                  _builder.append(mandatory.featureName = clause, "\t");
                                                  _builder.newLineIfNotEmpty();
                                                  _builder.append("\t");
                                                  _builder.append("-- ");
                                                  _builder.append(mandatory.value = "true", "\t");
                                                  _builder.newLineIfNotEmpty();
                                                }
                                              }
                                            } else {
                                              _builder.append("\t");
                                              _builder.append("-- ");
                                              String _replace_1 = constraint_1.text.replace(clause, (clause + " = true"));
                                              _builder.append(constraint_1.text = _replace_1, "\t");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("\t");
                                              _builder.append("-- ");
                                              _builder.append(mandatory.featureName = clause, "\t");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("\t");
                                              _builder.append("-- ");
                                              _builder.append(mandatory.value = "true", "\t");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                          _builder.append("\t");
                                          _builder.append("-- ");
                                          boolean _add_5 = this.mandatories.add(mandatory);
                                          _builder.append(_add_5, "\t");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                      {
                                        WodelUseGenerator.Constraint _constraint_1 = this.getConstraint(constraints, constraint_1);
                                        boolean _equals_14 = Objects.equal(_constraint_1, null);
                                        if (_equals_14) {
                                          _builder.append("\t");
                                          _builder.append("-- ");
                                          boolean _add_6 = constraints.add(constraint_1);
                                          _builder.append(_add_6, "\t");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      String _compositionConstraint = UseUtils.compositionConstraint(references);
      _builder.append(_compositionConstraint, "\t");
      _builder.newLineIfNotEmpty();
      {
        for(final EReference ref_2 : references) {
          _builder.append("\t");
          String _compositionConstraint_1 = UseUtils.compositionConstraint(ref_2);
          _builder.append(_compositionConstraint_1, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("-- ");
      int i = 0;
      _builder.newLineIfNotEmpty();
      {
        for(final WodelUseGenerator.Constraint constraint_2 : constraints) {
          _builder.append("\t");
          _builder.append("-- ");
          int _plusPlus_1 = i++;
          _builder.append(_plusPlus_1, "\t");
          _builder.newLineIfNotEmpty();
          {
            boolean _equals_15 = constraint_2.type.equals("size");
            if (_equals_15) {
              _builder.append("\t");
              _builder.append("inv mut");
              _builder.append(i, "\t");
              _builder.append(" : ");
              _builder.append(constraint_2.text, "\t");
              _builder.append(" > ");
              int _maxSize = this.maxSize(constraint_2);
              _builder.append(_maxSize, "\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("-- ");
              int _indexOf_7 = constraint_2.text.indexOf(".");
              String _substring_3 = constraint_2.text.substring(0, _indexOf_7);
              int _maxSize_1 = this.maxSize(constraint_2);
              int _plus_16 = (_maxSize_1 + 1);
              Integer _put_9 = this.maxSize.put(_substring_3, Integer.valueOf(_plus_16));
              _builder.append(_put_9, "\t");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("inv mut");
              _builder.append(i, "\t");
              _builder.append(" : ");
              _builder.append(constraint_2.text, "\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public boolean isChanged(final AttributeEvaluation attev, final List<AttributeSet> attributes) {
    for (final AttributeSet att : attributes) {
      EList<EAttribute> _attribute = att.getAttribute();
      EAttribute _get = _attribute.get(0);
      String _name = _get.getName();
      EAttribute _name_1 = attev.getName();
      String _name_2 = _name_1.getName();
      boolean _equals = _name.equals(_name_2);
      if (_equals) {
        if ((att instanceof AttributeScalar)) {
          AttributeEvaluationType _value = attev.getValue();
          Operator _operator = ((AttributeType) _value).getOperator();
          String _literal = _operator.getLiteral();
          String _literal_1 = Operator.EQUALS.getLiteral();
          boolean _equals_1 = _literal.equals(_literal_1);
          if (_equals_1) {
            AttributeEvaluationType _value_1 = attev.getValue();
            AttributeType _value_2 = ((AttributeScalar)att).getValue();
            boolean _equals_2 = _value_1.equals(_value_2);
            if (_equals_2) {
              return false;
            } else {
              return true;
            }
          }
          AttributeEvaluationType _value_3 = attev.getValue();
          Operator _operator_1 = ((AttributeType) _value_3).getOperator();
          String _literal_2 = _operator_1.getLiteral();
          String _literal_3 = Operator.DIFFERENT.getLiteral();
          boolean _equals_3 = _literal_2.equals(_literal_3);
          if (_equals_3) {
            AttributeEvaluationType _value_4 = attev.getValue();
            AttributeType _value_5 = ((AttributeScalar)att).getValue();
            boolean _equals_4 = _value_4.equals(_value_5);
            if (_equals_4) {
              return true;
            } else {
              return false;
            }
          }
        }
        if ((att instanceof AttributeUnset)) {
          AttributeEvaluationType _value_6 = attev.getValue();
          Operator _operator_2 = ((AttributeType) _value_6).getOperator();
          String _literal_4 = _operator_2.getLiteral();
          String _literal_5 = Operator.EQUALS.getLiteral();
          boolean _equals_5 = _literal_4.equals(_literal_5);
          if (_equals_5) {
            AttributeEvaluationType _value_7 = attev.getValue();
            boolean _equals_6 = Objects.equal(_value_7, null);
            if (_equals_6) {
              return false;
            } else {
              return true;
            }
          }
          AttributeEvaluationType _value_8 = attev.getValue();
          Operator _operator_3 = ((AttributeType) _value_8).getOperator();
          String _literal_6 = _operator_3.getLiteral();
          String _literal_7 = Operator.DIFFERENT.getLiteral();
          boolean _equals_7 = _literal_6.equals(_literal_7);
          if (_equals_7) {
            AttributeEvaluationType _value_9 = attev.getValue();
            boolean _equals_8 = Objects.equal(_value_9, null);
            if (_equals_8) {
              return true;
            } else {
              return false;
            }
          }
        }
        if ((att instanceof AttributeSwap)) {
          EObject _eContainer = ((AttributeSwap)att).eContainer();
          if ((_eContainer instanceof ModifyInformationMutator)) {
            AttributeEvaluationType _value_10 = attev.getValue();
            if ((_value_10 instanceof ObjectAttributeType)) {
              AttributeEvaluationType _value_11 = attev.getValue();
              ObjectAttributeType value = ((ObjectAttributeType) _value_11);
              EObject _eContainer_1 = ((AttributeSwap)att).eContainer();
              ModifyInformationMutator mut = ((ModifyInformationMutator) _eContainer_1);
              ObSelectionStrategy _object = mut.getObject();
              if ((_object instanceof RandomTypeSelection)) {
                return false;
              }
              ObSelectionStrategy _object_1 = mut.getObject();
              if ((_object_1 instanceof CompleteTypeSelection)) {
                return true;
              }
              ObSelectionStrategy _object_2 = mut.getObject();
              if ((_object_2 instanceof SpecificObjectSelection)) {
                ObSelectionStrategy _object_3 = mut.getObject();
                final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_3);
                ObjectEmitter _objSel = selection.getObjSel();
                if ((_objSel instanceof CreateObjectMutator)) {
                  ObjectEmitter _objSel_1 = value.getObjSel();
                  String _name_3 = _objSel_1.getName();
                  ObjectEmitter _objSel_2 = selection.getObjSel();
                  String _name_4 = _objSel_2.getName();
                  boolean _equals_9 = _name_3.equals(_name_4);
                  if (_equals_9) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_3 = selection.getObjSel();
                if ((_objSel_3 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_4 = value.getObjSel();
                  String _name_5 = _objSel_4.getName();
                  ObjectEmitter _objSel_5 = selection.getObjSel();
                  String _name_6 = _objSel_5.getName();
                  boolean _equals_10 = _name_5.equals(_name_6);
                  if (_equals_10) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_6 = selection.getObjSel();
                if ((_objSel_6 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_7 = value.getObjSel();
                  String _name_7 = _objSel_7.getName();
                  ObjectEmitter _objSel_8 = selection.getObjSel();
                  String _name_8 = _objSel_8.getName();
                  boolean _equals_11 = _name_7.equals(_name_8);
                  if (_equals_11) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_9 = selection.getObjSel();
                if ((_objSel_9 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_10 = value.getObjSel();
                  String _name_9 = _objSel_10.getName();
                  ObjectEmitter _objSel_11 = selection.getObjSel();
                  String _name_10 = _objSel_11.getName();
                  boolean _equals_12 = _name_9.equals(_name_10);
                  if (_equals_12) {
                    return false;
                  } else {
                    return true;
                  }
                }
              }
              ObSelectionStrategy _object_4 = mut.getObject();
              if ((_object_4 instanceof SpecificClosureSelection)) {
                ObSelectionStrategy _object_5 = mut.getObject();
                final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_5);
                ObjectEmitter _objSel_12 = selection_1.getObjSel();
                if ((_objSel_12 instanceof CreateObjectMutator)) {
                  ObjectEmitter _objSel_13 = value.getObjSel();
                  String _name_11 = _objSel_13.getName();
                  ObjectEmitter _objSel_14 = selection_1.getObjSel();
                  String _name_12 = _objSel_14.getName();
                  boolean _equals_13 = _name_11.equals(_name_12);
                  if (_equals_13) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_15 = selection_1.getObjSel();
                if ((_objSel_15 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_16 = value.getObjSel();
                  String _name_13 = _objSel_16.getName();
                  ObjectEmitter _objSel_17 = selection_1.getObjSel();
                  String _name_14 = _objSel_17.getName();
                  boolean _equals_14 = _name_13.equals(_name_14);
                  if (_equals_14) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_18 = selection_1.getObjSel();
                if ((_objSel_18 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_19 = value.getObjSel();
                  String _name_15 = _objSel_19.getName();
                  ObjectEmitter _objSel_20 = selection_1.getObjSel();
                  String _name_16 = _objSel_20.getName();
                  boolean _equals_15 = _name_15.equals(_name_16);
                  if (_equals_15) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_21 = selection_1.getObjSel();
                if ((_objSel_21 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_22 = value.getObjSel();
                  String _name_17 = _objSel_22.getName();
                  ObjectEmitter _objSel_23 = selection_1.getObjSel();
                  String _name_18 = _objSel_23.getName();
                  boolean _equals_16 = _name_17.equals(_name_18);
                  if (_equals_16) {
                    return false;
                  } else {
                    return true;
                  }
                }
              }
            }
          }
        }
        if ((att instanceof AttributeCopy)) {
          EObject _eContainer_2 = ((AttributeCopy)att).eContainer();
          if ((_eContainer_2 instanceof ModifyInformationMutator)) {
            AttributeEvaluationType _value_12 = attev.getValue();
            if ((_value_12 instanceof ObjectAttributeType)) {
              AttributeEvaluationType _value_13 = attev.getValue();
              ObjectAttributeType value_1 = ((ObjectAttributeType) _value_13);
              EObject _eContainer_3 = ((AttributeCopy)att).eContainer();
              ModifyInformationMutator mut_1 = ((ModifyInformationMutator) _eContainer_3);
              ObSelectionStrategy _object_6 = mut_1.getObject();
              if ((_object_6 instanceof RandomTypeSelection)) {
                return false;
              }
              ObSelectionStrategy _object_7 = mut_1.getObject();
              if ((_object_7 instanceof CompleteTypeSelection)) {
                return true;
              }
              ObSelectionStrategy _object_8 = mut_1.getObject();
              if ((_object_8 instanceof SpecificObjectSelection)) {
                ObSelectionStrategy _object_9 = mut_1.getObject();
                final SpecificObjectSelection selection_2 = ((SpecificObjectSelection) _object_9);
                ObjectEmitter _objSel_24 = selection_2.getObjSel();
                if ((_objSel_24 instanceof CreateObjectMutator)) {
                  ObjectEmitter _objSel_25 = value_1.getObjSel();
                  String _name_19 = _objSel_25.getName();
                  ObjectEmitter _objSel_26 = selection_2.getObjSel();
                  String _name_20 = _objSel_26.getName();
                  boolean _equals_17 = _name_19.equals(_name_20);
                  if (_equals_17) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_27 = selection_2.getObjSel();
                if ((_objSel_27 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_28 = value_1.getObjSel();
                  String _name_21 = _objSel_28.getName();
                  ObjectEmitter _objSel_29 = selection_2.getObjSel();
                  String _name_22 = _objSel_29.getName();
                  boolean _equals_18 = _name_21.equals(_name_22);
                  if (_equals_18) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_30 = selection_2.getObjSel();
                if ((_objSel_30 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_31 = value_1.getObjSel();
                  String _name_23 = _objSel_31.getName();
                  ObjectEmitter _objSel_32 = selection_2.getObjSel();
                  String _name_24 = _objSel_32.getName();
                  boolean _equals_19 = _name_23.equals(_name_24);
                  if (_equals_19) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_33 = selection_2.getObjSel();
                if ((_objSel_33 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_34 = value_1.getObjSel();
                  String _name_25 = _objSel_34.getName();
                  ObjectEmitter _objSel_35 = selection_2.getObjSel();
                  String _name_26 = _objSel_35.getName();
                  boolean _equals_20 = _name_25.equals(_name_26);
                  if (_equals_20) {
                    return false;
                  } else {
                    return true;
                  }
                }
              }
              ObSelectionStrategy _object_10 = mut_1.getObject();
              if ((_object_10 instanceof SpecificClosureSelection)) {
                ObSelectionStrategy _object_11 = mut_1.getObject();
                final SpecificClosureSelection selection_3 = ((SpecificClosureSelection) _object_11);
                ObjectEmitter _objSel_36 = selection_3.getObjSel();
                if ((_objSel_36 instanceof CreateObjectMutator)) {
                  ObjectEmitter _objSel_37 = value_1.getObjSel();
                  String _name_27 = _objSel_37.getName();
                  ObjectEmitter _objSel_38 = selection_3.getObjSel();
                  String _name_28 = _objSel_38.getName();
                  boolean _equals_21 = _name_27.equals(_name_28);
                  if (_equals_21) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_39 = selection_3.getObjSel();
                if ((_objSel_39 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_40 = value_1.getObjSel();
                  String _name_29 = _objSel_40.getName();
                  ObjectEmitter _objSel_41 = selection_3.getObjSel();
                  String _name_30 = _objSel_41.getName();
                  boolean _equals_22 = _name_29.equals(_name_30);
                  if (_equals_22) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_42 = selection_3.getObjSel();
                if ((_objSel_42 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_43 = value_1.getObjSel();
                  String _name_31 = _objSel_43.getName();
                  ObjectEmitter _objSel_44 = selection_3.getObjSel();
                  String _name_32 = _objSel_44.getName();
                  boolean _equals_23 = _name_31.equals(_name_32);
                  if (_equals_23) {
                    return false;
                  } else {
                    return true;
                  }
                }
                ObjectEmitter _objSel_45 = selection_3.getObjSel();
                if ((_objSel_45 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_46 = value_1.getObjSel();
                  String _name_33 = _objSel_46.getName();
                  ObjectEmitter _objSel_47 = selection_3.getObjSel();
                  String _name_34 = _objSel_47.getName();
                  boolean _equals_24 = _name_33.equals(_name_34);
                  if (_equals_24) {
                    return false;
                  } else {
                    return true;
                  }
                }
              }
            }
          }
        }
        if ((att instanceof AttributeReverse)) {
          return true;
        }
        if ((att instanceof AttributeOperation)) {
          return true;
        }
      }
    }
    return false;
  }
  
  public WodelUseGenerator.Mandatory getMandatoryByType(final List<WodelUseGenerator.Mandatory> mandatories, final String className, final String featureName, final String type) {
    for (final WodelUseGenerator.Mandatory m : mandatories) {
      boolean _and = false;
      boolean _and_1 = false;
      boolean _equals = m.type.equals(type);
      if (!_equals) {
        _and_1 = false;
      } else {
        boolean _equals_1 = m.featureName.equals(featureName);
        _and_1 = _equals_1;
      }
      if (!_and_1) {
        _and = false;
      } else {
        boolean _equals_2 = m.className.equals(className);
        _and = _equals_2;
      }
      if (_and) {
        return m;
      }
    }
    return null;
  }
  
  public WodelUseGenerator.Constraint getConstraint(final List<WodelUseGenerator.Constraint> constraints, final WodelUseGenerator.Constraint constraint) {
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(constraint, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _equals = constraint.text.equals("");
      boolean _not = (!_equals);
      _and = _not;
    }
    if (_and) {
      for (final WodelUseGenerator.Constraint c : constraints) {
        boolean _equals_1 = c.type.equals(constraint.type);
        if (_equals_1) {
          boolean _equals_2 = c.text.equals(constraint.text);
          if (_equals_2) {
            return c;
          }
        }
      }
    }
    return null;
  }
  
  public void subsume(final List<WodelUseGenerator.Constraint> constraints, final WodelUseGenerator.Constraint constraint) {
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(constraint, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _equals = constraint.text.equals("");
      boolean _not = (!_equals);
      _and = _not;
    }
    if (_and) {
      for (final WodelUseGenerator.Constraint c : constraints) {
        boolean _equals_1 = c.type.equals("exists");
        if (_equals_1) {
          int _indexOf = c.text.indexOf("exists(");
          int _length = "exists(".length();
          int _plus = (_indexOf + _length);
          int _lastIndexOf = c.text.lastIndexOf(")");
          String clause1 = c.text.substring(_plus, _lastIndexOf);
          boolean _and_1 = false;
          boolean _and_2 = false;
          boolean _and_3 = false;
          boolean _notEquals_1 = (!Objects.equal(c.variables, null));
          if (!_notEquals_1) {
            _and_3 = false;
          } else {
            int _size = c.variables.size();
            boolean _greaterThan = (_size > 1);
            _and_3 = _greaterThan;
          }
          if (!_and_3) {
            _and_2 = false;
          } else {
            boolean _notEquals_2 = (!Objects.equal(constraint.variables, null));
            _and_2 = _notEquals_2;
          }
          if (!_and_2) {
            _and_1 = false;
          } else {
            int _size_1 = constraint.variables.size();
            boolean _greaterThan_1 = (_size_1 > 1);
            _and_1 = _greaterThan_1;
          }
          if (_and_1) {
            String v1 = c.variables.get(0);
            String v2 = c.variables.get(1);
            int _indexOf_1 = constraint.text.indexOf("exists(");
            int _length_1 = "exists(".length();
            int _plus_1 = (_indexOf_1 + _length_1);
            int _lastIndexOf_1 = constraint.text.lastIndexOf(")");
            String clause2 = constraint.text.substring(_plus_1, _lastIndexOf_1);
            String v3 = constraint.variables.get(1);
            int _indexOf_2 = clause1.indexOf("|");
            int _plus_2 = (_indexOf_2 + 1);
            int _length_2 = clause1.length();
            String _substring = clause1.substring(_plus_2, _length_2);
            String _plus_3 = ("| " + _substring);
            String _plus_4 = (_plus_3 + " and ");
            String newClause = clause2.replace("| ", _plus_4);
            int _indexOf_3 = newClause.indexOf("|");
            int _plus_5 = (_indexOf_3 + 1);
            String _substring_1 = newClause.substring(0, _plus_5);
            System.out.println(_substring_1);
            int _indexOf_4 = clause1.indexOf("|");
            int _plus_6 = (_indexOf_4 + 1);
            String _substring_2 = clause1.substring(0, _plus_6);
            System.out.println(_substring_2);
            int _indexOf_5 = newClause.indexOf("|");
            int _plus_7 = (_indexOf_5 + 1);
            String _substring_3 = newClause.substring(0, _plus_7);
            int _indexOf_6 = clause1.indexOf("|");
            int _plus_8 = (_indexOf_6 + 1);
            String _substring_4 = clause1.substring(0, _plus_8);
            String _replace = newClause.replace(_substring_3, _substring_4);
            newClause = _replace;
            String _replace_1 = newClause.replace(v3, v2);
            newClause = _replace_1;
            System.out.println(newClause);
            String _replace_2 = c.text.replace(clause1, newClause);
            constraint.text = _replace_2;
            System.out.println(constraint.text);
            constraints.remove(c);
            constraints.add(constraint);
            return;
          }
        }
      }
    }
  }
  
  public WodelUseGenerator.Constraint join(final List<WodelUseGenerator.Constraint> constraints, final WodelUseGenerator.Constraint constraint, final String className) {
    Object _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(constraint, null));
    if (!_notEquals) {
      _and = false;
    } else {
      boolean _equals = constraint.text.equals("");
      boolean _not = (!_equals);
      _and = _not;
    }
    if (_and) {
      for (final WodelUseGenerator.Constraint c : constraints) {
        boolean _and_1 = false;
        boolean _equals_1 = c.type.equals("exists");
        if (!_equals_1) {
          _and_1 = false;
        } else {
          boolean _equals_2 = c.className.equals(className);
          _and_1 = _equals_2;
        }
        if (_and_1) {
          int _indexOf = c.text.indexOf("exists(");
          int _length = "exists(".length();
          int _plus = (_indexOf + _length);
          int _lastIndexOf = c.text.lastIndexOf(")");
          String clause1 = c.text.substring(_plus, _lastIndexOf);
          boolean _and_2 = false;
          boolean _and_3 = false;
          boolean _and_4 = false;
          boolean _notEquals_1 = (!Objects.equal(c.variables, null));
          if (!_notEquals_1) {
            _and_4 = false;
          } else {
            int _size = c.variables.size();
            boolean _greaterThan = (_size > 1);
            _and_4 = _greaterThan;
          }
          if (!_and_4) {
            _and_3 = false;
          } else {
            boolean _notEquals_2 = (!Objects.equal(constraint.variables, null));
            _and_3 = _notEquals_2;
          }
          if (!_and_3) {
            _and_2 = false;
          } else {
            int _size_1 = constraint.variables.size();
            boolean _greaterThan_1 = (_size_1 > 1);
            _and_2 = _greaterThan_1;
          }
          if (_and_2) {
            String v1 = c.variables.get(0);
            String v2 = c.variables.get(1);
            String v3 = constraint.variables.get(1);
            int _length_1 = constraint.text.length();
            int _minus = (_length_1 - 1);
            String _substring = constraint.text.substring(0, _minus);
            String _plus_1 = ("| " + _substring);
            String _plus_2 = (_plus_1 + " and ");
            String _replace = clause1.replace("| ", _plus_2);
            String newClause = (_replace + ")");
            int _indexOf_1 = newClause.indexOf("|");
            int _plus_3 = (_indexOf_1 + 1);
            String _substring_1 = newClause.substring(0, _plus_3);
            System.out.println(_substring_1);
            int _indexOf_2 = clause1.indexOf("|");
            int _plus_4 = (_indexOf_2 + 1);
            String _substring_2 = clause1.substring(0, _plus_4);
            System.out.println(_substring_2);
            int _indexOf_3 = newClause.indexOf("|");
            int _plus_5 = (_indexOf_3 + 1);
            String _substring_3 = newClause.substring(0, _plus_5);
            int _indexOf_4 = clause1.indexOf("|");
            int _plus_6 = (_indexOf_4 + 1);
            String _substring_4 = clause1.substring(0, _plus_6);
            String _replace_1 = newClause.replace(_substring_3, _substring_4);
            newClause = _replace_1;
            String _replace_2 = newClause.replace(v3, v1);
            newClause = _replace_2;
            System.out.println(newClause);
            String _replace_3 = c.text.replace(clause1, newClause);
            constraint.text = _replace_3;
            System.out.println(constraint.text);
            return constraint;
          }
          boolean _and_5 = false;
          boolean _and_6 = false;
          boolean _and_7 = false;
          boolean _notEquals_3 = (!Objects.equal(c.variables, null));
          if (!_notEquals_3) {
            _and_7 = false;
          } else {
            int _size_2 = c.variables.size();
            boolean _greaterThan_2 = (_size_2 > 0);
            _and_7 = _greaterThan_2;
          }
          if (!_and_7) {
            _and_6 = false;
          } else {
            boolean _notEquals_4 = (!Objects.equal(constraint.variables, null));
            _and_6 = _notEquals_4;
          }
          if (!_and_6) {
            _and_5 = false;
          } else {
            int _size_3 = constraint.variables.size();
            boolean _greaterThan_3 = (_size_3 > 1);
            _and_5 = _greaterThan_3;
          }
          if (_and_5) {
            String v1_1 = c.variables.get(0);
            String v2_1 = constraint.variables.get(0);
            String v3_1 = constraint.variables.get(1);
            int _length_2 = constraint.text.length();
            int _minus_1 = (_length_2 - 1);
            String _substring_5 = constraint.text.substring(0, _minus_1);
            String _plus_7 = ("| " + _substring_5);
            String _plus_8 = (_plus_7 + " and ");
            String _replace_4 = clause1.replace("| ", _plus_8);
            String newClause_1 = (_replace_4 + ")");
            int _indexOf_5 = newClause_1.indexOf("|");
            int _plus_9 = (_indexOf_5 + 1);
            String _substring_6 = newClause_1.substring(0, _plus_9);
            System.out.println(_substring_6);
            int _indexOf_6 = clause1.indexOf("|");
            int _plus_10 = (_indexOf_6 + 1);
            String _substring_7 = clause1.substring(0, _plus_10);
            System.out.println(_substring_7);
            int _indexOf_7 = newClause_1.indexOf("|");
            int _plus_11 = (_indexOf_7 + 1);
            String _substring_8 = newClause_1.substring(0, _plus_11);
            int _indexOf_8 = clause1.indexOf("|");
            int _plus_12 = (_indexOf_8 + 1);
            String _substring_9 = clause1.substring(0, _plus_12);
            String _replace_5 = newClause_1.replace(_substring_8, _substring_9);
            newClause_1 = _replace_5;
            String _replace_6 = newClause_1.replace(v3_1, v1_1);
            newClause_1 = _replace_6;
            System.out.println(newClause_1);
            String _replace_7 = c.text.replace(clause1, newClause_1);
            constraint.text = _replace_7;
            System.out.println(constraint.text);
            return constraint;
          }
        }
      }
    }
    return ((WodelUseGenerator.Constraint)_xifexpression);
  }
  
  public void include(final List<WodelUseGenerator.Constraint> constraints, final WodelUseGenerator.Constraint constraint) {
    List<WodelUseGenerator.Constraint> tmpConstraints = new ArrayList<WodelUseGenerator.Constraint>();
    tmpConstraints.addAll(constraints);
    for (final WodelUseGenerator.Constraint c : tmpConstraints) {
      {
        int _indexOf = c.text.indexOf("exists(");
        int _length = "exists(".length();
        int _plus = (_indexOf + _length);
        int _lastIndexOf = c.text.lastIndexOf(")");
        String clause1 = c.text.substring(_plus, _lastIndexOf);
        boolean _and = false;
        boolean _and_1 = false;
        boolean _and_2 = false;
        boolean _notEquals = (!Objects.equal(c.variables, null));
        if (!_notEquals) {
          _and_2 = false;
        } else {
          int _size = c.variables.size();
          boolean _greaterThan = (_size > 1);
          _and_2 = _greaterThan;
        }
        if (!_and_2) {
          _and_1 = false;
        } else {
          boolean _notEquals_1 = (!Objects.equal(constraint.variables, null));
          _and_1 = _notEquals_1;
        }
        if (!_and_1) {
          _and = false;
        } else {
          int _size_1 = constraint.variables.size();
          boolean _greaterThan_1 = (_size_1 > 1);
          _and = _greaterThan_1;
        }
        if (_and) {
          String v2 = c.variables.get(1);
          String v3 = constraint.variables.get(1);
          int _indexOf_1 = constraint.text.indexOf("exists(");
          int _length_1 = "exists(".length();
          int _plus_1 = (_indexOf_1 + _length_1);
          int _lastIndexOf_1 = constraint.text.lastIndexOf(")");
          String clause2 = constraint.text.substring(_plus_1, _lastIndexOf_1);
          int _indexOf_2 = clause1.indexOf("|");
          int _plus_2 = (_indexOf_2 + 1);
          int _length_2 = clause1.length();
          String _substring = clause1.substring(_plus_2, _length_2);
          String _plus_3 = ("| " + _substring);
          String _plus_4 = (_plus_3 + " and ");
          String newClause = clause2.replace("| ", _plus_4);
          System.out.println(newClause);
          String _replace = newClause.replace(v2, v3);
          newClause = _replace;
          System.out.println(newClause);
          String _replace_1 = c.text.replace(clause1, newClause);
          constraint.text = _replace_1;
          System.out.println(constraint.text);
          constraints.remove(c);
        }
      }
    }
    constraints.add(constraint);
  }
  
  public void compile(final Expression exp, final String className, final List<WodelUseGenerator.Constraint> constraints, final String blockName, final String mutName) {
    List<WodelUseGenerator.Constraint> expConstraints = new ArrayList<WodelUseGenerator.Constraint>();
    Evaluation _first = exp.getFirst();
    if ((_first instanceof AttributeEvaluation)) {
      Evaluation _first_1 = exp.getFirst();
      AttributeEvaluationType _value = ((AttributeEvaluation) _first_1).getValue();
      if ((_value instanceof AttributeType)) {
        Evaluation _first_2 = exp.getFirst();
        final AttributeEvaluation attev = ((AttributeEvaluation) _first_2);
        String operator = "";
        WodelUseGenerator.Constraint attConstraint = new WodelUseGenerator.Constraint();
        attConstraint.type = "exists";
        attConstraint.className = className;
        AttributeEvaluationType _value_1 = attev.getValue();
        Operator _operator = ((AttributeType) _value_1).getOperator();
        String _literal = _operator.getLiteral();
        String _literal_1 = Operator.EQUALS.getLiteral();
        boolean _equals = _literal.equals(_literal_1);
        if (_equals) {
          operator = "=";
        }
        AttributeEvaluationType _value_2 = attev.getValue();
        Operator _operator_1 = ((AttributeType) _value_2).getOperator();
        String _literal_2 = _operator_1.getLiteral();
        String _literal_3 = Operator.DIFFERENT.getLiteral();
        boolean _equals_1 = _literal_2.equals(_literal_3);
        if (_equals_1) {
          operator = "<>";
        }
        AttributeEvaluationType _value_3 = attev.getValue();
        if ((_value_3 instanceof StringType)) {
          String _encodeWord = UseUtils.encodeWord(className);
          String _plus = (_encodeWord + ".allInstances()->exists(");
          String _substring = className.substring(0, 1);
          String _lowerCase = _substring.toLowerCase();
          String _plus_1 = (_plus + _lowerCase);
          String _plus_2 = (_plus_1 + " | ");
          String _substring_1 = className.substring(0, 1);
          String _lowerCase_1 = _substring_1.toLowerCase();
          String _plus_3 = (_plus_2 + _lowerCase_1);
          String _plus_4 = (_plus_3 + ".");
          EAttribute _name = attev.getName();
          String _name_1 = _name.getName();
          String _encodeWord_1 = UseUtils.encodeWord(_name_1);
          String _plus_5 = (_plus_4 + _encodeWord_1);
          String _plus_6 = (_plus_5 + " ");
          String _plus_7 = (_plus_6 + operator);
          String _plus_8 = (_plus_7 + " \'");
          AttributeEvaluationType _value_4 = attev.getValue();
          String _value_5 = ((SpecificStringType) _value_4).getValue();
          String _plus_9 = (_plus_8 + _value_5);
          String _plus_10 = (_plus_9 + "\')");
          attConstraint.text = _plus_10;
          String _substring_2 = className.substring(0, 1);
          String _lowerCase_2 = _substring_2.toLowerCase();
          attConstraint.variables.add(_lowerCase_2);
        }
        AttributeEvaluationType _value_6 = attev.getValue();
        if ((_value_6 instanceof DoubleType)) {
          String _encodeWord_2 = UseUtils.encodeWord(className);
          String _plus_11 = (_encodeWord_2 + ".allInstances()->exists(");
          String _substring_3 = className.substring(0, 1);
          String _lowerCase_3 = _substring_3.toLowerCase();
          String _plus_12 = (_plus_11 + _lowerCase_3);
          String _plus_13 = (_plus_12 + " | ");
          String _substring_4 = className.substring(0, 1);
          String _lowerCase_4 = _substring_4.toLowerCase();
          String _plus_14 = (_plus_13 + _lowerCase_4);
          String _plus_15 = (_plus_14 + ".");
          EAttribute _name_2 = attev.getName();
          String _name_3 = _name_2.getName();
          String _encodeWord_3 = UseUtils.encodeWord(_name_3);
          String _plus_16 = (_plus_15 + _encodeWord_3);
          String _plus_17 = (_plus_16 + " ");
          String _plus_18 = (_plus_17 + operator);
          String _plus_19 = (_plus_18 + " ");
          AttributeEvaluationType _value_7 = attev.getValue();
          double _value_8 = ((SpecificDoubleType) _value_7).getValue();
          String _plus_20 = (_plus_19 + Double.valueOf(_value_8));
          String _plus_21 = (_plus_20 + ")");
          attConstraint.text = _plus_21;
          String _substring_5 = className.substring(0, 1);
          String _lowerCase_5 = _substring_5.toLowerCase();
          attConstraint.variables.add(_lowerCase_5);
        }
        AttributeEvaluationType _value_9 = attev.getValue();
        if ((_value_9 instanceof BooleanType)) {
          String _encodeWord_4 = UseUtils.encodeWord(className);
          String _plus_22 = (_encodeWord_4 + ".allInstances()->exists(");
          String _substring_6 = className.substring(0, 1);
          String _lowerCase_6 = _substring_6.toLowerCase();
          String _plus_23 = (_plus_22 + _lowerCase_6);
          String _plus_24 = (_plus_23 + " | ");
          String _substring_7 = className.substring(0, 1);
          String _lowerCase_7 = _substring_7.toLowerCase();
          String _plus_25 = (_plus_24 + _lowerCase_7);
          String _plus_26 = (_plus_25 + ".");
          EAttribute _name_4 = attev.getName();
          String _name_5 = _name_4.getName();
          String _encodeWord_5 = UseUtils.encodeWord(_name_5);
          String _plus_27 = (_plus_26 + _encodeWord_5);
          String _plus_28 = (_plus_27 + " ");
          String _plus_29 = (_plus_28 + operator);
          String _plus_30 = (_plus_29 + " ");
          AttributeEvaluationType _value_10 = attev.getValue();
          boolean _isValue = ((SpecificBooleanType) _value_10).isValue();
          String _plus_31 = (_plus_30 + Boolean.valueOf(_isValue));
          String _plus_32 = (_plus_31 + ")");
          attConstraint.text = _plus_32;
          String _substring_8 = className.substring(0, 1);
          String _lowerCase_8 = _substring_8.toLowerCase();
          attConstraint.variables.add(_lowerCase_8);
        }
        AttributeEvaluationType _value_11 = attev.getValue();
        if ((_value_11 instanceof IntegerType)) {
          String _encodeWord_6 = UseUtils.encodeWord(className);
          String _plus_33 = (_encodeWord_6 + ".allInstances()->exists(");
          String _substring_9 = className.substring(0, 1);
          String _lowerCase_9 = _substring_9.toLowerCase();
          String _plus_34 = (_plus_33 + _lowerCase_9);
          String _plus_35 = (_plus_34 + " | ");
          String _substring_10 = className.substring(0, 1);
          String _lowerCase_10 = _substring_10.toLowerCase();
          String _plus_36 = (_plus_35 + _lowerCase_10);
          String _plus_37 = (_plus_36 + ".");
          EAttribute _name_6 = attev.getName();
          String _name_7 = _name_6.getName();
          String _encodeWord_7 = UseUtils.encodeWord(_name_7);
          String _plus_38 = (_plus_37 + _encodeWord_7);
          String _plus_39 = (_plus_38 + " ");
          String _plus_40 = (_plus_39 + operator);
          String _plus_41 = (_plus_40 + " ");
          AttributeEvaluationType _value_12 = attev.getValue();
          int _value_13 = ((SpecificIntegerType) _value_12).getValue();
          String _plus_42 = (_plus_41 + Integer.valueOf(_value_13));
          String _plus_43 = (_plus_42 + ")");
          attConstraint.text = _plus_43;
          String _substring_11 = className.substring(0, 1);
          String _lowerCase_11 = _substring_11.toLowerCase();
          attConstraint.variables.add(_lowerCase_11);
        }
        boolean _and = false;
        WodelUseGenerator.Constraint _constraint = this.getConstraint(constraints, attConstraint);
        boolean _equals_2 = Objects.equal(_constraint, null);
        if (!_equals_2) {
          _and = false;
        } else {
          WodelUseGenerator.Constraint _constraint_1 = this.getConstraint(expConstraints, attConstraint);
          boolean _equals_3 = Objects.equal(_constraint_1, null);
          _and = _equals_3;
        }
        if (_and) {
          expConstraints.add(attConstraint);
        }
      }
    }
    Evaluation _first_3 = exp.getFirst();
    if ((_first_3 instanceof ReferenceEvaluation)) {
      Evaluation _first_4 = exp.getFirst();
      final ReferenceEvaluation refev = ((ReferenceEvaluation) _first_4);
      String operator_1 = "";
      String _substring_12 = className.substring(0, 1);
      String _lowerCase_12 = _substring_12.toLowerCase();
      String v1 = (_lowerCase_12 + "0");
      String _substring_13 = className.substring(0, 1);
      String _lowerCase_13 = _substring_13.toLowerCase();
      String v2 = (_lowerCase_13 + "1");
      Operator _operator_2 = refev.getOperator();
      String _literal_4 = _operator_2.getLiteral();
      String _literal_5 = Operator.EQUALS.getLiteral();
      boolean _equals_4 = _literal_4.equals(_literal_5);
      if (_equals_4) {
        operator_1 = "=";
      }
      Operator _operator_3 = refev.getOperator();
      String _literal_6 = _operator_3.getLiteral();
      String _literal_7 = Operator.DIFFERENT.getLiteral();
      boolean _equals_5 = _literal_6.equals(_literal_7);
      if (_equals_5) {
        operator_1 = "<>";
      }
      Operator _operator_4 = refev.getOperator();
      String _literal_8 = _operator_4.getLiteral();
      String _literal_9 = Operator.IN.getLiteral();
      boolean _equals_6 = _literal_8.equals(_literal_9);
      if (_equals_6) {
        operator_1 = "IN";
      }
      EReference _name_8 = refev.getName();
      boolean _equals_7 = Objects.equal(_name_8, null);
      if (_equals_7) {
        WodelUseGenerator.Constraint refConstraint = new WodelUseGenerator.Constraint();
        refConstraint.type = "exists";
        refConstraint.className = className;
        ObSelectionStrategy _value_14 = refev.getValue();
        if ((_value_14 instanceof SpecificObjectSelection)) {
          ObSelectionStrategy _value_15 = refev.getValue();
          SpecificObjectSelection selection = ((SpecificObjectSelection) _value_15);
          boolean _and_1 = false;
          HashMap<String, List<WodelUseGenerator.Constraint>> _get = this.mutConstraint.get(blockName);
          boolean _notEquals = (!Objects.equal(_get, null));
          if (!_notEquals) {
            _and_1 = false;
          } else {
            HashMap<String, List<WodelUseGenerator.Constraint>> _get_1 = this.mutConstraint.get(blockName);
            ObjectEmitter _objSel = selection.getObjSel();
            String _name_9 = _objSel.getName();
            List<WodelUseGenerator.Constraint> _get_2 = _get_1.get(_name_9);
            boolean _notEquals_1 = (!Objects.equal(_get_2, null));
            _and_1 = _notEquals_1;
          }
          if (_and_1) {
            HashMap<String, List<WodelUseGenerator.Constraint>> _get_3 = this.mutConstraint.get(blockName);
            ObjectEmitter _objSel_1 = selection.getObjSel();
            String _name_10 = _objSel_1.getName();
            List<WodelUseGenerator.Constraint> referedConstraints = _get_3.get(_name_10);
            for (final WodelUseGenerator.Constraint referedConstraint : referedConstraints) {
              boolean _and_2 = false;
              boolean _equals_8 = referedConstraint.type.equals("exists");
              if (!_equals_8) {
                _and_2 = false;
              } else {
                boolean _equals_9 = referedConstraint.className.equals(className);
                _and_2 = _equals_9;
              }
              if (_and_2) {
                String vref = referedConstraint.variables.get(0);
                String _replaceAll = referedConstraint.text.replaceAll((vref + " "), (v2 + " "));
                String _replaceAll_1 = _replaceAll.replaceAll((vref + "[.]"), (v2 + "."));
                String constraintText = _replaceAll_1.replaceAll((vref + "[)]"), (v2 + ")"));
                int _length = constraintText.length();
                int _minus = (_length - 1);
                String _substring_14 = constraintText.substring(0, _minus);
                String _plus_44 = ((((className + ".allInstances()->exists(") + v1) + " | ") + _substring_14);
                String _plus_45 = (_plus_44 + " and ");
                String _plus_46 = (_plus_45 + v1);
                String _plus_47 = (_plus_46 + " ");
                String _plus_48 = (_plus_47 + operator_1);
                String _plus_49 = (_plus_48 + " ");
                String _plus_50 = (_plus_49 + v2);
                String _plus_51 = (_plus_50 + "))");
                refConstraint.text = _plus_51;
                refConstraint.variables.add(v1);
                refConstraint.variables.add(v2);
                boolean _and_3 = false;
                boolean _and_4 = false;
                WodelUseGenerator.Constraint _constraint_2 = this.getConstraint(constraints, refConstraint);
                boolean _equals_10 = Objects.equal(_constraint_2, null);
                if (!_equals_10) {
                  _and_4 = false;
                } else {
                  int _length_1 = refConstraint.text.length();
                  boolean _greaterThan = (_length_1 > 0);
                  _and_4 = _greaterThan;
                }
                if (!_and_4) {
                  _and_3 = false;
                } else {
                  WodelUseGenerator.Constraint _constraint_3 = this.getConstraint(expConstraints, refConstraint);
                  boolean _equals_11 = Objects.equal(_constraint_3, null);
                  _and_3 = _equals_11;
                }
                if (_and_3) {
                  expConstraints.add(refConstraint);
                }
              }
            }
          } else {
            String _encodeWord_8 = UseUtils.encodeWord(className);
            String _plus_52 = (_encodeWord_8 + ".allInstances()->exists(");
            String _plus_53 = (_plus_52 + v1);
            String _plus_54 = (_plus_53 + ", ");
            String _plus_55 = (_plus_54 + v2);
            String _plus_56 = (_plus_55 + " | ");
            String _plus_57 = (_plus_56 + v1);
            String _plus_58 = (_plus_57 + " ");
            String _plus_59 = (_plus_58 + operator_1);
            String _plus_60 = (_plus_59 + " ");
            String _plus_61 = (_plus_60 + v2);
            String _plus_62 = (_plus_61 + ")");
            refConstraint.text = _plus_62;
            refConstraint.variables.add(v1);
            refConstraint.variables.add(v2);
            boolean _and_5 = false;
            boolean _and_6 = false;
            WodelUseGenerator.Constraint _constraint_4 = this.getConstraint(constraints, refConstraint);
            boolean _equals_12 = Objects.equal(_constraint_4, null);
            if (!_equals_12) {
              _and_6 = false;
            } else {
              int _length_2 = refConstraint.text.length();
              boolean _greaterThan_1 = (_length_2 > 0);
              _and_6 = _greaterThan_1;
            }
            if (!_and_6) {
              _and_5 = false;
            } else {
              WodelUseGenerator.Constraint _constraint_5 = this.getConstraint(expConstraints, refConstraint);
              boolean _equals_13 = Objects.equal(_constraint_5, null);
              _and_5 = _equals_13;
            }
            if (_and_5) {
              expConstraints.add(refConstraint);
            }
          }
        } else {
          refConstraint.text = (((((((((((className + ".allInstances()->exists(") + v1) + ", ") + v2) + " | ") + v1) + " ") + operator_1) + " ") + v2) + ")");
          refConstraint.variables.add(v1);
          refConstraint.variables.add(v2);
          boolean _and_7 = false;
          boolean _and_8 = false;
          WodelUseGenerator.Constraint _constraint_6 = this.getConstraint(constraints, refConstraint);
          boolean _equals_14 = Objects.equal(_constraint_6, null);
          if (!_equals_14) {
            _and_8 = false;
          } else {
            int _length_3 = refConstraint.text.length();
            boolean _greaterThan_2 = (_length_3 > 0);
            _and_8 = _greaterThan_2;
          }
          if (!_and_8) {
            _and_7 = false;
          } else {
            WodelUseGenerator.Constraint _constraint_7 = this.getConstraint(expConstraints, refConstraint);
            boolean _equals_15 = Objects.equal(_constraint_7, null);
            _and_7 = _equals_15;
          }
          if (_and_7) {
            expConstraints.add(refConstraint);
          }
        }
      } else {
        EReference _name_11 = refev.getName();
        String refName = UseUtils.getUseReference(_name_11, this.useReferences);
        boolean _or = false;
        EReference _name_12 = refev.getName();
        int _upperBound = _name_12.getUpperBound();
        boolean _greaterThan_3 = (_upperBound > 1);
        if (_greaterThan_3) {
          _or = true;
        } else {
          EReference _name_13 = refev.getName();
          int _upperBound_1 = _name_13.getUpperBound();
          boolean _equals_16 = (_upperBound_1 == (-1));
          _or = _equals_16;
        }
        boolean multiple = _or;
        WodelUseGenerator.Constraint refConstraint_1 = new WodelUseGenerator.Constraint();
        ObSelectionStrategy _value_16 = refev.getValue();
        boolean _equals_17 = Objects.equal(_value_16, null);
        if (_equals_17) {
          boolean _equals_18 = operator_1.equals("<>");
          if (_equals_18) {
            refConstraint_1.type = "exists";
            refConstraint_1.className = className;
            EReference _refName = refev.getRefName();
            boolean _equals_19 = Objects.equal(_refName, null);
            if (_equals_19) {
              String _encodeWord_9 = UseUtils.encodeWord(className);
              String _plus_63 = (_encodeWord_9 + ".allInstances()->exists(");
              String _plus_64 = (_plus_63 + v1);
              String _plus_65 = (_plus_64 + " | ");
              String _plus_66 = (_plus_65 + v1);
              String _plus_67 = (_plus_66 + ".");
              String _encodeWord_10 = UseUtils.encodeWord(refName);
              String _plus_68 = (_plus_67 + _encodeWord_10);
              String _plus_69 = (_plus_68 + " ");
              String _plus_70 = (_plus_69 + operator_1);
              String _plus_71 = (_plus_70 + " null)");
              refConstraint_1.text = _plus_71;
              refConstraint_1.variables.add(v1);
            } else {
              EReference _refName_1 = refev.getRefName();
              EClassifier _eType = _refName_1.getEType();
              String _name_14 = _eType.getName();
              String _substring_15 = _name_14.substring(0, 1);
              String _lowerCase_14 = _substring_15.toLowerCase();
              String v3 = (_lowerCase_14 + "2");
              EReference _refName_2 = refev.getRefName();
              String innerRefName = UseUtils.getUseReference(_refName_2, this.useReferences);
              String _encodeWord_11 = UseUtils.encodeWord(className);
              String _plus_72 = (_encodeWord_11 + ".allInstances()->exists(");
              String _plus_73 = (_plus_72 + v1);
              String _plus_74 = (_plus_73 + " | ");
              String _plus_75 = (_plus_74 + v1);
              String _plus_76 = (_plus_75 + ".");
              String _encodeWord_12 = UseUtils.encodeWord(refName);
              String _plus_77 = (_plus_76 + _encodeWord_12);
              String _plus_78 = (_plus_77 + "->exists(");
              String _plus_79 = (_plus_78 + v3);
              String _plus_80 = (_plus_79 + " | ");
              String _plus_81 = (_plus_80 + v3);
              String _plus_82 = (_plus_81 + ".");
              String _encodeWord_13 = UseUtils.encodeWord(innerRefName);
              String _plus_83 = (_plus_82 + _encodeWord_13);
              String _plus_84 = (_plus_83 + " ");
              String _plus_85 = (_plus_84 + operator_1);
              String _plus_86 = (_plus_85 + " null))");
              refConstraint_1.text = _plus_86;
              refConstraint_1.variables.add(v1);
              refConstraint_1.variables.add(v3);
            }
            boolean _and_9 = false;
            boolean _and_10 = false;
            WodelUseGenerator.Constraint _constraint_8 = this.getConstraint(constraints, refConstraint_1);
            boolean _equals_20 = Objects.equal(_constraint_8, null);
            if (!_equals_20) {
              _and_10 = false;
            } else {
              int _length_4 = refConstraint_1.text.length();
              boolean _greaterThan_4 = (_length_4 > 0);
              _and_10 = _greaterThan_4;
            }
            if (!_and_10) {
              _and_9 = false;
            } else {
              WodelUseGenerator.Constraint _constraint_9 = this.getConstraint(expConstraints, refConstraint_1);
              boolean _equals_21 = Objects.equal(_constraint_9, null);
              _and_9 = _equals_21;
            }
            if (_and_9) {
              expConstraints.add(refConstraint_1);
            }
          }
        } else {
          ObSelectionStrategy selection_1 = refev.getValue();
          refConstraint_1.type = "exists";
          boolean _equals_22 = operator_1.equals("IN");
          if (_equals_22) {
            if ((selection_1 instanceof SpecificObjectSelection)) {
              String _substring_16 = className.substring(0, 1);
              String _lowerCase_15 = _substring_16.toLowerCase();
              String v3_1 = (_lowerCase_15 + "2");
              boolean _and_11 = false;
              ObjectEmitter _objSel_2 = ((SpecificObjectSelection)selection_1).getObjSel();
              if (!(_objSel_2 instanceof SelectObjectMutator)) {
                _and_11 = false;
              } else {
                ObjectEmitter _objSel_3 = ((SpecificObjectSelection)selection_1).getObjSel();
                ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
                EClass _type = _object.getType();
                String _name_15 = _type.getName();
                boolean _equals_23 = _name_15.equals(className);
                boolean _not = (!_equals_23);
                _and_11 = _not;
              }
              if (_and_11) {
                ObjectEmitter _objSel_4 = ((SpecificObjectSelection)selection_1).getObjSel();
                ObSelectionStrategy _object_1 = ((SelectObjectMutator) _objSel_4).getObject();
                EClass _type_1 = _object_1.getType();
                String refClassName = _type_1.getName();
                String _substring_17 = refClassName.substring(0, 1);
                String _lowerCase_16 = _substring_17.toLowerCase();
                String v4 = (_lowerCase_16 + "3");
                EReference _refType = ((SpecificObjectSelection)selection_1).getRefType();
                boolean _notEquals_2 = (!Objects.equal(_refType, null));
                if (_notEquals_2) {
                  EReference _refType_1 = ((SpecificObjectSelection)selection_1).getRefType();
                  String obRefTypeName = _refType_1.getName();
                  EReference _refType_2 = ((SpecificObjectSelection)selection_1).getRefType();
                  EClassifier _eType_1 = _refType_2.getEType();
                  String _name_16 = _eType_1.getName();
                  String _substring_18 = _name_16.substring(0, 1);
                  String _lowerCase_17 = _substring_18.toLowerCase();
                  String v5 = (_lowerCase_17 + "4");
                  String _encodeWord_14 = UseUtils.encodeWord(className);
                  String _plus_87 = (_encodeWord_14 + ".allInstances()->exists(");
                  String _plus_88 = (_plus_87 + v3_1);
                  String _plus_89 = (_plus_88 + " | ");
                  String _encodeWord_15 = UseUtils.encodeWord(refClassName);
                  String _plus_90 = (_plus_89 + _encodeWord_15);
                  String _plus_91 = (_plus_90 + ".allInstances()->exists(");
                  String _plus_92 = (_plus_91 + v4);
                  String _plus_93 = (_plus_92 + " | ");
                  String _plus_94 = (_plus_93 + v4);
                  String _plus_95 = (_plus_94 + ".");
                  String _encodeWord_16 = UseUtils.encodeWord(obRefTypeName);
                  String _plus_96 = (_plus_95 + _encodeWord_16);
                  String _plus_97 = (_plus_96 + "->exists(");
                  String _plus_98 = (_plus_97 + v5);
                  String _plus_99 = (_plus_98 + " | ");
                  String _plus_100 = (_plus_99 + v5);
                  String _plus_101 = (_plus_100 + " = ");
                  String _plus_102 = (_plus_101 + v3_1);
                  String _plus_103 = (_plus_102 + ".");
                  String _encodeWord_17 = UseUtils.encodeWord(refName);
                  String _plus_104 = (_plus_103 + _encodeWord_17);
                  String _plus_105 = (_plus_104 + ")))");
                  refConstraint_1.text = _plus_105;
                  System.out.println(refConstraint_1.text);
                  refConstraint_1.variables.add(v3_1);
                  refConstraint_1.variables.add(v4);
                  refConstraint_1.variables.add(v5);
                }
              }
            }
          } else {
            String targetClassName = null;
            if ((selection_1 instanceof RandomTypeSelection)) {
              ObSelectionStrategy _value_17 = refev.getValue();
              EClass _type_2 = ((RandomTypeSelection) _value_17).getType();
              String _name_17 = _type_2.getName();
              targetClassName = _name_17;
              String _substring_19 = targetClassName.substring(0, 1);
              String _lowerCase_18 = _substring_19.toLowerCase();
              String v3_2 = (_lowerCase_18 + "2");
              if ((multiple == false)) {
                String _encodeWord_18 = UseUtils.encodeWord(className);
                String _plus_106 = (_encodeWord_18 + ".allInstances()->exists(");
                String _plus_107 = (_plus_106 + v1);
                String _plus_108 = (_plus_107 + " | ");
                String _encodeWord_19 = UseUtils.encodeWord(targetClassName);
                String _plus_109 = (_plus_108 + _encodeWord_19);
                String _plus_110 = (_plus_109 + ".allInstances()->exists(");
                String _plus_111 = (_plus_110 + v3_2);
                String _plus_112 = (_plus_111 + " | ");
                String _plus_113 = (_plus_112 + v1);
                String _plus_114 = (_plus_113 + ".");
                String _encodeWord_20 = UseUtils.encodeWord(refName);
                String _plus_115 = (_plus_114 + _encodeWord_20);
                String _plus_116 = (_plus_115 + " ");
                String _plus_117 = (_plus_116 + operator_1);
                String _plus_118 = (_plus_117 + " ");
                String _plus_119 = (_plus_118 + v3_2);
                String _plus_120 = (_plus_119 + "))");
                refConstraint_1.text = _plus_120;
                refConstraint_1.variables.add(v1);
                refConstraint_1.variables.add(v3_2);
              } else {
                String _substring_20 = targetClassName.substring(0, 1);
                String _lowerCase_19 = _substring_20.toLowerCase();
                String v4_1 = (_lowerCase_19 + "3");
                String _encodeWord_21 = UseUtils.encodeWord(className);
                String _plus_121 = (_encodeWord_21 + ".allInstances()->exists(");
                String _plus_122 = (_plus_121 + v1);
                String _plus_123 = (_plus_122 + " | ");
                String _encodeWord_22 = UseUtils.encodeWord(targetClassName);
                String _plus_124 = (_plus_123 + _encodeWord_22);
                String _plus_125 = (_plus_124 + ".allInstances()->exists(");
                String _plus_126 = (_plus_125 + v3_2);
                String _plus_127 = (_plus_126 + " | ");
                String _plus_128 = (_plus_127 + v1);
                String _plus_129 = (_plus_128 + ".");
                String _encodeWord_23 = UseUtils.encodeWord(refName);
                String _plus_130 = (_plus_129 + _encodeWord_23);
                String _plus_131 = (_plus_130 + "->exists(");
                String _plus_132 = (_plus_131 + v4_1);
                String _plus_133 = (_plus_132 + " | ");
                String _plus_134 = (_plus_133 + v3_2);
                String _plus_135 = (_plus_134 + " ");
                String _plus_136 = (_plus_135 + operator_1);
                String _plus_137 = (_plus_136 + " ");
                String _plus_138 = (_plus_137 + v4_1);
                String _plus_139 = (_plus_138 + "))");
                refConstraint_1.text = _plus_139;
                refConstraint_1.variables.add(v1);
                refConstraint_1.variables.add(v3_2);
                refConstraint_1.variables.add(v4_1);
              }
            }
            if ((selection_1 instanceof SpecificObjectSelection)) {
              EReference _refName_3 = refev.getRefName();
              boolean _equals_24 = Objects.equal(_refName_3, null);
              if (_equals_24) {
                String _substring_21 = className.substring(0, 1);
                String _lowerCase_20 = _substring_21.toLowerCase();
                String v3_3 = (_lowerCase_20 + "2");
                EReference _refType_3 = ((SpecificObjectSelection)selection_1).getRefType();
                boolean _equals_25 = Objects.equal(_refType_3, null);
                if (_equals_25) {
                  boolean _and_12 = false;
                  ObjectEmitter _objSel_5 = ((SpecificObjectSelection)selection_1).getObjSel();
                  if (!(_objSel_5 instanceof SelectObjectMutator)) {
                    _and_12 = false;
                  } else {
                    ObjectEmitter _objSel_6 = ((SpecificObjectSelection)selection_1).getObjSel();
                    ObSelectionStrategy _object_2 = ((SelectObjectMutator) _objSel_6).getObject();
                    EClass _type_3 = _object_2.getType();
                    String _name_18 = _type_3.getName();
                    boolean _equals_26 = _name_18.equals(className);
                    boolean _not_1 = (!_equals_26);
                    _and_12 = _not_1;
                  }
                  if (_and_12) {
                    ObjectEmitter _objSel_7 = ((SpecificObjectSelection)selection_1).getObjSel();
                    ObSelectionStrategy _object_3 = ((SelectObjectMutator) _objSel_7).getObject();
                    EClass _type_4 = _object_3.getType();
                    String refClassName_1 = _type_4.getName();
                    String _substring_22 = refClassName_1.substring(0, 1);
                    String _lowerCase_21 = _substring_22.toLowerCase();
                    String v4_2 = (_lowerCase_21 + "3");
                    if ((multiple == false)) {
                      String _encodeWord_24 = UseUtils.encodeWord(className);
                      String _plus_140 = (_encodeWord_24 + ".allInstances()->exists(");
                      String _plus_141 = (_plus_140 + v3_3);
                      String _plus_142 = (_plus_141 + " | ");
                      String _plus_143 = (_plus_142 + v3_3);
                      String _plus_144 = (_plus_143 + ".");
                      String _encodeWord_25 = UseUtils.encodeWord(refName);
                      String _plus_145 = (_plus_144 + _encodeWord_25);
                      String _plus_146 = (_plus_145 + " ");
                      String _plus_147 = (_plus_146 + operator_1);
                      String _plus_148 = (_plus_147 + " ");
                      String _plus_149 = (_plus_148 + v4_2);
                      String _plus_150 = (_plus_149 + ")");
                      refConstraint_1.text = _plus_150;
                      System.out.println(refConstraint_1.text);
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_2);
                      WodelUseGenerator.Constraint _join = this.join(constraints, refConstraint_1, refClassName_1);
                      refConstraint_1 = _join;
                    } else {
                      String _substring_23 = refClassName_1.substring(0, 1);
                      String _lowerCase_22 = _substring_23.toLowerCase();
                      String v5_1 = (_lowerCase_22 + "4");
                      String _encodeWord_26 = UseUtils.encodeWord(className);
                      String _plus_151 = (_encodeWord_26 + ".allInstances()->exists(");
                      String _plus_152 = (_plus_151 + v3_3);
                      String _plus_153 = (_plus_152 + " | ");
                      String _plus_154 = (_plus_153 + v3_3);
                      String _plus_155 = (_plus_154 + ".");
                      String _encodeWord_27 = UseUtils.encodeWord(refName);
                      String _plus_156 = (_plus_155 + _encodeWord_27);
                      String _plus_157 = (_plus_156 + "->exists(");
                      String _plus_158 = (_plus_157 + v5_1);
                      String _plus_159 = (_plus_158 + " | ");
                      String _plus_160 = (_plus_159 + v4_2);
                      String _plus_161 = (_plus_160 + " ");
                      String _plus_162 = (_plus_161 + operator_1);
                      String _plus_163 = (_plus_162 + " ");
                      String _plus_164 = (_plus_163 + v5_1);
                      String _plus_165 = (_plus_164 + "))");
                      refConstraint_1.text = _plus_165;
                      System.out.println(refConstraint_1.text);
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_2);
                      refConstraint_1.variables.add(v5_1);
                      WodelUseGenerator.Constraint _join_1 = this.join(constraints, refConstraint_1, refClassName_1);
                      refConstraint_1 = _join_1;
                    }
                  } else {
                    if ((multiple == false)) {
                      String _encodeWord_28 = UseUtils.encodeWord(className);
                      String _plus_166 = (_encodeWord_28 + ".allInstances()->exists(");
                      String _plus_167 = (_plus_166 + v1);
                      String _plus_168 = (_plus_167 + ", ");
                      refConstraint_1.text = _plus_168;
                      String _encodeWord_29 = UseUtils.encodeWord(refName);
                      String _plus_169 = ((((v3_3 + " | ") + v1) + ".") + _encodeWord_29);
                      String _plus_170 = (_plus_169 + " ");
                      String _plus_171 = (_plus_170 + operator_1);
                      String _plus_172 = (_plus_171 + " ");
                      String _plus_173 = (_plus_172 + v3_3);
                      /* (_plus_173 + ")"); */
                      refConstraint_1.variables.add(v1);
                      refConstraint_1.variables.add(v3_3);
                    } else {
                      String _substring_24 = className.substring(0, 1);
                      String _lowerCase_23 = _substring_24.toLowerCase();
                      String v4_3 = (_lowerCase_23 + "3");
                      String _encodeWord_30 = UseUtils.encodeWord(className);
                      String _plus_174 = (_encodeWord_30 + ".allInstances()->exists(");
                      String _plus_175 = (_plus_174 + v1);
                      String _plus_176 = (_plus_175 + ", ");
                      String _plus_177 = (_plus_176 + v3_3);
                      String _plus_178 = (_plus_177 + " | ");
                      String _plus_179 = (_plus_178 + v1);
                      String _plus_180 = (_plus_179 + ".");
                      String _encodeWord_31 = UseUtils.encodeWord(refName);
                      String _plus_181 = (_plus_180 + _encodeWord_31);
                      String _plus_182 = (_plus_181 + "->exists(");
                      String _plus_183 = (_plus_182 + v4_3);
                      String _plus_184 = (_plus_183 + " | ");
                      String _plus_185 = (_plus_184 + v3_3);
                      String _plus_186 = (_plus_185 + " ");
                      String _plus_187 = (_plus_186 + operator_1);
                      String _plus_188 = (_plus_187 + " ");
                      String _plus_189 = (_plus_188 + v4_3);
                      String _plus_190 = (_plus_189 + "))");
                      refConstraint_1.text = _plus_190;
                      refConstraint_1.variables.add(v1);
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_3);
                    }
                  }
                } else {
                  boolean _and_13 = false;
                  ObjectEmitter _objSel_8 = ((SpecificObjectSelection)selection_1).getObjSel();
                  if (!(_objSel_8 instanceof SelectObjectMutator)) {
                    _and_13 = false;
                  } else {
                    ObjectEmitter _objSel_9 = ((SpecificObjectSelection)selection_1).getObjSel();
                    ObSelectionStrategy _object_4 = ((SelectObjectMutator) _objSel_9).getObject();
                    EClass _type_5 = _object_4.getType();
                    String _name_19 = _type_5.getName();
                    boolean _equals_27 = _name_19.equals(className);
                    boolean _not_2 = (!_equals_27);
                    _and_13 = _not_2;
                  }
                  if (_and_13) {
                    ObjectEmitter _objSel_10 = ((SpecificObjectSelection)selection_1).getObjSel();
                    ObSelectionStrategy _object_5 = ((SelectObjectMutator) _objSel_10).getObject();
                    EClass _type_6 = _object_5.getType();
                    String refClassName_2 = _type_6.getName();
                    String _substring_25 = refClassName_2.substring(0, 1);
                    String _lowerCase_24 = _substring_25.toLowerCase();
                    String v4_4 = (_lowerCase_24 + "3");
                    if ((multiple == false)) {
                      String _encodeWord_32 = UseUtils.encodeWord(className);
                      String _plus_191 = (_encodeWord_32 + ".allInstances()->exists(");
                      String _plus_192 = (_plus_191 + v3_3);
                      String _plus_193 = (_plus_192 + " | ");
                      String _encodeWord_33 = UseUtils.encodeWord(refClassName_2);
                      String _plus_194 = (_plus_193 + _encodeWord_33);
                      String _plus_195 = (_plus_194 + ".allInstances()->exists(");
                      String _plus_196 = (_plus_195 + v4_4);
                      String _plus_197 = (_plus_196 + " | ");
                      String _plus_198 = (_plus_197 + v3_3);
                      String _plus_199 = (_plus_198 + ".");
                      String _encodeWord_34 = UseUtils.encodeWord(refName);
                      String _plus_200 = (_plus_199 + _encodeWord_34);
                      String _plus_201 = (_plus_200 + " ");
                      String _plus_202 = (_plus_201 + operator_1);
                      String _plus_203 = (_plus_202 + " ");
                      String _plus_204 = (_plus_203 + v4_4);
                      String _plus_205 = (_plus_204 + "))");
                      refConstraint_1.text = _plus_205;
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_4);
                    } else {
                      String _substring_26 = refClassName_2.substring(0, 1);
                      String _lowerCase_25 = _substring_26.toLowerCase();
                      String v5_2 = (_lowerCase_25 + "4");
                      String _encodeWord_35 = UseUtils.encodeWord(className);
                      String _plus_206 = (_encodeWord_35 + ".allInstances()->exists(");
                      String _plus_207 = (_plus_206 + v3_3);
                      String _plus_208 = (_plus_207 + " | ");
                      String _encodeWord_36 = UseUtils.encodeWord(refClassName_2);
                      String _plus_209 = (_plus_208 + _encodeWord_36);
                      String _plus_210 = (_plus_209 + ".allInstances()->exists(");
                      String _plus_211 = (_plus_210 + v4_4);
                      String _plus_212 = (_plus_211 + " | ");
                      String _plus_213 = (_plus_212 + v3_3);
                      String _plus_214 = (_plus_213 + ".");
                      String _encodeWord_37 = UseUtils.encodeWord(refName);
                      String _plus_215 = (_plus_214 + _encodeWord_37);
                      String _plus_216 = (_plus_215 + "->exists(");
                      String _plus_217 = (_plus_216 + v5_2);
                      String _plus_218 = (_plus_217 + " | ");
                      String _plus_219 = (_plus_218 + v4_4);
                      String _plus_220 = (_plus_219 + " ");
                      String _plus_221 = (_plus_220 + operator_1);
                      String _plus_222 = (_plus_221 + " ");
                      String _plus_223 = (_plus_222 + v5_2);
                      String _plus_224 = (_plus_223 + ")))");
                      refConstraint_1.text = _plus_224;
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_4);
                      refConstraint_1.variables.add(v5_2);
                    }
                  } else {
                    EReference _refType_4 = ((SpecificObjectSelection)selection_1).getRefType();
                    String selectionRefName = UseUtils.getUseReference(_refType_4, this.useReferences);
                    boolean _or_1 = false;
                    EReference _refType_5 = ((SpecificObjectSelection)selection_1).getRefType();
                    int _upperBound_2 = _refType_5.getUpperBound();
                    boolean _greaterThan_5 = (_upperBound_2 > 1);
                    if (_greaterThan_5) {
                      _or_1 = true;
                    } else {
                      EReference _refType_6 = ((SpecificObjectSelection)selection_1).getRefType();
                      int _upperBound_3 = _refType_6.getUpperBound();
                      boolean _equals_28 = (_upperBound_3 == (-1));
                      _or_1 = _equals_28;
                    }
                    boolean mult = _or_1;
                    if (((multiple == false) || ((multiple == true) && (mult == true)))) {
                      String _encodeWord_38 = UseUtils.encodeWord(className);
                      String _plus_225 = (_encodeWord_38 + ".allInstances()->exists(");
                      String _plus_226 = (_plus_225 + v1);
                      String _plus_227 = (_plus_226 + ", ");
                      String _plus_228 = (_plus_227 + v3_3);
                      String _plus_229 = (_plus_228 + " | ");
                      String _plus_230 = (_plus_229 + v1);
                      String _plus_231 = (_plus_230 + ".");
                      String _encodeWord_39 = UseUtils.encodeWord(refName);
                      String _plus_232 = (_plus_231 + _encodeWord_39);
                      String _plus_233 = (_plus_232 + " ");
                      String _plus_234 = (_plus_233 + operator_1);
                      String _plus_235 = (_plus_234 + " ");
                      String _plus_236 = (_plus_235 + v3_3);
                      String _plus_237 = (_plus_236 + ".");
                      String _encodeWord_40 = UseUtils.encodeWord(selectionRefName);
                      String _plus_238 = (_plus_237 + _encodeWord_40);
                      String _plus_239 = (_plus_238 + ")");
                      refConstraint_1.text = _plus_239;
                      System.out.println(refConstraint_1.text);
                      refConstraint_1.variables.add(v1);
                      refConstraint_1.variables.add(v3_3);
                    } else {
                      String _substring_27 = className.substring(0, 1);
                      String _lowerCase_26 = _substring_27.toLowerCase();
                      String v4_5 = (_lowerCase_26 + "3");
                      String _encodeWord_41 = UseUtils.encodeWord(className);
                      String _plus_240 = (_encodeWord_41 + ".allInstances()->exists(");
                      String _plus_241 = (_plus_240 + v1);
                      String _plus_242 = (_plus_241 + ", ");
                      String _plus_243 = (_plus_242 + v3_3);
                      String _plus_244 = (_plus_243 + " | ");
                      String _plus_245 = (_plus_244 + v1);
                      String _plus_246 = (_plus_245 + ".");
                      String _encodeWord_42 = UseUtils.encodeWord(refName);
                      String _plus_247 = (_plus_246 + _encodeWord_42);
                      String _plus_248 = (_plus_247 + "->exists(");
                      String _plus_249 = (_plus_248 + v4_5);
                      String _plus_250 = (_plus_249 + " | ");
                      String _plus_251 = (_plus_250 + v3_3);
                      String _plus_252 = (_plus_251 + ".");
                      String _encodeWord_43 = UseUtils.encodeWord(selectionRefName);
                      String _plus_253 = (_plus_252 + _encodeWord_43);
                      String _plus_254 = (_plus_253 + " ");
                      String _plus_255 = (_plus_254 + operator_1);
                      String _plus_256 = (_plus_255 + " ");
                      String _plus_257 = (_plus_256 + v4_5);
                      String _plus_258 = (_plus_257 + "))");
                      refConstraint_1.text = _plus_258;
                      refConstraint_1.variables.add(v1);
                      refConstraint_1.variables.add(v3_3);
                      refConstraint_1.variables.add(v4_5);
                    }
                  }
                }
              } else {
                EReference _refName_4 = refev.getRefName();
                String ref1Name = UseUtils.getUseReference(_refName_4, this.useReferences);
                EReference _refType_7 = ((SpecificObjectSelection)selection_1).getRefType();
                String ref2Name = UseUtils.getUseReference(_refType_7, this.useReferences);
                String _substring_28 = className.substring(0, 1);
                String _lowerCase_27 = _substring_28.toLowerCase();
                String v3_4 = (_lowerCase_27 + "2");
                boolean _and_14 = false;
                ObjectEmitter _objSel_11 = ((SpecificObjectSelection)selection_1).getObjSel();
                if (!(_objSel_11 instanceof SelectObjectMutator)) {
                  _and_14 = false;
                } else {
                  ObjectEmitter _objSel_12 = ((SpecificObjectSelection)selection_1).getObjSel();
                  ObSelectionStrategy _object_6 = ((SelectObjectMutator) _objSel_12).getObject();
                  EClass _type_7 = _object_6.getType();
                  String _name_20 = _type_7.getName();
                  boolean _equals_29 = _name_20.equals(className);
                  boolean _not_3 = (!_equals_29);
                  _and_14 = _not_3;
                }
                if (_and_14) {
                  ObjectEmitter _objSel_13 = ((SpecificObjectSelection)selection_1).getObjSel();
                  ObSelectionStrategy _object_7 = ((SelectObjectMutator) _objSel_13).getObject();
                  EClass _type_8 = _object_7.getType();
                  String refClassName_3 = _type_8.getName();
                  String _substring_29 = refClassName_3.substring(0, 1);
                  String _lowerCase_28 = _substring_29.toLowerCase();
                  String v4_6 = (_lowerCase_28 + "3");
                  if ((multiple == false)) {
                    String _encodeWord_44 = UseUtils.encodeWord(className);
                    String _plus_259 = (_encodeWord_44 + ".allInstances()->exists(");
                    String _plus_260 = (_plus_259 + v3_4);
                    String _plus_261 = (_plus_260 + " | ");
                    String _encodeWord_45 = UseUtils.encodeWord(refClassName_3);
                    String _plus_262 = (_plus_261 + _encodeWord_45);
                    String _plus_263 = (_plus_262 + ".allInstances()->exists(");
                    String _plus_264 = (_plus_263 + v4_6);
                    String _plus_265 = (_plus_264 + " | ");
                    String _plus_266 = (_plus_265 + v3_4);
                    String _plus_267 = (_plus_266 + ".");
                    String _encodeWord_46 = UseUtils.encodeWord(refName);
                    String _plus_268 = (_plus_267 + _encodeWord_46);
                    String _plus_269 = (_plus_268 + " ");
                    String _plus_270 = (_plus_269 + operator_1);
                    String _plus_271 = (_plus_270 + " ");
                    String _plus_272 = (_plus_271 + v4_6);
                    String _plus_273 = (_plus_272 + "))");
                    refConstraint_1.text = _plus_273;
                    refConstraint_1.variables.add(v3_4);
                    refConstraint_1.variables.add(v4_6);
                  } else {
                    String _substring_30 = refClassName_3.substring(0, 1);
                    String _lowerCase_29 = _substring_30.toLowerCase();
                    String v5_3 = (_lowerCase_29 + "4");
                    String _encodeWord_47 = UseUtils.encodeWord(className);
                    String _plus_274 = (_encodeWord_47 + ".allInstances()->exists(");
                    String _plus_275 = (_plus_274 + v3_4);
                    String _plus_276 = (_plus_275 + " | ");
                    String _encodeWord_48 = UseUtils.encodeWord(refClassName_3);
                    String _plus_277 = (_plus_276 + _encodeWord_48);
                    String _plus_278 = (_plus_277 + ".allInstances()->exists(");
                    String _plus_279 = (_plus_278 + v4_6);
                    String _plus_280 = (_plus_279 + " | ");
                    String _plus_281 = (_plus_280 + v3_4);
                    String _plus_282 = (_plus_281 + ".");
                    String _encodeWord_49 = UseUtils.encodeWord(refName);
                    String _plus_283 = (_plus_282 + _encodeWord_49);
                    String _plus_284 = (_plus_283 + "->exists(");
                    String _plus_285 = (_plus_284 + v5_3);
                    String _plus_286 = (_plus_285 + " | ");
                    String _plus_287 = (_plus_286 + v4_6);
                    String _plus_288 = (_plus_287 + " ");
                    String _plus_289 = (_plus_288 + operator_1);
                    String _plus_290 = (_plus_289 + " ");
                    String _plus_291 = (_plus_290 + v5_3);
                    String _plus_292 = (_plus_291 + ")))");
                    refConstraint_1.text = _plus_292;
                    refConstraint_1.variables.add(v3_4);
                    refConstraint_1.variables.add(v4_6);
                    refConstraint_1.variables.add(v5_3);
                  }
                } else {
                  if ((multiple == false)) {
                    String _encodeWord_50 = UseUtils.encodeWord(className);
                    String _plus_293 = (_encodeWord_50 + ".allInstances()->exists(");
                    String _plus_294 = (_plus_293 + v1);
                    String _plus_295 = (_plus_294 + ", ");
                    String _plus_296 = (_plus_295 + v3_4);
                    String _plus_297 = (_plus_296 + " | ");
                    String _plus_298 = (_plus_297 + v1);
                    String _plus_299 = (_plus_298 + ".");
                    String _encodeWord_51 = UseUtils.encodeWord(ref1Name);
                    String _plus_300 = (_plus_299 + _encodeWord_51);
                    String _plus_301 = (_plus_300 + " ");
                    String _plus_302 = (_plus_301 + operator_1);
                    String _plus_303 = (_plus_302 + " ");
                    String _plus_304 = (_plus_303 + v3_4);
                    String _plus_305 = (_plus_304 + ".");
                    String _encodeWord_52 = UseUtils.encodeWord(ref2Name);
                    String _plus_306 = (_plus_305 + _encodeWord_52);
                    String _plus_307 = (_plus_306 + ")");
                    refConstraint_1.text = _plus_307;
                    refConstraint_1.variables.add(v1);
                    refConstraint_1.variables.add(v3_4);
                  } else {
                    String _substring_31 = className.substring(0, 1);
                    String _lowerCase_30 = _substring_31.toLowerCase();
                    String v4_7 = (_lowerCase_30 + "3");
                    String _encodeWord_53 = UseUtils.encodeWord(className);
                    String _plus_308 = (_encodeWord_53 + ".allInstances()->exists(");
                    String _plus_309 = (_plus_308 + v1);
                    String _plus_310 = (_plus_309 + ", ");
                    String _plus_311 = (_plus_310 + v3_4);
                    String _plus_312 = (_plus_311 + " | ");
                    String _plus_313 = (_plus_312 + v1);
                    String _plus_314 = (_plus_313 + ".");
                    String _encodeWord_54 = UseUtils.encodeWord(ref1Name);
                    String _plus_315 = (_plus_314 + _encodeWord_54);
                    String _plus_316 = (_plus_315 + "->exists(");
                    String _plus_317 = (_plus_316 + v4_7);
                    String _plus_318 = (_plus_317 + " | ");
                    String _plus_319 = (_plus_318 + v3_4);
                    String _plus_320 = (_plus_319 + ".");
                    String _encodeWord_55 = UseUtils.encodeWord(ref2Name);
                    String _plus_321 = (_plus_320 + _encodeWord_55);
                    String _plus_322 = (_plus_321 + " ");
                    String _plus_323 = (_plus_322 + operator_1);
                    String _plus_324 = (_plus_323 + " ");
                    String _plus_325 = (_plus_324 + v4_7);
                    String _plus_326 = (_plus_325 + "))");
                    refConstraint_1.text = _plus_326;
                    refConstraint_1.variables.add(v1);
                    refConstraint_1.variables.add(v3_4);
                    refConstraint_1.variables.add(v4_7);
                  }
                }
              }
            }
          }
        }
        ObSelectionStrategy _value_18 = refev.getValue();
        boolean _notEquals_3 = (!Objects.equal(_value_18, null));
        if (_notEquals_3) {
          boolean _and_15 = false;
          boolean _and_16 = false;
          WodelUseGenerator.Constraint _constraint_10 = this.getConstraint(constraints, refConstraint_1);
          boolean _equals_30 = Objects.equal(_constraint_10, null);
          if (!_equals_30) {
            _and_16 = false;
          } else {
            int _length_5 = refConstraint_1.text.length();
            boolean _greaterThan_6 = (_length_5 > 0);
            _and_16 = _greaterThan_6;
          }
          if (!_and_16) {
            _and_15 = false;
          } else {
            WodelUseGenerator.Constraint _constraint_11 = this.getConstraint(expConstraints, refConstraint_1);
            boolean _equals_31 = Objects.equal(_constraint_11, null);
            _and_15 = _equals_31;
          }
          if (_and_15) {
            expConstraints.add(refConstraint_1);
          }
        }
      }
    }
    EList<Evaluation> _second = exp.getSecond();
    boolean _notEquals_4 = (!Objects.equal(_second, null));
    if (_notEquals_4) {
      EList<Evaluation> _second_1 = exp.getSecond();
      for (final Evaluation ev : _second_1) {
        {
          if ((ev instanceof AttributeEvaluation)) {
            final AttributeEvaluation attev_1 = ((AttributeEvaluation) ev);
            WodelUseGenerator.Constraint attConstraint_1 = new WodelUseGenerator.Constraint();
            attConstraint_1.type = "exists";
            attConstraint_1.className = className;
            String operator_2 = "";
            AttributeEvaluationType _value_19 = attev_1.getValue();
            Operator _operator_5 = ((AttributeType) _value_19).getOperator();
            String _literal_10 = _operator_5.getLiteral();
            String _literal_11 = Operator.EQUALS.getLiteral();
            boolean _equals_32 = _literal_10.equals(_literal_11);
            if (_equals_32) {
              operator_2 = "=";
            }
            AttributeEvaluationType _value_20 = attev_1.getValue();
            Operator _operator_6 = ((AttributeType) _value_20).getOperator();
            String _literal_12 = _operator_6.getLiteral();
            String _literal_13 = Operator.DIFFERENT.getLiteral();
            boolean _equals_33 = _literal_12.equals(_literal_13);
            if (_equals_33) {
              operator_2 = "<>";
            }
            AttributeEvaluationType _value_21 = attev_1.getValue();
            if ((_value_21 instanceof StringType)) {
              String _encodeWord_56 = UseUtils.encodeWord(className);
              String _plus_327 = (_encodeWord_56 + ".allInstances()->exists(");
              String _substring_32 = className.substring(0, 1);
              String _lowerCase_31 = _substring_32.toLowerCase();
              String _plus_328 = (_plus_327 + _lowerCase_31);
              String _plus_329 = (_plus_328 + " | ");
              String _substring_33 = className.substring(0, 1);
              String _lowerCase_32 = _substring_33.toLowerCase();
              String _plus_330 = (_plus_329 + _lowerCase_32);
              String _plus_331 = (_plus_330 + ".");
              EAttribute _name_21 = attev_1.getName();
              String _name_22 = _name_21.getName();
              String _encodeWord_57 = UseUtils.encodeWord(_name_22);
              String _plus_332 = (_plus_331 + _encodeWord_57);
              String _plus_333 = (_plus_332 + " ");
              String _plus_334 = (_plus_333 + operator_2);
              String _plus_335 = (_plus_334 + " \'");
              AttributeEvaluationType _value_22 = attev_1.getValue();
              String _value_23 = ((SpecificStringType) _value_22).getValue();
              String _plus_336 = (_plus_335 + _value_23);
              String _plus_337 = (_plus_336 + "\')");
              attConstraint_1.text = _plus_337;
              String _substring_34 = className.substring(0, 1);
              String _lowerCase_33 = _substring_34.toLowerCase();
              attConstraint_1.variables.add(_lowerCase_33);
            }
            AttributeEvaluationType _value_24 = attev_1.getValue();
            if ((_value_24 instanceof DoubleType)) {
              String _encodeWord_58 = UseUtils.encodeWord(className);
              String _plus_338 = (_encodeWord_58 + ".allInstances()->exists(");
              String _substring_35 = className.substring(0, 1);
              String _lowerCase_34 = _substring_35.toLowerCase();
              String _plus_339 = (_plus_338 + _lowerCase_34);
              String _plus_340 = (_plus_339 + " | ");
              String _substring_36 = className.substring(0, 1);
              String _lowerCase_35 = _substring_36.toLowerCase();
              String _plus_341 = (_plus_340 + _lowerCase_35);
              String _plus_342 = (_plus_341 + ".");
              EAttribute _name_23 = attev_1.getName();
              String _name_24 = _name_23.getName();
              String _encodeWord_59 = UseUtils.encodeWord(_name_24);
              String _plus_343 = (_plus_342 + _encodeWord_59);
              String _plus_344 = (_plus_343 + " ");
              String _plus_345 = (_plus_344 + operator_2);
              String _plus_346 = (_plus_345 + " ");
              AttributeEvaluationType _value_25 = attev_1.getValue();
              double _value_26 = ((SpecificDoubleType) _value_25).getValue();
              String _plus_347 = (_plus_346 + Double.valueOf(_value_26));
              String _plus_348 = (_plus_347 + ")");
              attConstraint_1.text = _plus_348;
              String _substring_37 = className.substring(0, 1);
              String _lowerCase_36 = _substring_37.toLowerCase();
              attConstraint_1.variables.add(_lowerCase_36);
            }
            AttributeEvaluationType _value_27 = attev_1.getValue();
            if ((_value_27 instanceof BooleanType)) {
              String _encodeWord_60 = UseUtils.encodeWord(className);
              String _plus_349 = (_encodeWord_60 + ".allInstances()->exists(");
              String _substring_38 = className.substring(0, 1);
              String _lowerCase_37 = _substring_38.toLowerCase();
              String _plus_350 = (_plus_349 + _lowerCase_37);
              String _plus_351 = (_plus_350 + " | ");
              String _substring_39 = className.substring(0, 1);
              String _lowerCase_38 = _substring_39.toLowerCase();
              String _plus_352 = (_plus_351 + _lowerCase_38);
              String _plus_353 = (_plus_352 + ".");
              EAttribute _name_25 = attev_1.getName();
              String _name_26 = _name_25.getName();
              String _encodeWord_61 = UseUtils.encodeWord(_name_26);
              String _plus_354 = (_plus_353 + _encodeWord_61);
              String _plus_355 = (_plus_354 + " ");
              String _plus_356 = (_plus_355 + operator_2);
              String _plus_357 = (_plus_356 + " ");
              AttributeEvaluationType _value_28 = attev_1.getValue();
              boolean _isValue_1 = ((SpecificBooleanType) _value_28).isValue();
              String _plus_358 = (_plus_357 + Boolean.valueOf(_isValue_1));
              String _plus_359 = (_plus_358 + ")");
              attConstraint_1.text = _plus_359;
              String _substring_40 = className.substring(0, 1);
              String _lowerCase_39 = _substring_40.toLowerCase();
              attConstraint_1.variables.add(_lowerCase_39);
            }
            AttributeEvaluationType _value_29 = attev_1.getValue();
            if ((_value_29 instanceof IntegerType)) {
              String _encodeWord_62 = UseUtils.encodeWord(className);
              String _plus_360 = (_encodeWord_62 + ".allInstances()->exists(");
              String _substring_41 = className.substring(0, 1);
              String _lowerCase_40 = _substring_41.toLowerCase();
              String _plus_361 = (_plus_360 + _lowerCase_40);
              String _plus_362 = (_plus_361 + " | ");
              String _substring_42 = className.substring(0, 1);
              String _lowerCase_41 = _substring_42.toLowerCase();
              String _plus_363 = (_plus_362 + _lowerCase_41);
              String _plus_364 = (_plus_363 + ".");
              EAttribute _name_27 = attev_1.getName();
              String _name_28 = _name_27.getName();
              String _encodeWord_63 = UseUtils.encodeWord(_name_28);
              String _plus_365 = (_plus_364 + _encodeWord_63);
              String _plus_366 = (_plus_365 + " ");
              String _plus_367 = (_plus_366 + operator_2);
              String _plus_368 = (_plus_367 + " ");
              AttributeEvaluationType _value_30 = attev_1.getValue();
              int _value_31 = ((SpecificIntegerType) _value_30).getValue();
              String _plus_369 = (_plus_368 + Integer.valueOf(_value_31));
              String _plus_370 = (_plus_369 + ")");
              attConstraint_1.text = _plus_370;
              String _substring_43 = className.substring(0, 1);
              String _lowerCase_42 = _substring_43.toLowerCase();
              attConstraint_1.variables.add(_lowerCase_42);
            }
            boolean _and_17 = false;
            WodelUseGenerator.Constraint _constraint_12 = this.getConstraint(constraints, attConstraint_1);
            boolean _equals_34 = Objects.equal(_constraint_12, null);
            if (!_equals_34) {
              _and_17 = false;
            } else {
              WodelUseGenerator.Constraint _constraint_13 = this.getConstraint(expConstraints, attConstraint_1);
              boolean _equals_35 = Objects.equal(_constraint_13, null);
              _and_17 = _equals_35;
            }
            if (_and_17) {
              expConstraints.add(attConstraint_1);
            }
          }
          if ((ev instanceof ReferenceEvaluation)) {
            final ReferenceEvaluation refev_1 = ((ReferenceEvaluation) ev);
            String operator_3 = "";
            String _substring_44 = className.substring(0, 1);
            String _lowerCase_43 = _substring_44.toLowerCase();
            String v1_1 = (_lowerCase_43 + "0");
            String _substring_45 = className.substring(0, 1);
            String _lowerCase_44 = _substring_45.toLowerCase();
            String v2_1 = (_lowerCase_44 + "1");
            Operator _operator_7 = refev_1.getOperator();
            String _literal_14 = _operator_7.getLiteral();
            String _literal_15 = Operator.EQUALS.getLiteral();
            boolean _equals_36 = _literal_14.equals(_literal_15);
            if (_equals_36) {
              operator_3 = "=";
            }
            Operator _operator_8 = refev_1.getOperator();
            String _literal_16 = _operator_8.getLiteral();
            String _literal_17 = Operator.DIFFERENT.getLiteral();
            boolean _equals_37 = _literal_16.equals(_literal_17);
            if (_equals_37) {
              operator_3 = "<>";
            }
            Operator _operator_9 = refev_1.getOperator();
            String _literal_18 = _operator_9.getLiteral();
            String _literal_19 = Operator.IN.getLiteral();
            boolean _equals_38 = _literal_18.equals(_literal_19);
            if (_equals_38) {
              operator_3 = "=";
            }
            EReference _name_29 = refev_1.getName();
            boolean _equals_39 = Objects.equal(_name_29, null);
            if (_equals_39) {
              WodelUseGenerator.Constraint refConstraint_2 = new WodelUseGenerator.Constraint();
              refConstraint_2.type = "exists";
              refConstraint_2.className = className;
              ObSelectionStrategy _value_32 = refev_1.getValue();
              if ((_value_32 instanceof SpecificObjectSelection)) {
                ObSelectionStrategy _value_33 = refev_1.getValue();
                SpecificObjectSelection selection_2 = ((SpecificObjectSelection) _value_33);
                boolean _and_18 = false;
                HashMap<String, List<WodelUseGenerator.Constraint>> _get_4 = this.mutConstraint.get(blockName);
                boolean _notEquals_5 = (!Objects.equal(_get_4, null));
                if (!_notEquals_5) {
                  _and_18 = false;
                } else {
                  HashMap<String, List<WodelUseGenerator.Constraint>> _get_5 = this.mutConstraint.get(blockName);
                  ObjectEmitter _objSel_14 = selection_2.getObjSel();
                  String _name_30 = _objSel_14.getName();
                  List<WodelUseGenerator.Constraint> _get_6 = _get_5.get(_name_30);
                  boolean _notEquals_6 = (!Objects.equal(_get_6, null));
                  _and_18 = _notEquals_6;
                }
                if (_and_18) {
                  HashMap<String, List<WodelUseGenerator.Constraint>> _get_7 = this.mutConstraint.get(blockName);
                  ObjectEmitter _objSel_15 = selection_2.getObjSel();
                  String _name_31 = _objSel_15.getName();
                  List<WodelUseGenerator.Constraint> referedConstraints_1 = _get_7.get(_name_31);
                  for (final WodelUseGenerator.Constraint referedConstraint_1 : referedConstraints_1) {
                    boolean _and_19 = false;
                    boolean _equals_40 = referedConstraint_1.type.equals("exists");
                    if (!_equals_40) {
                      _and_19 = false;
                    } else {
                      boolean _equals_41 = referedConstraint_1.className.equals(className);
                      _and_19 = _equals_41;
                    }
                    if (_and_19) {
                      String vref_1 = referedConstraint_1.variables.get(0);
                      String _replaceAll_2 = referedConstraint_1.text.replaceAll((vref_1 + " "), (v2_1 + " "));
                      String _replaceAll_3 = _replaceAll_2.replaceAll((vref_1 + "[.]"), (v2_1 + "."));
                      String constraintText_1 = _replaceAll_3.replaceAll((vref_1 + "[)]"), (v2_1 + ")"));
                      int _length_6 = constraintText_1.length();
                      int _minus_1 = (_length_6 - 1);
                      String _substring_46 = constraintText_1.substring(0, _minus_1);
                      String _plus_371 = ((((className + ".allInstances()->exists(") + v1_1) + " | ") + _substring_46);
                      String _plus_372 = (_plus_371 + " and ");
                      String _plus_373 = (_plus_372 + v1_1);
                      String _plus_374 = (_plus_373 + " ");
                      String _plus_375 = (_plus_374 + operator_3);
                      String _plus_376 = (_plus_375 + " ");
                      String _plus_377 = (_plus_376 + v2_1);
                      String _plus_378 = (_plus_377 + "))");
                      refConstraint_2.text = _plus_378;
                      refConstraint_2.variables.add(v1_1);
                      refConstraint_2.variables.add(v2_1);
                      boolean _and_20 = false;
                      boolean _and_21 = false;
                      WodelUseGenerator.Constraint _constraint_14 = this.getConstraint(constraints, refConstraint_2);
                      boolean _equals_42 = Objects.equal(_constraint_14, null);
                      if (!_equals_42) {
                        _and_21 = false;
                      } else {
                        int _length_7 = refConstraint_2.text.length();
                        boolean _greaterThan_7 = (_length_7 > 0);
                        _and_21 = _greaterThan_7;
                      }
                      if (!_and_21) {
                        _and_20 = false;
                      } else {
                        WodelUseGenerator.Constraint _constraint_15 = this.getConstraint(expConstraints, refConstraint_2);
                        boolean _equals_43 = Objects.equal(_constraint_15, null);
                        _and_20 = _equals_43;
                      }
                      if (_and_20) {
                        expConstraints.add(refConstraint_2);
                      }
                    }
                  }
                } else {
                  String _encodeWord_64 = UseUtils.encodeWord(className);
                  String _plus_379 = (_encodeWord_64 + ".allInstances()->exists(");
                  String _plus_380 = (_plus_379 + v1_1);
                  String _plus_381 = (_plus_380 + ", ");
                  String _plus_382 = (_plus_381 + v2_1);
                  String _plus_383 = (_plus_382 + " | ");
                  String _plus_384 = (_plus_383 + v1_1);
                  String _plus_385 = (_plus_384 + " ");
                  String _plus_386 = (_plus_385 + operator_3);
                  String _plus_387 = (_plus_386 + " ");
                  String _plus_388 = (_plus_387 + v2_1);
                  String _plus_389 = (_plus_388 + ")");
                  refConstraint_2.text = _plus_389;
                  refConstraint_2.variables.add(v1_1);
                  refConstraint_2.variables.add(v2_1);
                  System.out.println(refConstraint_2.text);
                  boolean _and_22 = false;
                  boolean _and_23 = false;
                  WodelUseGenerator.Constraint _constraint_16 = this.getConstraint(constraints, refConstraint_2);
                  boolean _equals_44 = Objects.equal(_constraint_16, null);
                  if (!_equals_44) {
                    _and_23 = false;
                  } else {
                    int _length_8 = refConstraint_2.text.length();
                    boolean _greaterThan_8 = (_length_8 > 0);
                    _and_23 = _greaterThan_8;
                  }
                  if (!_and_23) {
                    _and_22 = false;
                  } else {
                    WodelUseGenerator.Constraint _constraint_17 = this.getConstraint(expConstraints, refConstraint_2);
                    boolean _equals_45 = Objects.equal(_constraint_17, null);
                    _and_22 = _equals_45;
                  }
                  if (_and_22) {
                    this.include(expConstraints, refConstraint_2);
                  }
                }
              } else {
                refConstraint_2.text = (((((((((((className + ".allInstances()->exists(") + v1_1) + ", ") + v2_1) + " | ") + v1_1) + " ") + operator_3) + " ") + v2_1) + ")");
                refConstraint_2.variables.add(v1_1);
                refConstraint_2.variables.add(v2_1);
                boolean _and_24 = false;
                boolean _and_25 = false;
                WodelUseGenerator.Constraint _constraint_18 = this.getConstraint(constraints, refConstraint_2);
                boolean _equals_46 = Objects.equal(_constraint_18, null);
                if (!_equals_46) {
                  _and_25 = false;
                } else {
                  int _length_9 = refConstraint_2.text.length();
                  boolean _greaterThan_9 = (_length_9 > 0);
                  _and_25 = _greaterThan_9;
                }
                if (!_and_25) {
                  _and_24 = false;
                } else {
                  WodelUseGenerator.Constraint _constraint_19 = this.getConstraint(expConstraints, refConstraint_2);
                  boolean _equals_47 = Objects.equal(_constraint_19, null);
                  _and_24 = _equals_47;
                }
                if (_and_24) {
                  expConstraints.add(refConstraint_2);
                }
              }
            } else {
              EReference _name_32 = refev_1.getName();
              String refName_1 = UseUtils.getUseReference(_name_32, this.useReferences);
              boolean _or_2 = false;
              EReference _name_33 = refev_1.getName();
              int _upperBound_4 = _name_33.getUpperBound();
              boolean _greaterThan_10 = (_upperBound_4 > 1);
              if (_greaterThan_10) {
                _or_2 = true;
              } else {
                EReference _name_34 = refev_1.getName();
                int _upperBound_5 = _name_34.getUpperBound();
                boolean _equals_48 = (_upperBound_5 == (-1));
                _or_2 = _equals_48;
              }
              boolean multiple_1 = _or_2;
              WodelUseGenerator.Constraint refConstraint_3 = new WodelUseGenerator.Constraint();
              refConstraint_3.className = className;
              ObSelectionStrategy _value_34 = refev_1.getValue();
              boolean _equals_49 = Objects.equal(_value_34, null);
              if (_equals_49) {
                boolean _equals_50 = operator_3.equals("<>");
                if (_equals_50) {
                  refConstraint_3.type = "exists";
                  EReference _refName_5 = refev_1.getRefName();
                  boolean _equals_51 = Objects.equal(_refName_5, null);
                  if (_equals_51) {
                    String _encodeWord_65 = UseUtils.encodeWord(className);
                    String _plus_390 = (_encodeWord_65 + ".allInstances()->exists(");
                    String _plus_391 = (_plus_390 + v1_1);
                    String _plus_392 = (_plus_391 + " | ");
                    String _plus_393 = (_plus_392 + v1_1);
                    String _plus_394 = (_plus_393 + ".");
                    String _encodeWord_66 = UseUtils.encodeWord(refName_1);
                    String _plus_395 = (_plus_394 + _encodeWord_66);
                    String _plus_396 = (_plus_395 + " ");
                    String _plus_397 = (_plus_396 + operator_3);
                    String _plus_398 = (_plus_397 + " null)");
                    refConstraint_3.text = _plus_398;
                    refConstraint_3.variables.add(v1_1);
                  } else {
                    EReference _refName_6 = refev_1.getRefName();
                    EClassifier _eType_2 = _refName_6.getEType();
                    String _name_35 = _eType_2.getName();
                    String _substring_47 = _name_35.substring(0, 1);
                    String _lowerCase_45 = _substring_47.toLowerCase();
                    String v3_5 = (_lowerCase_45 + "2");
                    EReference _refName_7 = refev_1.getRefName();
                    String innerRefName_1 = UseUtils.getUseReference(_refName_7, this.useReferences);
                    String _encodeWord_67 = UseUtils.encodeWord(className);
                    String _plus_399 = (_encodeWord_67 + ".allInstances()->exists(");
                    String _plus_400 = (_plus_399 + v1_1);
                    String _plus_401 = (_plus_400 + " | ");
                    String _plus_402 = (_plus_401 + v1_1);
                    String _plus_403 = (_plus_402 + ".");
                    String _encodeWord_68 = UseUtils.encodeWord(refName_1);
                    String _plus_404 = (_plus_403 + _encodeWord_68);
                    String _plus_405 = (_plus_404 + "->exists(");
                    String _plus_406 = (_plus_405 + v3_5);
                    String _plus_407 = (_plus_406 + " | ");
                    String _plus_408 = (_plus_407 + v3_5);
                    String _plus_409 = (_plus_408 + ".");
                    String _encodeWord_69 = UseUtils.encodeWord(innerRefName_1);
                    String _plus_410 = (_plus_409 + _encodeWord_69);
                    String _plus_411 = (_plus_410 + " ");
                    String _plus_412 = (_plus_411 + operator_3);
                    String _plus_413 = (_plus_412 + " null))");
                    refConstraint_3.text = _plus_413;
                    refConstraint_3.variables.add(v1_1);
                    refConstraint_3.variables.add(v3_5);
                  }
                  boolean _and_26 = false;
                  boolean _and_27 = false;
                  WodelUseGenerator.Constraint _constraint_20 = this.getConstraint(constraints, refConstraint_3);
                  boolean _equals_52 = Objects.equal(_constraint_20, null);
                  if (!_equals_52) {
                    _and_27 = false;
                  } else {
                    int _length_10 = refConstraint_3.text.length();
                    boolean _greaterThan_11 = (_length_10 > 0);
                    _and_27 = _greaterThan_11;
                  }
                  if (!_and_27) {
                    _and_26 = false;
                  } else {
                    WodelUseGenerator.Constraint _constraint_21 = this.getConstraint(expConstraints, refConstraint_3);
                    boolean _equals_53 = Objects.equal(_constraint_21, null);
                    _and_26 = _equals_53;
                  }
                  if (_and_26) {
                    expConstraints.add(refConstraint_3);
                  }
                }
              } else {
                ObSelectionStrategy selection_3 = refev_1.getValue();
                refConstraint_3.type = "exists";
                boolean _equals_54 = operator_3.equals("IN");
                if (_equals_54) {
                  if ((selection_3 instanceof SpecificObjectSelection)) {
                    String _substring_48 = className.substring(0, 1);
                    String _lowerCase_46 = _substring_48.toLowerCase();
                    String v3_6 = (_lowerCase_46 + "2");
                    boolean _and_28 = false;
                    ObjectEmitter _objSel_16 = ((SpecificObjectSelection)selection_3).getObjSel();
                    if (!(_objSel_16 instanceof SelectObjectMutator)) {
                      _and_28 = false;
                    } else {
                      ObjectEmitter _objSel_17 = ((SpecificObjectSelection)selection_3).getObjSel();
                      ObSelectionStrategy _object_8 = ((SelectObjectMutator) _objSel_17).getObject();
                      EClass _type_9 = _object_8.getType();
                      String _name_36 = _type_9.getName();
                      boolean _equals_55 = _name_36.equals(className);
                      boolean _not_4 = (!_equals_55);
                      _and_28 = _not_4;
                    }
                    if (_and_28) {
                      ObjectEmitter _objSel_18 = ((SpecificObjectSelection)selection_3).getObjSel();
                      ObSelectionStrategy _object_9 = ((SelectObjectMutator) _objSel_18).getObject();
                      EClass _type_10 = _object_9.getType();
                      String refClassName_4 = _type_10.getName();
                      String _substring_49 = refClassName_4.substring(0, 1);
                      String _lowerCase_47 = _substring_49.toLowerCase();
                      String v4_8 = (_lowerCase_47 + "3");
                      EReference _refType_8 = ((SpecificObjectSelection)selection_3).getRefType();
                      boolean _notEquals_7 = (!Objects.equal(_refType_8, null));
                      if (_notEquals_7) {
                        EReference _refType_9 = ((SpecificObjectSelection)selection_3).getRefType();
                        String obRefTypeName_1 = _refType_9.getName();
                        EReference _refType_10 = ((SpecificObjectSelection)selection_3).getRefType();
                        EClassifier _eType_3 = _refType_10.getEType();
                        String _name_37 = _eType_3.getName();
                        String _substring_50 = _name_37.substring(0, 1);
                        String _lowerCase_48 = _substring_50.toLowerCase();
                        String v5_4 = (_lowerCase_48 + "4");
                        String _encodeWord_70 = UseUtils.encodeWord(className);
                        String _plus_414 = (_encodeWord_70 + ".allInstances()->exists(");
                        String _plus_415 = (_plus_414 + v3_6);
                        String _plus_416 = (_plus_415 + " | ");
                        String _encodeWord_71 = UseUtils.encodeWord(refClassName_4);
                        String _plus_417 = (_plus_416 + _encodeWord_71);
                        String _plus_418 = (_plus_417 + ".allInstances()->exists(");
                        String _plus_419 = (_plus_418 + v4_8);
                        String _plus_420 = (_plus_419 + " | ");
                        String _plus_421 = (_plus_420 + v4_8);
                        String _plus_422 = (_plus_421 + ".");
                        String _encodeWord_72 = UseUtils.encodeWord(obRefTypeName_1);
                        String _plus_423 = (_plus_422 + _encodeWord_72);
                        String _plus_424 = (_plus_423 + "->exists(");
                        String _plus_425 = (_plus_424 + v5_4);
                        String _plus_426 = (_plus_425 + " | ");
                        String _plus_427 = (_plus_426 + v5_4);
                        String _plus_428 = (_plus_427 + " = ");
                        String _plus_429 = (_plus_428 + v3_6);
                        String _plus_430 = (_plus_429 + ".");
                        String _encodeWord_73 = UseUtils.encodeWord(refName_1);
                        String _plus_431 = (_plus_430 + _encodeWord_73);
                        String _plus_432 = (_plus_431 + ")))");
                        refConstraint_3.text = _plus_432;
                        refConstraint_3.variables.add(v3_6);
                        refConstraint_3.variables.add(v4_8);
                        refConstraint_3.variables.add(v5_4);
                      }
                    }
                  }
                } else {
                  String targetClassName_1 = null;
                  if ((selection_3 instanceof RandomTypeSelection)) {
                    ObSelectionStrategy _value_35 = refev_1.getValue();
                    EClass _type_11 = ((RandomTypeSelection) _value_35).getType();
                    String _name_38 = _type_11.getName();
                    targetClassName_1 = _name_38;
                    String _substring_51 = targetClassName_1.substring(0, 1);
                    String _lowerCase_49 = _substring_51.toLowerCase();
                    String v3_7 = (_lowerCase_49 + "2");
                    if ((multiple_1 == false)) {
                      String _encodeWord_74 = UseUtils.encodeWord(className);
                      String _plus_433 = (_encodeWord_74 + ".allInstances()->exists(");
                      String _plus_434 = (_plus_433 + v1_1);
                      String _plus_435 = (_plus_434 + " | ");
                      String _encodeWord_75 = UseUtils.encodeWord(targetClassName_1);
                      String _plus_436 = (_plus_435 + _encodeWord_75);
                      String _plus_437 = (_plus_436 + ".allInstances()->exists(");
                      String _plus_438 = (_plus_437 + v3_7);
                      String _plus_439 = (_plus_438 + " | ");
                      String _plus_440 = (_plus_439 + v1_1);
                      String _plus_441 = (_plus_440 + ".");
                      String _encodeWord_76 = UseUtils.encodeWord(refName_1);
                      String _plus_442 = (_plus_441 + _encodeWord_76);
                      String _plus_443 = (_plus_442 + " ");
                      String _plus_444 = (_plus_443 + operator_3);
                      String _plus_445 = (_plus_444 + " ");
                      String _plus_446 = (_plus_445 + v3_7);
                      String _plus_447 = (_plus_446 + "))");
                      refConstraint_3.text = _plus_447;
                      refConstraint_3.variables.add(v1_1);
                      refConstraint_3.variables.add(v3_7);
                    } else {
                      String _substring_52 = targetClassName_1.substring(0, 1);
                      String _lowerCase_50 = _substring_52.toLowerCase();
                      String v4_9 = (_lowerCase_50 + "3");
                      String _encodeWord_77 = UseUtils.encodeWord(className);
                      String _plus_448 = (_encodeWord_77 + ".allInstances()->exists(");
                      String _plus_449 = (_plus_448 + v1_1);
                      String _plus_450 = (_plus_449 + " | ");
                      String _encodeWord_78 = UseUtils.encodeWord(targetClassName_1);
                      String _plus_451 = (_plus_450 + _encodeWord_78);
                      String _plus_452 = (_plus_451 + ".allInstances()->exists(");
                      String _plus_453 = (_plus_452 + v3_7);
                      String _plus_454 = (_plus_453 + " | ");
                      String _plus_455 = (_plus_454 + v1_1);
                      String _plus_456 = (_plus_455 + ".");
                      String _encodeWord_79 = UseUtils.encodeWord(refName_1);
                      String _plus_457 = (_plus_456 + _encodeWord_79);
                      String _plus_458 = (_plus_457 + "->exists(");
                      String _plus_459 = (_plus_458 + v4_9);
                      String _plus_460 = (_plus_459 + " | ");
                      String _plus_461 = (_plus_460 + v3_7);
                      String _plus_462 = (_plus_461 + " ");
                      String _plus_463 = (_plus_462 + operator_3);
                      String _plus_464 = (_plus_463 + " ");
                      String _plus_465 = (_plus_464 + v4_9);
                      String _plus_466 = (_plus_465 + "))");
                      refConstraint_3.text = _plus_466;
                      refConstraint_3.variables.add(v1_1);
                      refConstraint_3.variables.add(v3_7);
                      refConstraint_3.variables.add(v4_9);
                    }
                  }
                  if ((selection_3 instanceof SpecificObjectSelection)) {
                    EReference _refName_8 = refev_1.getRefName();
                    boolean _equals_56 = Objects.equal(_refName_8, null);
                    if (_equals_56) {
                      String _substring_53 = className.substring(0, 1);
                      String _lowerCase_51 = _substring_53.toLowerCase();
                      String v3_8 = (_lowerCase_51 + "2");
                      EReference _refType_11 = ((SpecificObjectSelection)selection_3).getRefType();
                      boolean _equals_57 = Objects.equal(_refType_11, null);
                      if (_equals_57) {
                        boolean _and_29 = false;
                        ObjectEmitter _objSel_19 = ((SpecificObjectSelection)selection_3).getObjSel();
                        if (!(_objSel_19 instanceof SelectObjectMutator)) {
                          _and_29 = false;
                        } else {
                          ObjectEmitter _objSel_20 = ((SpecificObjectSelection)selection_3).getObjSel();
                          ObSelectionStrategy _object_10 = ((SelectObjectMutator) _objSel_20).getObject();
                          EClass _type_12 = _object_10.getType();
                          String _name_39 = _type_12.getName();
                          boolean _equals_58 = _name_39.equals(className);
                          boolean _not_5 = (!_equals_58);
                          _and_29 = _not_5;
                        }
                        if (_and_29) {
                          ObjectEmitter _objSel_21 = ((SpecificObjectSelection)selection_3).getObjSel();
                          ObSelectionStrategy _object_11 = ((SelectObjectMutator) _objSel_21).getObject();
                          EClass _type_13 = _object_11.getType();
                          String refClassName_5 = _type_13.getName();
                          String _substring_54 = refClassName_5.substring(0, 1);
                          String _lowerCase_52 = _substring_54.toLowerCase();
                          String v4_10 = (_lowerCase_52 + "3");
                          if ((multiple_1 == false)) {
                            String _encodeWord_80 = UseUtils.encodeWord(className);
                            String _plus_467 = (_encodeWord_80 + ".allInstances()->exists(");
                            String _plus_468 = (_plus_467 + v3_8);
                            String _plus_469 = (_plus_468 + " | ");
                            String _plus_470 = (_plus_469 + v3_8);
                            String _plus_471 = (_plus_470 + ".");
                            String _encodeWord_81 = UseUtils.encodeWord(refName_1);
                            String _plus_472 = (_plus_471 + _encodeWord_81);
                            String _plus_473 = (_plus_472 + " ");
                            String _plus_474 = (_plus_473 + operator_3);
                            String _plus_475 = (_plus_474 + " ");
                            String _plus_476 = (_plus_475 + v4_10);
                            String _plus_477 = (_plus_476 + ")");
                            refConstraint_3.text = _plus_477;
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_10);
                            WodelUseGenerator.Constraint _join_2 = this.join(constraints, refConstraint_3, refClassName_5);
                            refConstraint_3 = _join_2;
                          } else {
                            String _substring_55 = refClassName_5.substring(0, 1);
                            String _lowerCase_53 = _substring_55.toLowerCase();
                            String v5_5 = (_lowerCase_53 + "4");
                            String _encodeWord_82 = UseUtils.encodeWord(className);
                            String _plus_478 = (_encodeWord_82 + ".allInstances()->exists(");
                            String _plus_479 = (_plus_478 + v3_8);
                            String _plus_480 = (_plus_479 + " | ");
                            String _plus_481 = (_plus_480 + v3_8);
                            String _plus_482 = (_plus_481 + ".");
                            String _encodeWord_83 = UseUtils.encodeWord(refName_1);
                            String _plus_483 = (_plus_482 + _encodeWord_83);
                            String _plus_484 = (_plus_483 + "->exists(");
                            String _plus_485 = (_plus_484 + v5_5);
                            String _plus_486 = (_plus_485 + " | ");
                            String _plus_487 = (_plus_486 + v4_10);
                            String _plus_488 = (_plus_487 + " ");
                            String _plus_489 = (_plus_488 + operator_3);
                            String _plus_490 = (_plus_489 + " ");
                            String _plus_491 = (_plus_490 + v5_5);
                            String _plus_492 = (_plus_491 + "))");
                            refConstraint_3.text = _plus_492;
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_10);
                            refConstraint_3.variables.add(v5_5);
                            WodelUseGenerator.Constraint _join_3 = this.join(constraints, refConstraint_3, refClassName_5);
                            refConstraint_3 = _join_3;
                          }
                        } else {
                          if ((multiple_1 == false)) {
                            String _encodeWord_84 = UseUtils.encodeWord(className);
                            String _plus_493 = (_encodeWord_84 + ".allInstances()->exists(");
                            String _plus_494 = (_plus_493 + v1_1);
                            String _plus_495 = (_plus_494 + ", ");
                            refConstraint_3.text = _plus_495;
                            String _encodeWord_85 = UseUtils.encodeWord(refName_1);
                            String _plus_496 = ((((v3_8 + " | ") + v1_1) + ".") + _encodeWord_85);
                            String _plus_497 = (_plus_496 + " ");
                            String _plus_498 = (_plus_497 + operator_3);
                            String _plus_499 = (_plus_498 + " ");
                            String _plus_500 = (_plus_499 + v3_8);
                            /* (_plus_500 + ")"); */
                            refConstraint_3.variables.add(v1_1);
                            refConstraint_3.variables.add(v3_8);
                          } else {
                            String _substring_56 = className.substring(0, 1);
                            String _lowerCase_54 = _substring_56.toLowerCase();
                            String v4_11 = (_lowerCase_54 + "3");
                            String _encodeWord_86 = UseUtils.encodeWord(className);
                            String _plus_501 = (_encodeWord_86 + ".allInstances()->exists(");
                            String _plus_502 = (_plus_501 + v1_1);
                            String _plus_503 = (_plus_502 + ", ");
                            String _plus_504 = (_plus_503 + v3_8);
                            String _plus_505 = (_plus_504 + " | ");
                            String _plus_506 = (_plus_505 + v1_1);
                            String _plus_507 = (_plus_506 + ".");
                            String _encodeWord_87 = UseUtils.encodeWord(refName_1);
                            String _plus_508 = (_plus_507 + _encodeWord_87);
                            String _plus_509 = (_plus_508 + "->exists(");
                            String _plus_510 = (_plus_509 + v4_11);
                            String _plus_511 = (_plus_510 + " | ");
                            String _plus_512 = (_plus_511 + v3_8);
                            String _plus_513 = (_plus_512 + " ");
                            String _plus_514 = (_plus_513 + operator_3);
                            String _plus_515 = (_plus_514 + " ");
                            String _plus_516 = (_plus_515 + v4_11);
                            String _plus_517 = (_plus_516 + "))");
                            refConstraint_3.text = _plus_517;
                            refConstraint_3.variables.add(v1_1);
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_11);
                          }
                        }
                      } else {
                        boolean _and_30 = false;
                        ObjectEmitter _objSel_22 = ((SpecificObjectSelection)selection_3).getObjSel();
                        if (!(_objSel_22 instanceof SelectObjectMutator)) {
                          _and_30 = false;
                        } else {
                          ObjectEmitter _objSel_23 = ((SpecificObjectSelection)selection_3).getObjSel();
                          ObSelectionStrategy _object_12 = ((SelectObjectMutator) _objSel_23).getObject();
                          EClass _type_14 = _object_12.getType();
                          String _name_40 = _type_14.getName();
                          boolean _equals_59 = _name_40.equals(className);
                          boolean _not_6 = (!_equals_59);
                          _and_30 = _not_6;
                        }
                        if (_and_30) {
                          ObjectEmitter _objSel_24 = ((SpecificObjectSelection)selection_3).getObjSel();
                          ObSelectionStrategy _object_13 = ((SelectObjectMutator) _objSel_24).getObject();
                          EClass _type_15 = _object_13.getType();
                          String refClassName_6 = _type_15.getName();
                          String _substring_57 = refClassName_6.substring(0, 1);
                          String _lowerCase_55 = _substring_57.toLowerCase();
                          String v4_12 = (_lowerCase_55 + "3");
                          if ((multiple_1 == false)) {
                            String _encodeWord_88 = UseUtils.encodeWord(className);
                            String _plus_518 = (_encodeWord_88 + ".allInstances()->exists(");
                            String _plus_519 = (_plus_518 + v3_8);
                            String _plus_520 = (_plus_519 + " | ");
                            String _encodeWord_89 = UseUtils.encodeWord(refClassName_6);
                            String _plus_521 = (_plus_520 + _encodeWord_89);
                            String _plus_522 = (_plus_521 + ".allInstances()->exists(");
                            String _plus_523 = (_plus_522 + v4_12);
                            String _plus_524 = (_plus_523 + " | ");
                            String _plus_525 = (_plus_524 + v3_8);
                            String _plus_526 = (_plus_525 + ".");
                            String _encodeWord_90 = UseUtils.encodeWord(refName_1);
                            String _plus_527 = (_plus_526 + _encodeWord_90);
                            String _plus_528 = (_plus_527 + " ");
                            String _plus_529 = (_plus_528 + operator_3);
                            String _plus_530 = (_plus_529 + " ");
                            String _plus_531 = (_plus_530 + v4_12);
                            String _plus_532 = (_plus_531 + "))");
                            refConstraint_3.text = _plus_532;
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_12);
                          } else {
                            String _substring_58 = refClassName_6.substring(0, 1);
                            String _lowerCase_56 = _substring_58.toLowerCase();
                            String v5_6 = (_lowerCase_56 + "4");
                            String _encodeWord_91 = UseUtils.encodeWord(className);
                            String _plus_533 = (_encodeWord_91 + ".allInstances()->exists(");
                            String _plus_534 = (_plus_533 + v3_8);
                            String _plus_535 = (_plus_534 + " | ");
                            String _encodeWord_92 = UseUtils.encodeWord(refClassName_6);
                            String _plus_536 = (_plus_535 + _encodeWord_92);
                            String _plus_537 = (_plus_536 + ".allInstances()->exists(");
                            String _plus_538 = (_plus_537 + v4_12);
                            String _plus_539 = (_plus_538 + " | ");
                            String _plus_540 = (_plus_539 + v3_8);
                            String _plus_541 = (_plus_540 + ".");
                            String _encodeWord_93 = UseUtils.encodeWord(refName_1);
                            String _plus_542 = (_plus_541 + _encodeWord_93);
                            String _plus_543 = (_plus_542 + "->exists(");
                            String _plus_544 = (_plus_543 + v5_6);
                            String _plus_545 = (_plus_544 + " | ");
                            String _plus_546 = (_plus_545 + v4_12);
                            String _plus_547 = (_plus_546 + " ");
                            String _plus_548 = (_plus_547 + operator_3);
                            String _plus_549 = (_plus_548 + " ");
                            String _plus_550 = (_plus_549 + v5_6);
                            String _plus_551 = (_plus_550 + ")))");
                            refConstraint_3.text = _plus_551;
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_12);
                            refConstraint_3.variables.add(v5_6);
                          }
                        } else {
                          EReference _refType_12 = ((SpecificObjectSelection)selection_3).getRefType();
                          String selectionRefName_1 = UseUtils.getUseReference(_refType_12, this.useReferences);
                          boolean _or_3 = false;
                          EReference _refType_13 = ((SpecificObjectSelection)selection_3).getRefType();
                          int _upperBound_6 = _refType_13.getUpperBound();
                          boolean _greaterThan_12 = (_upperBound_6 > 1);
                          if (_greaterThan_12) {
                            _or_3 = true;
                          } else {
                            EReference _refType_14 = ((SpecificObjectSelection)selection_3).getRefType();
                            int _upperBound_7 = _refType_14.getUpperBound();
                            boolean _equals_60 = (_upperBound_7 == (-1));
                            _or_3 = _equals_60;
                          }
                          boolean mult_1 = _or_3;
                          if (((multiple_1 == false) || ((multiple_1 == true) && (mult_1 == true)))) {
                            String _encodeWord_94 = UseUtils.encodeWord(className);
                            String _plus_552 = (_encodeWord_94 + ".allInstances()->exists(");
                            String _plus_553 = (_plus_552 + v1_1);
                            String _plus_554 = (_plus_553 + ", ");
                            String _plus_555 = (_plus_554 + v3_8);
                            String _plus_556 = (_plus_555 + " | ");
                            String _plus_557 = (_plus_556 + v1_1);
                            String _plus_558 = (_plus_557 + ".");
                            String _encodeWord_95 = UseUtils.encodeWord(refName_1);
                            String _plus_559 = (_plus_558 + _encodeWord_95);
                            String _plus_560 = (_plus_559 + " ");
                            String _plus_561 = (_plus_560 + operator_3);
                            String _plus_562 = (_plus_561 + " ");
                            String _plus_563 = (_plus_562 + v3_8);
                            String _plus_564 = (_plus_563 + ".");
                            String _encodeWord_96 = UseUtils.encodeWord(selectionRefName_1);
                            String _plus_565 = (_plus_564 + _encodeWord_96);
                            String _plus_566 = (_plus_565 + ")");
                            refConstraint_3.text = _plus_566;
                            System.out.println(refConstraint_3.text);
                            refConstraint_3.variables.add(v1_1);
                            refConstraint_3.variables.add(v3_8);
                          } else {
                            String _substring_59 = className.substring(0, 1);
                            String _lowerCase_57 = _substring_59.toLowerCase();
                            String v4_13 = (_lowerCase_57 + "3");
                            String _encodeWord_97 = UseUtils.encodeWord(className);
                            String _plus_567 = (_encodeWord_97 + ".allInstances()->exists(");
                            String _plus_568 = (_plus_567 + v1_1);
                            String _plus_569 = (_plus_568 + ", ");
                            String _plus_570 = (_plus_569 + v3_8);
                            String _plus_571 = (_plus_570 + " | ");
                            String _plus_572 = (_plus_571 + v1_1);
                            String _plus_573 = (_plus_572 + ".");
                            String _encodeWord_98 = UseUtils.encodeWord(refName_1);
                            String _plus_574 = (_plus_573 + _encodeWord_98);
                            String _plus_575 = (_plus_574 + "->exists(");
                            String _plus_576 = (_plus_575 + v4_13);
                            String _plus_577 = (_plus_576 + " | ");
                            String _plus_578 = (_plus_577 + v3_8);
                            String _plus_579 = (_plus_578 + ".");
                            String _encodeWord_99 = UseUtils.encodeWord(selectionRefName_1);
                            String _plus_580 = (_plus_579 + _encodeWord_99);
                            String _plus_581 = (_plus_580 + " ");
                            String _plus_582 = (_plus_581 + operator_3);
                            String _plus_583 = (_plus_582 + " ");
                            String _plus_584 = (_plus_583 + v4_13);
                            String _plus_585 = (_plus_584 + "))");
                            refConstraint_3.text = _plus_585;
                            refConstraint_3.variables.add(v1_1);
                            refConstraint_3.variables.add(v3_8);
                            refConstraint_3.variables.add(v4_13);
                          }
                        }
                      }
                    } else {
                      EReference _refName_9 = refev_1.getRefName();
                      String ref1Name_1 = UseUtils.getUseReference(_refName_9, this.useReferences);
                      EReference _refType_15 = ((SpecificObjectSelection)selection_3).getRefType();
                      String ref2Name_1 = UseUtils.getUseReference(_refType_15, this.useReferences);
                      String _substring_60 = className.substring(0, 1);
                      String _lowerCase_58 = _substring_60.toLowerCase();
                      String v3_9 = (_lowerCase_58 + "2");
                      boolean _and_31 = false;
                      ObjectEmitter _objSel_25 = ((SpecificObjectSelection)selection_3).getObjSel();
                      if (!(_objSel_25 instanceof SelectObjectMutator)) {
                        _and_31 = false;
                      } else {
                        ObjectEmitter _objSel_26 = ((SpecificObjectSelection)selection_3).getObjSel();
                        ObSelectionStrategy _object_14 = ((SelectObjectMutator) _objSel_26).getObject();
                        EClass _type_16 = _object_14.getType();
                        String _name_41 = _type_16.getName();
                        boolean _equals_61 = _name_41.equals(className);
                        boolean _not_7 = (!_equals_61);
                        _and_31 = _not_7;
                      }
                      if (_and_31) {
                        ObjectEmitter _objSel_27 = ((SpecificObjectSelection)selection_3).getObjSel();
                        ObSelectionStrategy _object_15 = ((SelectObjectMutator) _objSel_27).getObject();
                        EClass _type_17 = _object_15.getType();
                        String refClassName_7 = _type_17.getName();
                        String _substring_61 = refClassName_7.substring(0, 1);
                        String _lowerCase_59 = _substring_61.toLowerCase();
                        String v4_14 = (_lowerCase_59 + "3");
                        if ((multiple_1 == false)) {
                          String _encodeWord_100 = UseUtils.encodeWord(className);
                          String _plus_586 = (_encodeWord_100 + ".allInstances()->exists(");
                          String _plus_587 = (_plus_586 + v3_9);
                          String _plus_588 = (_plus_587 + " | ");
                          String _encodeWord_101 = UseUtils.encodeWord(refClassName_7);
                          String _plus_589 = (_plus_588 + _encodeWord_101);
                          String _plus_590 = (_plus_589 + ".allInstances()->exists(");
                          String _plus_591 = (_plus_590 + v4_14);
                          String _plus_592 = (_plus_591 + " | ");
                          String _plus_593 = (_plus_592 + v3_9);
                          String _plus_594 = (_plus_593 + ".");
                          String _encodeWord_102 = UseUtils.encodeWord(refName_1);
                          String _plus_595 = (_plus_594 + _encodeWord_102);
                          String _plus_596 = (_plus_595 + " ");
                          String _plus_597 = (_plus_596 + operator_3);
                          String _plus_598 = (_plus_597 + " ");
                          String _plus_599 = (_plus_598 + v4_14);
                          String _plus_600 = (_plus_599 + "))");
                          refConstraint_3.text = _plus_600;
                          refConstraint_3.variables.add(v3_9);
                          refConstraint_3.variables.add(v4_14);
                        } else {
                          String _substring_62 = refClassName_7.substring(0, 1);
                          String _lowerCase_60 = _substring_62.toLowerCase();
                          String v5_7 = (_lowerCase_60 + "4");
                          String _encodeWord_103 = UseUtils.encodeWord(className);
                          String _plus_601 = (_encodeWord_103 + ".allInstances()->exists(");
                          String _plus_602 = (_plus_601 + v3_9);
                          String _plus_603 = (_plus_602 + " | ");
                          String _encodeWord_104 = UseUtils.encodeWord(refClassName_7);
                          String _plus_604 = (_plus_603 + _encodeWord_104);
                          String _plus_605 = (_plus_604 + ".allInstances()->exists(");
                          String _plus_606 = (_plus_605 + v4_14);
                          String _plus_607 = (_plus_606 + " | ");
                          String _plus_608 = (_plus_607 + v3_9);
                          String _plus_609 = (_plus_608 + ".");
                          String _encodeWord_105 = UseUtils.encodeWord(refName_1);
                          String _plus_610 = (_plus_609 + _encodeWord_105);
                          String _plus_611 = (_plus_610 + "->exists(");
                          String _plus_612 = (_plus_611 + v5_7);
                          String _plus_613 = (_plus_612 + " | ");
                          String _plus_614 = (_plus_613 + v4_14);
                          String _plus_615 = (_plus_614 + " ");
                          String _plus_616 = (_plus_615 + operator_3);
                          String _plus_617 = (_plus_616 + " ");
                          String _plus_618 = (_plus_617 + v5_7);
                          String _plus_619 = (_plus_618 + ")))");
                          refConstraint_3.text = _plus_619;
                          refConstraint_3.variables.add(v3_9);
                          refConstraint_3.variables.add(v4_14);
                          refConstraint_3.variables.add(v5_7);
                        }
                      } else {
                        if ((multiple_1 == false)) {
                          String _encodeWord_106 = UseUtils.encodeWord(className);
                          String _plus_620 = (_encodeWord_106 + ".allInstances()->exists(");
                          String _plus_621 = (_plus_620 + v1_1);
                          String _plus_622 = (_plus_621 + ", ");
                          String _plus_623 = (_plus_622 + v3_9);
                          String _plus_624 = (_plus_623 + " | ");
                          String _plus_625 = (_plus_624 + v1_1);
                          String _plus_626 = (_plus_625 + ".");
                          String _encodeWord_107 = UseUtils.encodeWord(ref1Name_1);
                          String _plus_627 = (_plus_626 + _encodeWord_107);
                          String _plus_628 = (_plus_627 + " ");
                          String _plus_629 = (_plus_628 + operator_3);
                          String _plus_630 = (_plus_629 + " ");
                          String _plus_631 = (_plus_630 + v3_9);
                          String _plus_632 = (_plus_631 + ".");
                          String _encodeWord_108 = UseUtils.encodeWord(ref2Name_1);
                          String _plus_633 = (_plus_632 + _encodeWord_108);
                          String _plus_634 = (_plus_633 + ")");
                          refConstraint_3.text = _plus_634;
                          refConstraint_3.variables.add(v1_1);
                          refConstraint_3.variables.add(v3_9);
                        } else {
                          String _substring_63 = className.substring(0, 1);
                          String _lowerCase_61 = _substring_63.toLowerCase();
                          String v4_15 = (_lowerCase_61 + "3");
                          String _encodeWord_109 = UseUtils.encodeWord(className);
                          String _plus_635 = (_encodeWord_109 + ".allInstances()->exists(");
                          String _plus_636 = (_plus_635 + v1_1);
                          String _plus_637 = (_plus_636 + ", ");
                          String _plus_638 = (_plus_637 + v3_9);
                          String _plus_639 = (_plus_638 + " | ");
                          String _plus_640 = (_plus_639 + v1_1);
                          String _plus_641 = (_plus_640 + ".");
                          String _encodeWord_110 = UseUtils.encodeWord(ref1Name_1);
                          String _plus_642 = (_plus_641 + _encodeWord_110);
                          String _plus_643 = (_plus_642 + "->exists(");
                          String _plus_644 = (_plus_643 + v4_15);
                          String _plus_645 = (_plus_644 + " | ");
                          String _plus_646 = (_plus_645 + v3_9);
                          String _plus_647 = (_plus_646 + ".");
                          String _encodeWord_111 = UseUtils.encodeWord(ref2Name_1);
                          String _plus_648 = (_plus_647 + _encodeWord_111);
                          String _plus_649 = (_plus_648 + " ");
                          String _plus_650 = (_plus_649 + operator_3);
                          String _plus_651 = (_plus_650 + " ");
                          String _plus_652 = (_plus_651 + v4_15);
                          String _plus_653 = (_plus_652 + "))");
                          refConstraint_3.text = _plus_653;
                          refConstraint_3.variables.add(v1_1);
                          refConstraint_3.variables.add(v3_9);
                          refConstraint_3.variables.add(v4_15);
                        }
                      }
                    }
                  }
                }
              }
              ObSelectionStrategy _value_36 = refev_1.getValue();
              boolean _notEquals_8 = (!Objects.equal(_value_36, null));
              if (_notEquals_8) {
                boolean _and_32 = false;
                boolean _and_33 = false;
                WodelUseGenerator.Constraint _constraint_22 = this.getConstraint(constraints, refConstraint_3);
                boolean _equals_62 = Objects.equal(_constraint_22, null);
                if (!_equals_62) {
                  _and_33 = false;
                } else {
                  int _length_11 = refConstraint_3.text.length();
                  boolean _greaterThan_13 = (_length_11 > 0);
                  _and_33 = _greaterThan_13;
                }
                if (!_and_33) {
                  _and_32 = false;
                } else {
                  WodelUseGenerator.Constraint _constraint_23 = this.getConstraint(expConstraints, refConstraint_3);
                  boolean _equals_63 = Objects.equal(_constraint_23, null);
                  _and_32 = _equals_63;
                }
                if (_and_32) {
                  this.subsume(expConstraints, refConstraint_3);
                }
              }
            }
          }
        }
      }
    }
    for (final WodelUseGenerator.Constraint constraint : expConstraints) {
      {
        constraints.add(constraint);
        this.storeMutatorName(constraint, blockName, mutName);
      }
    }
  }
  
  public void storeMutatorName(final WodelUseGenerator.Constraint constraint, final String blockName, final String mutName) {
    HashMap<String, List<WodelUseGenerator.Constraint>> nameConstraint = null;
    HashMap<String, List<WodelUseGenerator.Constraint>> _get = this.mutConstraint.get(blockName);
    boolean _equals = Objects.equal(_get, null);
    if (_equals) {
      HashMap<String, List<WodelUseGenerator.Constraint>> _hashMap = new HashMap<String, List<WodelUseGenerator.Constraint>>();
      nameConstraint = _hashMap;
    } else {
      HashMap<String, List<WodelUseGenerator.Constraint>> _get_1 = this.mutConstraint.get(blockName);
      nameConstraint = _get_1;
    }
    List<WodelUseGenerator.Constraint> constraints = null;
    List<WodelUseGenerator.Constraint> _get_2 = nameConstraint.get(mutName);
    boolean _equals_1 = Objects.equal(_get_2, null);
    if (_equals_1) {
      ArrayList<WodelUseGenerator.Constraint> _arrayList = new ArrayList<WodelUseGenerator.Constraint>();
      constraints = _arrayList;
    } else {
      List<WodelUseGenerator.Constraint> _get_3 = nameConstraint.get(mutName);
      constraints = _get_3;
    }
    constraints.add(constraint);
    nameConstraint.put(mutName, constraints);
    this.mutConstraint.put(blockName, nameConstraint);
  }
  
  public void compile(final Expression exp, final String className, final List<AttributeSet> attributes, final List<WodelUseGenerator.Constraint> constraints, final String blockName, final String mutName) {
    Evaluation _first = exp.getFirst();
    if ((_first instanceof AttributeEvaluation)) {
      Evaluation _first_1 = exp.getFirst();
      AttributeEvaluationType _value = ((AttributeEvaluation) _first_1).getValue();
      if ((_value instanceof AttributeType)) {
        Evaluation _first_2 = exp.getFirst();
        final AttributeEvaluation attev = ((AttributeEvaluation) _first_2);
        String operator = "";
        WodelUseGenerator.Constraint attConstraint = new WodelUseGenerator.Constraint();
        attConstraint.className = className;
        AttributeEvaluationType _value_1 = attev.getValue();
        Operator _operator = ((AttributeType) _value_1).getOperator();
        String _literal = _operator.getLiteral();
        String _literal_1 = Operator.EQUALS.getLiteral();
        boolean _equals = _literal.equals(_literal_1);
        if (_equals) {
          operator = "=";
        }
        AttributeEvaluationType _value_2 = attev.getValue();
        Operator _operator_1 = ((AttributeType) _value_2).getOperator();
        String _literal_2 = _operator_1.getLiteral();
        String _literal_3 = Operator.DIFFERENT.getLiteral();
        boolean _equals_1 = _literal_2.equals(_literal_3);
        if (_equals_1) {
          operator = "<>";
        }
        boolean isChanged = this.isChanged(attev, attributes);
        if ((isChanged == false)) {
          attConstraint.type = "exists";
          AttributeEvaluationType _value_3 = attev.getValue();
          if ((_value_3 instanceof StringType)) {
            String _substring = className.substring(0, 1);
            String _lowerCase = _substring.toLowerCase();
            String _plus = ((className + ".allInstances()->exists(") + _lowerCase);
            String _plus_1 = (_plus + " | ");
            String _substring_1 = className.substring(0, 1);
            String _lowerCase_1 = _substring_1.toLowerCase();
            String _plus_2 = (_plus_1 + _lowerCase_1);
            String _plus_3 = (_plus_2 + ".");
            EAttribute _name = attev.getName();
            String _name_1 = _name.getName();
            String _plus_4 = (_plus_3 + _name_1);
            String _plus_5 = (_plus_4 + " ");
            String _plus_6 = (_plus_5 + operator);
            String _plus_7 = (_plus_6 + " \'");
            AttributeEvaluationType _value_4 = attev.getValue();
            String _value_5 = ((SpecificStringType) _value_4).getValue();
            String _plus_8 = (_plus_7 + _value_5);
            String _plus_9 = (_plus_8 + "\')");
            attConstraint.text = _plus_9;
          }
          AttributeEvaluationType _value_6 = attev.getValue();
          if ((_value_6 instanceof DoubleType)) {
            String _substring_2 = className.substring(0, 1);
            String _lowerCase_2 = _substring_2.toLowerCase();
            String _plus_10 = ((className + ".allInstances()->exists(") + _lowerCase_2);
            String _plus_11 = (_plus_10 + " | ");
            String _substring_3 = className.substring(0, 1);
            String _lowerCase_3 = _substring_3.toLowerCase();
            String _plus_12 = (_plus_11 + _lowerCase_3);
            String _plus_13 = (_plus_12 + ".");
            EAttribute _name_2 = attev.getName();
            String _name_3 = _name_2.getName();
            String _plus_14 = (_plus_13 + _name_3);
            String _plus_15 = (_plus_14 + " ");
            String _plus_16 = (_plus_15 + operator);
            String _plus_17 = (_plus_16 + " ");
            AttributeEvaluationType _value_7 = attev.getValue();
            double _value_8 = ((SpecificDoubleType) _value_7).getValue();
            String _plus_18 = (_plus_17 + Double.valueOf(_value_8));
            String _plus_19 = (_plus_18 + ")");
            attConstraint.text = _plus_19;
          }
          AttributeEvaluationType _value_9 = attev.getValue();
          if ((_value_9 instanceof BooleanType)) {
            String _substring_4 = className.substring(0, 1);
            String _lowerCase_4 = _substring_4.toLowerCase();
            String _plus_20 = ((className + ".allInstances()->exists(") + _lowerCase_4);
            String _plus_21 = (_plus_20 + " | ");
            String _substring_5 = className.substring(0, 1);
            String _lowerCase_5 = _substring_5.toLowerCase();
            String _plus_22 = (_plus_21 + _lowerCase_5);
            String _plus_23 = (_plus_22 + ".");
            EAttribute _name_4 = attev.getName();
            String _name_5 = _name_4.getName();
            String _plus_24 = (_plus_23 + _name_5);
            String _plus_25 = (_plus_24 + " ");
            String _plus_26 = (_plus_25 + operator);
            String _plus_27 = (_plus_26 + " ");
            AttributeEvaluationType _value_10 = attev.getValue();
            boolean _isValue = ((SpecificBooleanType) _value_10).isValue();
            String _plus_28 = (_plus_27 + Boolean.valueOf(_isValue));
            String _plus_29 = (_plus_28 + ")");
            attConstraint.text = _plus_29;
          }
          AttributeEvaluationType _value_11 = attev.getValue();
          if ((_value_11 instanceof IntegerType)) {
            String _substring_6 = className.substring(0, 1);
            String _lowerCase_6 = _substring_6.toLowerCase();
            String _plus_30 = ((className + ".allInstances()->exists(") + _lowerCase_6);
            String _plus_31 = (_plus_30 + " | ");
            String _substring_7 = className.substring(0, 1);
            String _lowerCase_7 = _substring_7.toLowerCase();
            String _plus_32 = (_plus_31 + _lowerCase_7);
            String _plus_33 = (_plus_32 + ".");
            EAttribute _name_6 = attev.getName();
            String _name_7 = _name_6.getName();
            String _plus_34 = (_plus_33 + _name_7);
            String _plus_35 = (_plus_34 + " ");
            String _plus_36 = (_plus_35 + operator);
            String _plus_37 = (_plus_36 + " ");
            AttributeEvaluationType _value_12 = attev.getValue();
            int _value_13 = ((SpecificIntegerType) _value_12).getValue();
            String _plus_38 = (_plus_37 + Integer.valueOf(_value_13));
            String _plus_39 = (_plus_38 + ")");
            attConstraint.text = _plus_39;
          }
          WodelUseGenerator.Constraint _constraint = this.getConstraint(constraints, attConstraint);
          boolean _equals_2 = Objects.equal(_constraint, null);
          if (_equals_2) {
            constraints.add(attConstraint);
            this.storeMutatorName(attConstraint, blockName, mutName);
          }
        } else {
        }
      }
    }
    EList<Evaluation> _second = exp.getSecond();
    boolean _notEquals = (!Objects.equal(_second, null));
    if (_notEquals) {
      EList<Evaluation> _second_1 = exp.getSecond();
      for (final Evaluation ev : _second_1) {
        if ((ev instanceof AttributeEvaluation)) {
          final AttributeEvaluation attev_1 = ((AttributeEvaluation) ev);
          String operator_1 = "";
          WodelUseGenerator.Constraint attConstraint_1 = new WodelUseGenerator.Constraint();
          attConstraint_1.className = className;
          AttributeEvaluationType _value_14 = attev_1.getValue();
          Operator _operator_2 = ((AttributeType) _value_14).getOperator();
          String _literal_4 = _operator_2.getLiteral();
          String _literal_5 = Operator.EQUALS.getLiteral();
          boolean _equals_3 = _literal_4.equals(_literal_5);
          if (_equals_3) {
            operator_1 = "=";
          }
          AttributeEvaluationType _value_15 = attev_1.getValue();
          Operator _operator_3 = ((AttributeType) _value_15).getOperator();
          String _literal_6 = _operator_3.getLiteral();
          String _literal_7 = Operator.DIFFERENT.getLiteral();
          boolean _equals_4 = _literal_6.equals(_literal_7);
          if (_equals_4) {
            operator_1 = "<>";
          }
          boolean isChanged_1 = this.isChanged(attev_1, attributes);
          if ((isChanged_1 == false)) {
            attConstraint_1.type = "exists";
            AttributeEvaluationType _value_16 = attev_1.getValue();
            if ((_value_16 instanceof StringType)) {
              String _substring_8 = className.substring(0, 1);
              String _lowerCase_8 = _substring_8.toLowerCase();
              String _plus_40 = ((className + ".allInstances()->exists(") + _lowerCase_8);
              String _plus_41 = (_plus_40 + " | ");
              String _substring_9 = className.substring(0, 1);
              String _lowerCase_9 = _substring_9.toLowerCase();
              String _plus_42 = (_plus_41 + _lowerCase_9);
              String _plus_43 = (_plus_42 + ".");
              EAttribute _name_8 = attev_1.getName();
              String _name_9 = _name_8.getName();
              String _plus_44 = (_plus_43 + _name_9);
              String _plus_45 = (_plus_44 + " ");
              String _plus_46 = (_plus_45 + operator_1);
              String _plus_47 = (_plus_46 + " \'");
              AttributeEvaluationType _value_17 = attev_1.getValue();
              String _value_18 = ((SpecificStringType) _value_17).getValue();
              String _plus_48 = (_plus_47 + _value_18);
              String _plus_49 = (_plus_48 + "\')");
              attConstraint_1.text = _plus_49;
            }
            AttributeEvaluationType _value_19 = attev_1.getValue();
            if ((_value_19 instanceof DoubleType)) {
              String _substring_10 = className.substring(0, 1);
              String _lowerCase_10 = _substring_10.toLowerCase();
              String _plus_50 = ((className + ".allInstances()->exists(") + _lowerCase_10);
              String _plus_51 = (_plus_50 + " | ");
              String _substring_11 = className.substring(0, 1);
              String _lowerCase_11 = _substring_11.toLowerCase();
              String _plus_52 = (_plus_51 + _lowerCase_11);
              String _plus_53 = (_plus_52 + ".");
              EAttribute _name_10 = attev_1.getName();
              String _name_11 = _name_10.getName();
              String _plus_54 = (_plus_53 + _name_11);
              String _plus_55 = (_plus_54 + " ");
              String _plus_56 = (_plus_55 + operator_1);
              String _plus_57 = (_plus_56 + " ");
              AttributeEvaluationType _value_20 = attev_1.getValue();
              double _value_21 = ((SpecificDoubleType) _value_20).getValue();
              String _plus_58 = (_plus_57 + Double.valueOf(_value_21));
              String _plus_59 = (_plus_58 + ")");
              attConstraint_1.text = _plus_59;
            }
            AttributeEvaluationType _value_22 = attev_1.getValue();
            if ((_value_22 instanceof BooleanType)) {
              String _substring_12 = className.substring(0, 1);
              String _lowerCase_12 = _substring_12.toLowerCase();
              String _plus_60 = ((className + ".allInstances()->exists(") + _lowerCase_12);
              String _plus_61 = (_plus_60 + " | ");
              String _substring_13 = className.substring(0, 1);
              String _lowerCase_13 = _substring_13.toLowerCase();
              String _plus_62 = (_plus_61 + _lowerCase_13);
              String _plus_63 = (_plus_62 + ".");
              EAttribute _name_12 = attev_1.getName();
              String _name_13 = _name_12.getName();
              String _plus_64 = (_plus_63 + _name_13);
              String _plus_65 = (_plus_64 + " ");
              String _plus_66 = (_plus_65 + operator_1);
              String _plus_67 = (_plus_66 + " ");
              AttributeEvaluationType _value_23 = attev_1.getValue();
              boolean _isValue_1 = ((SpecificBooleanType) _value_23).isValue();
              String _plus_68 = (_plus_67 + Boolean.valueOf(_isValue_1));
              String _plus_69 = (_plus_68 + ")");
              attConstraint_1.text = _plus_69;
            }
            AttributeEvaluationType _value_24 = attev_1.getValue();
            if ((_value_24 instanceof IntegerType)) {
              String _substring_14 = className.substring(0, 1);
              String _lowerCase_14 = _substring_14.toLowerCase();
              String _plus_70 = ((className + ".allInstances()->exists(") + _lowerCase_14);
              String _plus_71 = (_plus_70 + " | ");
              String _substring_15 = className.substring(0, 1);
              String _lowerCase_15 = _substring_15.toLowerCase();
              String _plus_72 = (_plus_71 + _lowerCase_15);
              String _plus_73 = (_plus_72 + ".");
              EAttribute _name_14 = attev_1.getName();
              String _name_15 = _name_14.getName();
              String _plus_74 = (_plus_73 + _name_15);
              String _plus_75 = (_plus_74 + " ");
              String _plus_76 = (_plus_75 + operator_1);
              String _plus_77 = (_plus_76 + " ");
              AttributeEvaluationType _value_25 = attev_1.getValue();
              int _value_26 = ((SpecificIntegerType) _value_25).getValue();
              String _plus_78 = (_plus_77 + Integer.valueOf(_value_26));
              String _plus_79 = (_plus_78 + ")");
              attConstraint_1.text = _plus_79;
            }
            WodelUseGenerator.Constraint _constraint_1 = this.getConstraint(constraints, attConstraint_1);
            boolean _equals_5 = Objects.equal(_constraint_1, null);
            if (_equals_5) {
              constraints.add(attConstraint_1);
              this.storeMutatorName(attConstraint_1, blockName, mutName);
            }
          }
        }
      }
    }
  }
  
  public String getClassName(final ObSelectionStrategy object) {
    String className = "";
    boolean _notEquals = (!Objects.equal(object, null));
    if (_notEquals) {
      if ((object instanceof RandomTypeSelection)) {
        EClass _type = ((RandomTypeSelection)object).getType();
        String _name = _type.getName();
        className = _name;
      }
      if ((object instanceof CompleteTypeSelection)) {
        EClass _type_1 = ((CompleteTypeSelection)object).getType();
        String _name_1 = _type_1.getName();
        className = _name_1;
      }
      if ((object instanceof SpecificObjectSelection)) {
        final SpecificObjectSelection selection = ((SpecificObjectSelection) object);
        ObjectEmitter _objSel = selection.getObjSel();
        if ((_objSel instanceof CreateObjectMutator)) {
          ObjectEmitter _objSel_1 = selection.getObjSel();
          EClass _type_2 = _objSel_1.getType();
          String _name_2 = _type_2.getName();
          className = _name_2;
        }
        ObjectEmitter _objSel_2 = selection.getObjSel();
        if ((_objSel_2 instanceof SelectObjectMutator)) {
          ObjectEmitter _objSel_3 = selection.getObjSel();
          ObSelectionStrategy _object = ((SelectObjectMutator) _objSel_3).getObject();
          EClass _type_3 = _object.getType();
          String _name_3 = _type_3.getName();
          className = _name_3;
        }
        ObjectEmitter _objSel_4 = selection.getObjSel();
        if ((_objSel_4 instanceof SelectSampleMutator)) {
          ObjectEmitter _objSel_5 = selection.getObjSel();
          String _selectSampleMutatorHelper = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_5));
          className = _selectSampleMutatorHelper;
        }
        ObjectEmitter _objSel_6 = selection.getObjSel();
        if ((_objSel_6 instanceof CloneObjectMutator)) {
          ObjectEmitter _objSel_7 = selection.getObjSel();
          EClass _type_4 = _objSel_7.getType();
          String _name_4 = _type_4.getName();
          className = _name_4;
        }
        ObjectEmitter _objSel_8 = selection.getObjSel();
        if ((_objSel_8 instanceof ModifyInformationMutator)) {
          ObjectEmitter _objSel_9 = selection.getObjSel();
          ModifyInformationMutator modifyMutator = ((ModifyInformationMutator) _objSel_9);
          ObSelectionStrategy _object_1 = modifyMutator.getObject();
          if ((_object_1 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_2 = modifyMutator.getObject();
            EClass _type_5 = _object_2.getType();
            String _name_5 = _type_5.getName();
            className = _name_5;
          }
          ObSelectionStrategy _object_3 = modifyMutator.getObject();
          if ((_object_3 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_4 = modifyMutator.getObject();
            EClass _type_6 = _object_4.getType();
            String _name_6 = _type_6.getName();
            className = _name_6;
          }
          ObSelectionStrategy _object_5 = modifyMutator.getObject();
          if ((_object_5 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_6 = modifyMutator.getObject();
            String _className = this.getClassName(_object_6);
            className = _className;
          }
          ObSelectionStrategy _object_7 = modifyMutator.getObject();
          if ((_object_7 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_8 = modifyMutator.getObject();
            String _className_1 = this.getClassName(_object_8);
            className = _className_1;
          }
        }
      }
      if ((object instanceof SpecificClosureSelection)) {
        final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) object);
        ObjectEmitter _objSel_10 = selection_1.getObjSel();
        if ((_objSel_10 instanceof CreateObjectMutator)) {
          ObjectEmitter _objSel_11 = selection_1.getObjSel();
          EClass _type_7 = _objSel_11.getType();
          String _name_7 = _type_7.getName();
          className = _name_7;
        }
        ObjectEmitter _objSel_12 = selection_1.getObjSel();
        if ((_objSel_12 instanceof SelectObjectMutator)) {
          ObjectEmitter _objSel_13 = selection_1.getObjSel();
          ObSelectionStrategy _object_9 = ((SelectObjectMutator) _objSel_13).getObject();
          EClass _type_8 = _object_9.getType();
          String _name_8 = _type_8.getName();
          className = _name_8;
        }
        ObjectEmitter _objSel_14 = selection_1.getObjSel();
        if ((_objSel_14 instanceof SelectSampleMutator)) {
          ObjectEmitter _objSel_15 = selection_1.getObjSel();
          String _selectSampleMutatorHelper_1 = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_15));
          className = _selectSampleMutatorHelper_1;
        }
        ObjectEmitter _objSel_16 = selection_1.getObjSel();
        if ((_objSel_16 instanceof CloneObjectMutator)) {
          ObjectEmitter _objSel_17 = selection_1.getObjSel();
          EClass _type_9 = _objSel_17.getType();
          String _name_9 = _type_9.getName();
          className = _name_9;
        }
        ObjectEmitter _objSel_18 = selection_1.getObjSel();
        if ((_objSel_18 instanceof ModifyInformationMutator)) {
          ObjectEmitter _objSel_19 = selection_1.getObjSel();
          EClass _type_10 = _objSel_19.getType();
          String _name_10 = _type_10.getName();
          className = _name_10;
        }
      }
    }
    return className;
  }
  
  public void compile(final List<ReferenceSet> references, final List<WodelUseGenerator.Constraint> constraints, final String blockName, final String mutName) {
    for (final ReferenceSet ref : references) {
      {
        WodelUseGenerator.Constraint constraint = new WodelUseGenerator.Constraint();
        String className = "";
        ObSelectionStrategy _object = ref.getObject();
        boolean _notEquals = (!Objects.equal(_object, null));
        if (_notEquals) {
          constraint.type = "size";
          ObSelectionStrategy _object_1 = ref.getObject();
          if ((_object_1 instanceof RandomTypeSelection)) {
            ObSelectionStrategy _object_2 = ref.getObject();
            EClass _type = _object_2.getType();
            String _name = _type.getName();
            String _encodeWord = UseUtils.encodeWord(_name);
            className = _encodeWord;
            ObSelectionStrategy _object_3 = ref.getObject();
            Expression _expression = _object_3.getExpression();
            boolean _notEquals_1 = (!Objects.equal(_expression, null));
            if (_notEquals_1) {
              ObSelectionStrategy _object_4 = ref.getObject();
              Expression _expression_1 = _object_4.getExpression();
              this.compile(_expression_1, className, constraints, blockName, mutName);
            }
          }
          ObSelectionStrategy _object_5 = ref.getObject();
          if ((_object_5 instanceof CompleteTypeSelection)) {
            ObSelectionStrategy _object_6 = ref.getObject();
            EClass _type_1 = _object_6.getType();
            String _name_1 = _type_1.getName();
            String _encodeWord_1 = UseUtils.encodeWord(_name_1);
            className = _encodeWord_1;
          }
          ObSelectionStrategy _object_7 = ref.getObject();
          if ((_object_7 instanceof SpecificObjectSelection)) {
            ObSelectionStrategy _object_8 = ref.getObject();
            final SpecificObjectSelection selection = ((SpecificObjectSelection) _object_8);
            ObjectEmitter _objSel = selection.getObjSel();
            boolean _equals = ((_objSel instanceof CreateObjectMutator) == false);
            if (_equals) {
              ObjectEmitter _objSel_1 = selection.getObjSel();
              if ((_objSel_1 instanceof SelectObjectMutator)) {
                ObjectEmitter _objSel_2 = selection.getObjSel();
                ObSelectionStrategy _object_9 = ((SelectObjectMutator) _objSel_2).getObject();
                EClass _type_2 = _object_9.getType();
                String _name_2 = _type_2.getName();
                String _encodeWord_2 = UseUtils.encodeWord(_name_2);
                className = _encodeWord_2;
              }
              ObjectEmitter _objSel_3 = selection.getObjSel();
              if ((_objSel_3 instanceof SelectSampleMutator)) {
                ObjectEmitter _objSel_4 = selection.getObjSel();
                String _selectSampleMutatorHelper = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_4));
                String _encodeWord_3 = UseUtils.encodeWord(_selectSampleMutatorHelper);
                className = _encodeWord_3;
              }
              ObjectEmitter _objSel_5 = selection.getObjSel();
              if ((_objSel_5 instanceof CloneObjectMutator)) {
                ObjectEmitter _objSel_6 = selection.getObjSel();
                EClass _type_3 = _objSel_6.getType();
                String _name_3 = _type_3.getName();
                String _encodeWord_4 = UseUtils.encodeWord(_name_3);
                className = _encodeWord_4;
              }
              ObjectEmitter _objSel_7 = selection.getObjSel();
              if ((_objSel_7 instanceof ModifyInformationMutator)) {
                ObjectEmitter _objSel_8 = selection.getObjSel();
                ModifyInformationMutator modifyMutator = ((ModifyInformationMutator) _objSel_8);
                ObSelectionStrategy _object_10 = modifyMutator.getObject();
                if ((_object_10 instanceof RandomTypeSelection)) {
                  ObSelectionStrategy _object_11 = modifyMutator.getObject();
                  EClass _type_4 = _object_11.getType();
                  String _name_4 = _type_4.getName();
                  String _encodeWord_5 = UseUtils.encodeWord(_name_4);
                  className = _encodeWord_5;
                }
                ObSelectionStrategy _object_12 = modifyMutator.getObject();
                if ((_object_12 instanceof CompleteTypeSelection)) {
                  ObSelectionStrategy _object_13 = modifyMutator.getObject();
                  EClass _type_5 = _object_13.getType();
                  String _name_5 = _type_5.getName();
                  String _encodeWord_6 = UseUtils.encodeWord(_name_5);
                  className = _encodeWord_6;
                }
                ObSelectionStrategy _object_14 = modifyMutator.getObject();
                if ((_object_14 instanceof SpecificObjectSelection)) {
                  ObSelectionStrategy _object_15 = modifyMutator.getObject();
                  String _className = this.getClassName(_object_15);
                  String _encodeWord_7 = UseUtils.encodeWord(_className);
                  className = _encodeWord_7;
                }
                ObSelectionStrategy _object_16 = modifyMutator.getObject();
                if ((_object_16 instanceof SpecificClosureSelection)) {
                  ObSelectionStrategy _object_17 = modifyMutator.getObject();
                  String _className_1 = this.getClassName(_object_17);
                  String _encodeWord_8 = UseUtils.encodeWord(_className_1);
                  className = _encodeWord_8;
                }
              }
            }
          }
          ObSelectionStrategy _object_18 = ref.getObject();
          if ((_object_18 instanceof SpecificClosureSelection)) {
            ObSelectionStrategy _object_19 = ref.getObject();
            final SpecificClosureSelection selection_1 = ((SpecificClosureSelection) _object_19);
            ObjectEmitter _objSel_9 = selection_1.getObjSel();
            boolean _equals_1 = ((_objSel_9 instanceof CreateObjectMutator) == false);
            if (_equals_1) {
              ObjectEmitter _objSel_10 = selection_1.getObjSel();
              if ((_objSel_10 instanceof SelectObjectMutator)) {
                ObjectEmitter _objSel_11 = selection_1.getObjSel();
                ObSelectionStrategy _object_20 = ((SelectObjectMutator) _objSel_11).getObject();
                EClass _type_6 = _object_20.getType();
                String _name_6 = _type_6.getName();
                String _encodeWord_9 = UseUtils.encodeWord(_name_6);
                className = _encodeWord_9;
              }
              ObjectEmitter _objSel_12 = selection_1.getObjSel();
              if ((_objSel_12 instanceof SelectSampleMutator)) {
                ObjectEmitter _objSel_13 = selection_1.getObjSel();
                String _selectSampleMutatorHelper_1 = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_13));
                String _encodeWord_10 = UseUtils.encodeWord(_selectSampleMutatorHelper_1);
                className = _encodeWord_10;
              }
              ObjectEmitter _objSel_14 = selection_1.getObjSel();
              if ((_objSel_14 instanceof CloneObjectMutator)) {
                ObjectEmitter _objSel_15 = selection_1.getObjSel();
                EClass _type_7 = _objSel_15.getType();
                String _name_7 = _type_7.getName();
                String _encodeWord_11 = UseUtils.encodeWord(_name_7);
                className = _encodeWord_11;
              }
              ObjectEmitter _objSel_16 = selection_1.getObjSel();
              if ((_objSel_16 instanceof ModifyInformationMutator)) {
                ObjectEmitter _objSel_17 = selection_1.getObjSel();
                EClass _type_8 = _objSel_17.getType();
                String _name_8 = _type_8.getName();
                String _encodeWord_12 = UseUtils.encodeWord(_name_8);
                className = _encodeWord_12;
              }
            }
          }
          int _length = className.length();
          boolean _greaterThan = (_length > 0);
          if (_greaterThan) {
            String _encodeWord_13 = UseUtils.encodeWord(className);
            String _plus = (_encodeWord_13 + ".allInstances()->size()");
            constraint.text = _plus;
            constraint.className = className;
          }
        } else {
          if ((ref instanceof ReferenceInit)) {
            ReferenceInit refInit = ((ReferenceInit) ref);
            ObSelectionStrategy object = refInit.getObject();
            constraint.type = "size";
            if ((object instanceof RandomTypeSelection)) {
              EClass _type_9 = ((RandomTypeSelection)object).getType();
              String _name_9 = _type_9.getName();
              className = _name_9;
              Expression _expression_2 = ((RandomTypeSelection)object).getExpression();
              boolean _notEquals_2 = (!Objects.equal(_expression_2, null));
              if (_notEquals_2) {
                Expression _expression_3 = ((RandomTypeSelection)object).getExpression();
                this.compile(_expression_3, className, constraints, blockName, mutName);
              }
            }
            if ((object instanceof CompleteTypeSelection)) {
              EClass _type_10 = ((CompleteTypeSelection)object).getType();
              String _name_10 = _type_10.getName();
              String _encodeWord_14 = UseUtils.encodeWord(_name_10);
              className = _encodeWord_14;
            }
            if ((object instanceof SpecificObjectSelection)) {
              final SpecificObjectSelection selection_2 = ((SpecificObjectSelection) object);
              ObjectEmitter _objSel_18 = selection_2.getObjSel();
              boolean _equals_2 = ((_objSel_18 instanceof CreateObjectMutator) == false);
              if (_equals_2) {
                ObjectEmitter _objSel_19 = selection_2.getObjSel();
                if ((_objSel_19 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_20 = selection_2.getObjSel();
                  ObSelectionStrategy _object_21 = ((SelectObjectMutator) _objSel_20).getObject();
                  EClass _type_11 = _object_21.getType();
                  String _name_11 = _type_11.getName();
                  String _encodeWord_15 = UseUtils.encodeWord(_name_11);
                  className = _encodeWord_15;
                }
                ObjectEmitter _objSel_21 = selection_2.getObjSel();
                if ((_objSel_21 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_22 = selection_2.getObjSel();
                  String _selectSampleMutatorHelper_2 = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_22));
                  String _encodeWord_16 = UseUtils.encodeWord(_selectSampleMutatorHelper_2);
                  className = _encodeWord_16;
                }
                ObjectEmitter _objSel_23 = selection_2.getObjSel();
                if ((_objSel_23 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_24 = selection_2.getObjSel();
                  EClass _type_12 = _objSel_24.getType();
                  String _name_12 = _type_12.getName();
                  String _encodeWord_17 = UseUtils.encodeWord(_name_12);
                  className = _encodeWord_17;
                }
                ObjectEmitter _objSel_25 = selection_2.getObjSel();
                if ((_objSel_25 instanceof ModifyInformationMutator)) {
                  ObjectEmitter _objSel_26 = selection_2.getObjSel();
                  EClass _type_13 = _objSel_26.getType();
                  String _name_13 = _type_13.getName();
                  String _encodeWord_18 = UseUtils.encodeWord(_name_13);
                  className = _encodeWord_18;
                }
              }
            }
            if ((object instanceof SpecificClosureSelection)) {
              final SpecificClosureSelection selection_3 = ((SpecificClosureSelection) object);
              ObjectEmitter _objSel_27 = selection_3.getObjSel();
              boolean _equals_3 = ((_objSel_27 instanceof CreateObjectMutator) == false);
              if (_equals_3) {
                ObjectEmitter _objSel_28 = selection_3.getObjSel();
                if ((_objSel_28 instanceof SelectObjectMutator)) {
                  ObjectEmitter _objSel_29 = selection_3.getObjSel();
                  ObSelectionStrategy _object_22 = ((SelectObjectMutator) _objSel_29).getObject();
                  EClass _type_14 = _object_22.getType();
                  String _name_14 = _type_14.getName();
                  String _encodeWord_19 = UseUtils.encodeWord(_name_14);
                  className = _encodeWord_19;
                }
                ObjectEmitter _objSel_30 = selection_3.getObjSel();
                if ((_objSel_30 instanceof SelectSampleMutator)) {
                  ObjectEmitter _objSel_31 = selection_3.getObjSel();
                  String _selectSampleMutatorHelper_3 = WodelScopeProvider.selectSampleMutatorHelper(((SelectSampleMutator) _objSel_31));
                  String _encodeWord_20 = UseUtils.encodeWord(_selectSampleMutatorHelper_3);
                  className = _encodeWord_20;
                }
                ObjectEmitter _objSel_32 = selection_3.getObjSel();
                if ((_objSel_32 instanceof CloneObjectMutator)) {
                  ObjectEmitter _objSel_33 = selection_3.getObjSel();
                  EClass _type_15 = _objSel_33.getType();
                  String _name_15 = _type_15.getName();
                  String _encodeWord_21 = UseUtils.encodeWord(_name_15);
                  className = _encodeWord_21;
                }
                ObjectEmitter _objSel_34 = selection_3.getObjSel();
                if ((_objSel_34 instanceof ModifyInformationMutator)) {
                  ObjectEmitter _objSel_35 = selection_3.getObjSel();
                  EClass _type_16 = _objSel_35.getType();
                  String _name_16 = _type_16.getName();
                  String _encodeWord_22 = UseUtils.encodeWord(_name_16);
                  className = _encodeWord_22;
                }
              }
            }
            int _length_1 = className.length();
            boolean _greaterThan_1 = (_length_1 > 0);
            if (_greaterThan_1) {
              String _encodeWord_23 = UseUtils.encodeWord(className);
              String _plus_1 = (_encodeWord_23 + ".allInstances()->size()");
              constraint.text = _plus_1;
              constraint.className = className;
            }
          }
        }
        int _length_2 = constraint.text.length();
        boolean _greaterThan_2 = (_length_2 > 0);
        if (_greaterThan_2) {
          WodelUseGenerator.Constraint _constraint = this.getConstraint(constraints, constraint);
          boolean _equals_4 = Objects.equal(_constraint, null);
          if (_equals_4) {
            constraints.add(constraint);
            this.storeMutatorName(constraint, blockName, mutName);
          }
        }
      }
    }
  }
}
