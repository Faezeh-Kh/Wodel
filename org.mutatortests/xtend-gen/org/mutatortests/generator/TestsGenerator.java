/**
 * generated by Xtext
 */
package org.mutatortests.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import manager.ModelManager;
import manager.WodelContext;
import mutatortests.Configuration;
import mutatortests.MutatorTests;
import mutatortests.Parameter;
import mutatortests.Test;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TestsGenerator implements IGenerator {
  private String fileName;
  
  private String pageName;
  
  private int num;
  
  private HashMap<Test, ArrayList<String>> diagrams;
  
  private HashMap<Test, ArrayList<String>> rand;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    int i = 0;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<MutatorTests> _filter = Iterables.<MutatorTests>filter(_iterable, MutatorTests.class);
    for (final MutatorTests e : _filter) {
      {
        if ((i == 0)) {
          String _project = WodelContext.getProject();
          String _plus = ("html/" + _project);
          String _plus_1 = (_plus + ".html");
          this.fileName = _plus_1;
          String _project_1 = WodelContext.getProject();
          String _plus_2 = (_project_1 + ".html");
          this.pageName = _plus_2;
        } else {
          String _project_2 = WodelContext.getProject();
          String _plus_3 = ("html/" + _project_2);
          String _plus_4 = (_plus_3 + Integer.valueOf(i));
          String _plus_5 = (_plus_4 + ".html");
          this.fileName = _plus_5;
          String _project_3 = WodelContext.getProject();
          String _plus_6 = (_project_3 + Integer.valueOf(i));
          String _plus_7 = (_plus_6 + ".html");
          this.pageName = _plus_7;
        }
        CharSequence _compile = this.compile(e);
        fsa.generateFile(this.fileName, _compile);
        i++;
      }
    }
  }
  
  public CharSequence compile(final MutatorTests mts) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!-- DIAGRAMS: ");
    HashMap<Test, ArrayList<String>> _hashMap = new HashMap<Test, ArrayList<String>>();
    _builder.append(this.diagrams = _hashMap, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests = mts.getTests();
      for(final Test test : _tests) {
        _builder.append("\t   \t\t");
        String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
        String _plus = (_workspaceAbsolutePath + "/");
        String _project = WodelContext.getProject();
        String _plus_1 = (_plus + _project);
        String _plus_2 = (_plus_1 + "/src-gen/html/diagrams/");
        String _source = test.getSource();
        String _replace = _source.replace(".model", "");
        String _plus_3 = (_plus_2 + _replace);
        File folder = new File(_plus_3);
        _builder.newLineIfNotEmpty();
        _builder.append("\t   \t\t");
        ArrayList<String> fileNames = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        {
          boolean _isDirectory = folder.isDirectory();
          boolean _equals = (_isDirectory == true);
          if (_equals) {
            {
              File[] _listFiles = folder.listFiles();
              for(final File f : _listFiles) {
                {
                  String _name = f.getName();
                  boolean _endsWith = _name.endsWith(".png");
                  if (_endsWith) {
                    String _name_1 = f.getName();
                    boolean _add = fileNames.add(_name_1);
                    _builder.append(_add, "");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        ArrayList<String> _put = this.diagrams.put(test, fileNames);
        _builder.append(_put, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("<!-- RANDOM ARRAY: ");
    HashMap<Test, ArrayList<String>> _hashMap_1 = new HashMap<Test, ArrayList<String>>();
    _builder.append(this.rand = _hashMap_1, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_1 = mts.getTests();
      for(final Test test_1 : _tests_1) {
        _builder.append("<!--RANDOM ARRAY: ");
        ArrayList<String> entry = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        ArrayList<String> order = new ArrayList<String>();
        _builder.newLineIfNotEmpty();
        {
          ArrayList<String> _get = this.diagrams.get(test_1);
          for(final String diagram : _get) {
            boolean _add_1 = order.add(diagram);
            _builder.append(_add_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ArrayList<String> _get_1 = this.diagrams.get(test_1);
          for(final String diagram_1 : _get_1) {
            _builder.append("\t");
            int rnd = ModelManager.getRandomIndex(order);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _get_2 = order.get(rnd);
            boolean _add_2 = entry.add(_get_2);
            _builder.append(_add_2, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _remove = order.remove(rnd);
            _builder.append(_remove, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        ArrayList<String> _put_1 = this.rand.put(test_1, entry);
        _builder.append(_put_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("-->");
    _builder.newLine();
    {
      Configuration _config = mts.getConfig();
      Parameter _showall = _config.getShowall();
      boolean _equals_1 = Objects.equal(_showall, Parameter.YES);
      if (_equals_1) {
        _builder.append("    \t");
        CharSequence _showall_1 = this.showall(mts);
        _builder.append(_showall_1, "    \t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Configuration _config_1 = mts.getConfig();
      Parameter _showall_2 = _config_1.getShowall();
      boolean _equals_2 = Objects.equal(_showall_2, Parameter.NO);
      if (_equals_2) {
        _builder.append("    \t");
        CharSequence _showone = this.showone(mts);
        _builder.append(_showone, "    \t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence showall(final MutatorTests mts) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
    _builder.newLine();
    _builder.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/wodel.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/menu.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/table.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>Wodel</title>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<body style=\"background-color: white;\">");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script src=\"js/jquery-2.1.4.min.js\" type=\"text/javascript\"></script>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script language=\"javascript\" type=\"text/javascript\">");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("var currentTotal = ");
    EList<Test> _tests = mts.getTests();
    int _size = _tests.size();
    _builder.append(_size, "    \t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_1 = mts.getTests();
      for(final Test test : _tests_1) {
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("var exercise");
        _builder.append(this.num, "");
        _builder.append("Mark = false;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    \t");
    _builder.append("function show(num) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("var exercise = null;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "    \t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_2 = mts.getTests();
      for(final Test test_1 : _tests_2) {
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "    \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("exercise = document.getElementById(\'exercise-");
        _builder.append(this.num, "    \t\t");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("if (num == ");
        _builder.append(this.num, "    \t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("\t");
        _builder.append("exercise.style.display = \'block\';");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("\t");
        _builder.append("exercise.style.display = \'none\';");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("function check(num, diagram) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("var image = null;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("var currentMark = 0;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "    \t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_3 = mts.getTests();
      for(final Test test_2 : _tests_3) {
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "    \t\t");
        _builder.newLineIfNotEmpty();
        {
          ArrayList<String> _get = this.diagrams.get(test_2);
          for(final String diagram : _get) {
            _builder.append("image = document.getElementById(\'td-exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram, "");
            _builder.append("\');");
            _builder.newLineIfNotEmpty();
            _builder.append("if (num == ");
            _builder.append(this.num, "");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("if (diagram == \'");
            _builder.append(diagram, "\t");
            _builder.append("\') {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("image.style.border = \'1px solid #000000\';");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if (diagram == \'");
            String _source = test_2.getSource();
            String _replace = _source.replace(".model", ".png");
            _builder.append(_replace, "\t\t");
            _builder.append("\') {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("exercise");
            _builder.append(this.num, "\t\t\t");
            _builder.append("Mark = true;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-null-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'none\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-accept-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'block\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-wrong-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'none\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'mark-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("exercise");
            _builder.append(this.num, "\t\t\t");
            _builder.append("Mark = false;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-null-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'none\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-accept-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'none\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'td-score-wrong-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').style.display = \'block\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("document.getElementById(\'mark-");
            _builder.append(this.num, "\t\t\t");
            _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"wrong\" style=\"height: 40px; width: 40px;\" />\';");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t    \t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("image.style.border = \'\';");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            {
              Configuration _config = mts.getConfig();
              Parameter _retry = _config.getRetry();
              boolean _equals = Objects.equal(_retry, Parameter.NO);
              if (_equals) {
                _builder.append("document.getElementById(\'a-exercise-");
                _builder.append(this.num, "");
                _builder.append("-");
                _builder.append(diagram, "");
                _builder.append("\').onclick = function() { return; }");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("   \t\t\t");
        _builder.append("if (exercise");
        _builder.append(this.num, "   \t\t\t");
        _builder.append("Mark == true) {");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t\t");
        _builder.append("currentMark = currentMark + 1;");
        _builder.newLine();
        _builder.append("   \t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t\t");
    _builder.append("document.getElementById(\'current-mark\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal + \'</label>\';//SETS THE CURRENT MARK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("window.location.replace(window.location);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<table style=\"height: 100%;\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<td valign=\"top\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div id=\"pretty-menu\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_4 = mts.getTests();
      for(final Test test_3 : _tests_4) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1), "");
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<li class=\"score-");
        _builder.append(this.num, "");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"score-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"score-");
        _builder.append(this.num, "");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-null-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: block;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/null.png\" alt=\"null\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-accept-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-wrong-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<a href=\"#\" class=\"ex-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"ex-");
        _builder.append(this.num, "");
        _builder.append("\" onclick=\"show(");
        _builder.append(this.num, "");
        _builder.append(");\">Exercise ");
        _builder.append(this.num, "");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("<li><p class=\"current-mark\" id=\"current-mark\"></p></li>");
    _builder.newLine();
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_5 = mts.getTests();
      for(final Test test_4 : _tests_5) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1), "");
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<td class=\"exercise-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num, "");
        _builder.append("\" valign=\"top\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<fieldset valign=\"top\">");
        _builder.newLine();
        _builder.append("<legend class=\"text\"><font color=\"black\">");
        String _question = test_4.getQuestion();
        _builder.append(_question, "");
        _builder.append("&nbsp;&nbsp;&nbsp;<div class=\"mark-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"mark-");
        _builder.append(this.num, "");
        _builder.append("\"></div></font></legend>");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td valign=\"top\">");
        _builder.newLine();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        {
          ArrayList<String> _get_1 = this.rand.get(test_4);
          for(final String diagram_1 : _get_1) {
            _builder.append("<td id=\"td-exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\" valign=\"top\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<a href=\"#\" class=\"a-exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\" id=\"a-exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\" onclick=\"check(");
            _builder.append(this.num, "");
            _builder.append(",\'");
            _builder.append(diagram_1, "");
            _builder.append("\');\"><img src=\"diagrams/");
            String _source_1 = test_4.getSource();
            String _replace_1 = _source_1.replace(".model", "");
            _builder.append(_replace_1, "");
            _builder.append("/");
            _builder.append(diagram_1, "");
            _builder.append("\" title=\"exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\" id=\"exercise-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\" name=\"");
            _builder.append(" class=\"images\" /></a>");
            _builder.newLineIfNotEmpty();
            _builder.append("</td>");
            _builder.newLine();
          }
        }
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</fieldset>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
      }
    }
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence showone(final MutatorTests mts) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
    _builder.newLine();
    _builder.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/wodel.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/menu.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/table.css\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>Wodel</title>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<body style=\"background-color: white;\">");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script src=\"js/jquery-2.1.4.min.js\" type=\"text/javascript\"></script>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script language=\"javascript\" type=\"text/javascript\">");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("var currentTotal = ");
    EList<Test> _tests = mts.getTests();
    int _size = _tests.size();
    _builder.append(_size, "    \t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_1 = mts.getTests();
      for(final Test test : _tests_1) {
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "");
        _builder.newLineIfNotEmpty();
        _builder.append("var exercise");
        _builder.append(this.num, "");
        _builder.append("Mark = false;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    \t");
    _builder.append("function show(num) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("var exercise = null;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "    \t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_2 = mts.getTests();
      for(final Test test_1 : _tests_2) {
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "    \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("exercise = document.getElementById(\'exercise-");
        _builder.append(this.num, "    \t\t");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("if (num == ");
        _builder.append(this.num, "    \t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("\t");
        _builder.append("exercise.style.display = \'block\';");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("\t");
        _builder.append("exercise.style.display = \'none\';");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("function right(num, diagram) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("var image = null;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("var currentMark = 0;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "    \t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_3 = mts.getTests();
      for(final Test test_2 : _tests_3) {
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "    \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("//DIAGRAM: ");
        ArrayList<String> _get = this.rand.get(test_2);
        String diagram = _get.get(0);
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("image = document.getElementById(\'td-exercise-");
        _builder.append(this.num, "    \t\t");
        _builder.append("-");
        _builder.append(diagram, "    \t\t");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("if (num == ");
        _builder.append(this.num, "    \t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t");
        _builder.append("if (diagram == \'");
        _builder.append(diagram, "    \t\t\t");
        _builder.append("\') {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("image.style.border = \'1px solid #000000\';");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("if (diagram == \'");
        String _source = test_2.getSource();
        String _replace = _source.replace(".model", ".png");
        _builder.append(_replace, "    \t\t\t\t");
        _builder.append("\') {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("exercise");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("Mark = true;");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-null-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-accept-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'block\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-wrong-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'mark-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t\t\t\t");
        _builder.append("exercise");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("Mark = false;");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-null-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-accept-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-wrong-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'block\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'mark-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t    \t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("image.style.border = \'\';");
        _builder.newLine();
        _builder.append("    \t\t\t");
        _builder.append("}");
        _builder.newLine();
        {
          Configuration _config = mts.getConfig();
          Parameter _retry = _config.getRetry();
          boolean _equals = Objects.equal(_retry, Parameter.NO);
          if (_equals) {
            _builder.append("document.getElementById(\'a-right-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram, "");
            _builder.append("\').onclick = function() { return; }");
            _builder.newLineIfNotEmpty();
            _builder.append("document.getElementById(\'a-wrong-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram, "");
            _builder.append("\').onclick = function() { return; }");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("   \t\t\t");
        _builder.append("if (exercise");
        _builder.append(this.num, "   \t\t\t");
        _builder.append("Mark == true) {");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t\t");
        _builder.append("currentMark = currentMark + 1;");
        _builder.newLine();
        _builder.append("   \t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t\t");
    _builder.append("document.getElementById(\'current-mark\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal + \'</label>\';//SETS THE CURRENT MARK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("window.location.replace(window.location);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("function wrong(num, diagram) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("var image = null;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("var currentMark = 0;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//COUNTER: ");
    _builder.append(this.num = 0, "    \t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_4 = mts.getTests();
      for(final Test test_3 : _tests_4) {
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = (this.num + 1), "    \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("//DIAGRAM: ");
        ArrayList<String> _get_1 = this.rand.get(test_3);
        String diagram_1 = _get_1.get(0);
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("image = document.getElementById(\'td-exercise-");
        _builder.append(this.num, "    \t\t");
        _builder.append("-");
        _builder.append(diagram_1, "    \t\t");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("if (num == ");
        _builder.append(this.num, "    \t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t");
        _builder.append("if (diagram == \'");
        _builder.append(diagram_1, "    \t\t\t");
        _builder.append("\') {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("image.style.border = \'1px solid #000000\';");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("if (diagram != \'");
        String _source_1 = test_3.getSource();
        String _replace_1 = _source_1.replace(".model", ".png");
        _builder.append(_replace_1, "    \t\t\t\t");
        _builder.append("\') {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("exercise");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("Mark = true;");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-null-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-accept-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'block\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-wrong-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'mark-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t\t\t\t");
        _builder.append("exercise");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("Mark = false;");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-null-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-accept-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'none\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'td-score-wrong-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').style.display = \'block\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t\t");
        _builder.append("document.getElementById(\'mark-");
        _builder.append(this.num, "    \t\t\t\t\t");
        _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />\';");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t    \t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("    \t\t\t\t");
        _builder.append("image.style.border = \'\';");
        _builder.newLine();
        _builder.append("    \t\t\t");
        _builder.append("}");
        _builder.newLine();
        {
          Configuration _config_1 = mts.getConfig();
          Parameter _retry_1 = _config_1.getRetry();
          boolean _equals_1 = Objects.equal(_retry_1, Parameter.NO);
          if (_equals_1) {
            _builder.append("document.getElementById(\'a-right-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\').onclick = function() { return; }");
            _builder.newLineIfNotEmpty();
            _builder.append("document.getElementById(\'a-wrong-");
            _builder.append(this.num, "");
            _builder.append("-");
            _builder.append(diagram_1, "");
            _builder.append("\').onclick = function() { return; }");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("   \t\t\t");
        _builder.append("if (exercise");
        _builder.append(this.num, "   \t\t\t");
        _builder.append("Mark == true) {");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t\t");
        _builder.append("currentMark = currentMark + 1;");
        _builder.newLine();
        _builder.append("   \t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t\t");
    _builder.append("document.getElementById(\'current-mark\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal + \'</label>\';//SETS THE CURRENT MARK");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("window.location.replace(window.location);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<table style=\"height: 100%;\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<tr>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<td valign=\"top\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div id=\"pretty-menu\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_5 = mts.getTests();
      for(final Test test_4 : _tests_5) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1), "");
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<li class=\"score-");
        _builder.append(this.num, "");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"score-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"score-");
        _builder.append(this.num, "");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-null-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: block;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/null.png\" alt=\"null\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-accept-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-wrong-");
        _builder.append(this.num, "");
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<a href=\"#\" class=\"ex-");
        _builder.append(this.num, "");
        _builder.append("\" id=\"ex-");
        _builder.append(this.num, "");
        _builder.append("\" onclick=\"show(");
        _builder.append(this.num, "");
        _builder.append(");\">Exercise ");
        _builder.append(this.num, "");
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("<li><p class=\"current-mark\" id=\"current-mark\"></p></li>");
    _builder.newLine();
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_6 = mts.getTests();
      for(final Test test_5 : _tests_6) {
        _builder.append("<!--DIAGRAM: ");
        ArrayList<String> _get_2 = this.rand.get(test_5);
        String diagram_2 = _get_2.get(0);
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1), "\t\t\t");
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<td class=\"exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("\" valign=\"top\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<fieldset valign=\"top\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<legend class=\"text\"><font color=\"black\">");
        String _question = test_5.getQuestion();
        _builder.append(_question, "\t\t\t");
        _builder.append("&nbsp;&nbsp;&nbsp;<div class=\"mark-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("\" id=\"mark-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("\"></div></font></legend>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<td valign=\"top\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<td id=\"td-exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" valign=\"top\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<a href=\"#\" class=\"a-exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" id=\"a-exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\"\"><img src=\"diagrams/");
        String _source_2 = test_5.getSource();
        String _replace_2 = _source_2.replace(".model", "");
        _builder.append(_replace_2, "\t\t\t");
        _builder.append("/");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" title=\"exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" name=\"");
        _builder.append(" class=\"images\" /></a>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<table class=\"pretty\" width=\"100%\">");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<td id=\"td-right-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" valign=\"top\" style=\"text-align:left\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<a href=\"#\" class=\"a-right-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" id=\"a-right-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" onclick=\"right(");
        _builder.append(this.num, "\t\t\t");
        _builder.append(",\'");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\');\"><img src=\"images/accept.png\" alt=\"accept\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<td id=\"td-wrong-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\"\" valign=\"top\" style=\"text-align:right\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("<a href=\"#\" class=\"a-wrong-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" id=\"a-wrong-");
        _builder.append(this.num, "\t\t\t");
        _builder.append("-");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\" onclick=\"wrong(");
        _builder.append(this.num, "\t\t\t");
        _builder.append(",\'");
        _builder.append(diagram_2, "\t\t\t");
        _builder.append("\');\"><img src=\"images/wrong.png\" alt=\"wrong\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</fieldset>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("</td>");
        _builder.newLine();
      }
    }
    _builder.append("</tr>");
    _builder.newLine();
    _builder.append("</table>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
}
