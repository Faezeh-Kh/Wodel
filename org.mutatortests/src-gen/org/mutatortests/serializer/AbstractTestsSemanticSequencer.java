/*
 * generated by Xtext
 */
package org.mutatortests.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import mutatortests.Configuration;
import mutatortests.MutatorTests;
import mutatortests.MutatortestsPackage;
import mutatortests.Test;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mutatortests.services.TestsGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractTestsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TestsGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MutatortestsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MutatortestsPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case MutatortestsPackage.MUTATOR_TESTS:
				sequence_MutatorTests(context, (MutatorTests) semanticObject); 
				return; 
			case MutatortestsPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (retry=Parameter showall=Parameter)
	 */
	protected void sequence_Configuration(EObject context, Configuration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MutatortestsPackage.Literals.CONFIGURATION__RETRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MutatortestsPackage.Literals.CONFIGURATION__RETRY));
			if(transientValues.isValueTransient(semanticObject, MutatortestsPackage.Literals.CONFIGURATION__SHOWALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MutatortestsPackage.Literals.CONFIGURATION__SHOWALL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConfigurationAccess().getRetryParameterEnumRuleCall_2_0(), semanticObject.getRetry());
		feeder.accept(grammarAccess.getConfigurationAccess().getShowallParameterEnumRuleCall_6_0(), semanticObject.getShowall());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (config=Configuration tests+=Test*)
	 */
	protected void sequence_MutatorTests(EObject context, MutatorTests semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (source=EString question=EString)
	 */
	protected void sequence_Test(EObject context, Test semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MutatortestsPackage.Literals.TEST__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MutatortestsPackage.Literals.TEST__SOURCE));
			if(transientValues.isValueTransient(semanticObject, MutatortestsPackage.Literals.TEST__QUESTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MutatortestsPackage.Literals.TEST__QUESTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTestAccess().getSourceEStringParserRuleCall_2_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getTestAccess().getQuestionEStringParserRuleCall_4_0(), semanticObject.getQuestion());
		feeder.finish();
	}
}
