/*
 * generated by Xtext
 */
grammar InternalTests;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mutatortests.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mutatortests.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mutatortests.services.TestsGrammarAccess;

}

@parser::members {

 	private TestsGrammarAccess grammarAccess;
 	
    public InternalTestsParser(TokenStream input, TestsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MutatorTests";	
   	}
   	
   	@Override
   	protected TestsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMutatorTests
entryRuleMutatorTests returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutatorTestsRule()); }
	 iv_ruleMutatorTests=ruleMutatorTests 
	 { $current=$iv_ruleMutatorTests.current; } 
	 EOF 
;

// Rule MutatorTests
ruleMutatorTests returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorTestsAccess().getConfigConfigurationParserRuleCall_0_0()); 
	    }
		lv_config_0_0=ruleConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorTestsRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_0_0, 
        		"Configuration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMutatorTestsAccess().getTestsTestParserRuleCall_1_0()); 
	    }
		lv_tests_1_0=ruleTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutatorTestsRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_1_0, 
        		"Test");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='retry' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getRetryKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigurationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getRetryParameterEnumRuleCall_2_0()); 
	    }
		lv_retry_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"retry",
        		lv_retry_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConfigurationAccess().getCommaKeyword_3());
    }
	otherlv_4='showall' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getShowallKeyword_4());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfigurationAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getShowallParameterEnumRuleCall_6_0()); 
	    }
		lv_showall_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"showall",
        		lv_showall_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='description' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestAccess().getDescriptionKeyword_0());
    }
	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestAccess().getForKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getSourceEStringParserRuleCall_2_0()); 
	    }
		lv_source_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTestAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getQuestionEStringParserRuleCall_4_0()); 
	    }
		lv_question_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"question",
        		lv_question_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Rule Parameter
ruleParameter returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='no' 
	{
        $current = grammarAccess.getParameterAccess().getNoEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParameterAccess().getNoEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='yes' 
	{
        $current = grammarAccess.getParameterAccess().getYesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParameterAccess().getYesEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


