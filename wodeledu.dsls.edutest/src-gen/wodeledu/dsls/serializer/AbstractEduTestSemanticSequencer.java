/*
 * generated by Xtext
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import edutest.AlternativeResponse;
import edutest.EdutestPackage;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmConfig;
import edutest.MultiChoiceEmendation;
import edutest.Program;
import edutest.ProgramConfiguration;
import edutest.Test;
import edutest.TestConfiguration;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.EduTestGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractEduTestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EduTestGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == EdutestPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case EdutestPackage.ALTERNATIVE_RESPONSE:
				sequence_AlternativeResponse(context, (AlternativeResponse) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_DIAGRAM:
				sequence_MultiChoiceDiagram(context, (MultiChoiceDiagram) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_EM_CONFIG:
				sequence_MultiChoiceEmConfig(context, (MultiChoiceEmConfig) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_EMENDATION:
				sequence_MultiChoiceEmendation(context, (MultiChoiceEmendation) semanticObject); 
				return; 
			case EdutestPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case EdutestPackage.PROGRAM_CONFIGURATION:
				sequence_ProgramConfiguration(context, (ProgramConfiguration) semanticObject); 
				return; 
			case EdutestPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case EdutestPackage.TEST_CONFIGURATION:
				sequence_TestConfiguration(context, (TestConfiguration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (block=[EObject|ID]? config=TestConfiguration tests+=Test*)
	 */
	protected void sequence_AlternativeResponse(EObject context, AlternativeResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (block=[EObject|ID]? config=TestConfiguration tests+=Test*)
	 */
	protected void sequence_MultiChoiceDiagram(EObject context, MultiChoiceDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((retry?='yes' | retry?='no') (weighted?='yes' | weighted?='no') penalty=EDouble order=Order mode=Mode)
	 */
	protected void sequence_MultiChoiceEmConfig(EObject context, MultiChoiceEmConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (block=[EObject|ID]? config=MultiChoiceEmConfig tests+=Test*)
	 */
	protected void sequence_MultiChoiceEmendation(EObject context, MultiChoiceEmendation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     navigation=Navigation
	 */
	protected void sequence_ProgramConfiguration(EObject context, ProgramConfiguration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, EdutestPackage.Literals.PROGRAM_CONFIGURATION__NAVIGATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdutestPackage.Literals.PROGRAM_CONFIGURATION__NAVIGATION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getProgramConfigurationAccess().getNavigationNavigationEnumRuleCall_2_0(), semanticObject.getNavigation());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (config=ProgramConfiguration? exercises+=MutatorTests+)
	 */
	protected void sequence_Program(EObject context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (retry?='yes' | retry?='no')
	 */
	protected void sequence_TestConfiguration(EObject context, TestConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (source=EString question=EString)
	 */
	protected void sequence_Test(EObject context, Test semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, EdutestPackage.Literals.TEST__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdutestPackage.Literals.TEST__SOURCE));
			if(transientValues.isValueTransient(semanticObject, EdutestPackage.Literals.TEST__QUESTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdutestPackage.Literals.TEST__QUESTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTestAccess().getSourceEStringParserRuleCall_2_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getTestAccess().getQuestionEStringParserRuleCall_4_0(), semanticObject.getQuestion());
		feeder.finish();
	}
}
