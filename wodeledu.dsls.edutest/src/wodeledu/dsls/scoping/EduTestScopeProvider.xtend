/*
 * generated by Xtext
 */
package wodeledu.dsls.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import edutest.MutatorTests
import org.eclipse.emf.ecore.EReference
import manager.ModelManager
import org.osgi.framework.Bundle
import org.eclipse.core.runtime.Platform
import java.net.URL
import org.eclipse.core.runtime.FileLocator
import java.util.ArrayList
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class EduTestScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * MutatorTests.block can refers to any block declared in the .mutator file.
	 */
	def IScope scope_MutatorTests_block(MutatorTests mts, EReference ref) {
		val xmiFileName = "file:/" + ModelManager.getWorkspaceAbsolutePath + '/' + manager.WodelContext.getProject + '/' + ModelManager.getOutputFolder + '/' +  mts.eResource.URI.lastSegment.replaceAll("test", "model")
		val Bundle bundle = Platform.getBundle("wodel.models")
   		val URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore")
		val String mutatorecore = FileLocator.resolve(fileURL).getFile
		val ArrayList<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore)
		val Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI(xmiFileName).toFileString)
       	Scopes.scopeFor(ModelManager.getObjectsOfType("Block", mutatormodel))   
	}			
}
