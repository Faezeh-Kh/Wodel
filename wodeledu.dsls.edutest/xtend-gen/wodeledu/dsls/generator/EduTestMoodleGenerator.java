/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.MatchPairs;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmendation;
import edutest.MutatorTests;
import edutest.Program;
import edutest.Test;
import exceptions.ModelNotFoundException;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.AbstractMap;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import manager.ModelManager;
import manager.WodelContext;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.osgi.framework.Bundle;
import wodeledu.dsls.generator.EduTestSuperGenerator;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestMoodleGenerator extends EduTestSuperGenerator {
  private String fileName;
  
  private String pageName;
  
  private List<EObject> blocks;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
        String _plus = ("file:/" + _workspaceAbsolutePath);
        String _plus_1 = (_plus + "/");
        String _project = WodelContext.getProject();
        String _plus_2 = (_plus_1 + _project);
        String _plus_3 = (_plus_2 + 
          "/");
        String _outputFolder = ModelManager.getOutputFolder();
        String _plus_4 = (_plus_3 + _outputFolder);
        String _plus_5 = (_plus_4 + "/");
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = (_plus_5 + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI(xmiFileName).toFileString());
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = ("xml/" + _replaceAll_1);
              String _plus_7 = (_plus_6 + ".xml");
              this.fileName = _plus_7;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_8 = (_replaceAll_2 + ".xml");
              this.pageName = _plus_8;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_9 = ("xml/" + _replaceAll_3);
              String _plus_10 = (_plus_9 + Integer.valueOf(i));
              String _plus_11 = (_plus_10 + ".xml");
              this.fileName = _plus_11;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_12 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_13 = (_plus_12 + ".xml");
              this.pageName = _plus_13;
            }
            fsa.generateFile(this.fileName, this.compile(p, resource));
            i++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
          final ModelNotFoundException e = (ModelNotFoundException)_t;
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public CharSequence compile(final Program program, final Resource resource) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      String _xblockexpression = null;
      {
        this.buildOptions(program, resource, this.blocks, program.getClass());
        _xblockexpression = "";
      }
      _builder.append(_xblockexpression);
      _builder.newLineIfNotEmpty();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<quiz>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<question type=\"category\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<category>");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<text>$course$/top/Por defecto en Automatas</text>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</category>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<info format=\"moodle_auto_format\">");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<text>Categoria por defecto para preguntas compartidas en el contexto Automatas.</text>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</info>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<idnumber></idnumber>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</question>");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      int i = 0;
      _builder.newLineIfNotEmpty();
      {
        EList<MutatorTests> _exercises = program.getExercises();
        for(final MutatorTests exercise : _exercises) {
          {
            if ((exercise instanceof AlternativeResponse)) {
              {
                EList<Test> _tests = ((AlternativeResponse)exercise).getTests();
                for(final Test test : _tests) {
                  _builder.append("          ");
                  _builder.append("<question type=\"truefalse\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<name>");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("<text>");
                  String _replace = test.getQuestion().replace("\"", "\'");
                  _builder.append(_replace, "    ");
                  _builder.append("</text>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("  ");
                  _builder.append("</name>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<questiontext format=\"html\">");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("<!-- ");
                  String diagram = this.rand.get(exercise).get(test).get(0);
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("<!-- ");
                  UUID uuid = UUID.randomUUID();
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("<text><![CDATA[<p>");
                  String _replace_1 = test.getQuestion().replace("\"", "\'");
                  _builder.append(_replace_1, "    ");
                  _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                  _builder.append(uuid, "    ");
                  _builder.append(".png\" alt=\"");
                  String _replace_2 = test.getQuestion().replace("\"", "\'");
                  _builder.append(_replace_2, "    ");
                  _builder.append("\" width=\"40%\" height=\"40%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("<file name=\"exercise_");
                  _builder.append(uuid, "\t\t");
                  _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                  String _replace_3 = test.getSource().replace(".model", "");
                  String _plus = ("diagrams/" + _replace_3);
                  String _plus_1 = (_plus + "/");
                  String _plus_2 = (_plus_1 + diagram);
                  String _stringBase64 = this.getStringBase64(_plus_2);
                  _builder.append(_stringBase64, "\t\t");
                  _builder.append("</file>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("  ");
                  _builder.append("</questiontext>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<generalfeedback format=\"html\">");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("<text></text>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("</generalfeedback>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<penalty>1.0000000</penalty>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<hidden>0</hidden>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<idnumber></idnumber>");
                  _builder.newLine();
                  {
                    boolean _equals = diagram.equals(test.getSource().replace(".model", ".png"));
                    if (_equals) {
                      _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>true</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<feedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</feedback>");
                      _builder.newLine();
                      _builder.append("</answer>");
                      _builder.newLine();
                      _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>false</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<feedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</feedback>");
                      _builder.newLine();
                      _builder.append("</answer>");
                      _builder.newLine();
                    } else {
                      _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>true</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<feedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</feedback>");
                      _builder.newLine();
                      _builder.append("</answer>");
                      _builder.newLine();
                      _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>false</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<feedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</feedback>");
                      _builder.newLine();
                      _builder.append("</answer>");
                      _builder.newLine();
                    }
                  }
                  _builder.append("</question>");
                  _builder.newLine();
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceDiagram)) {
              {
                EList<Test> _tests_1 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_1 : _tests_1) {
                  _builder.append("<question type=\"multichoice\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<name>");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("<text>Question ");
                  int _plusPlus = i++;
                  _builder.append(_plusPlus, "    ");
                  _builder.append("</text>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("  ");
                  _builder.append("</name>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<questiontext format=\"html\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<text><![CDATA[<p>");
                  String _replace_4 = test_1.getQuestion().replace("\"", "\'");
                  _builder.append(_replace_4, "  ");
                  _builder.append("<br></p>]]></text>");
                  _builder.newLineIfNotEmpty();
                  _builder.append("  ");
                  _builder.append("</questiontext>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<generalfeedback format=\"html\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<text></text>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("</generalfeedback>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<penalty>1.0000000</penalty>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<hidden>0</hidden>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<idnumber></idnumber>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<single>true</single>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<shuffleanswers>true</shuffleanswers>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<answernumbering>abc</answernumbering>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<correctfeedback format=\"html\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<text>Respuesta correcta</text>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("</correctfeedback>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<partiallycorrectfeedback format=\"html\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<text>Respuesta parcialmente correcta.</text>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("</partiallycorrectfeedback>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<incorrectfeedback format=\"html\">");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<text>Respuesta incorrecta.</text>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("</incorrectfeedback>");
                  _builder.newLine();
                  _builder.append("  ");
                  _builder.append("<shownumcorrect/>");
                  _builder.newLine();
                  {
                    List<String> _get = this.diagrams.get(exercise).get(test_1);
                    for(final String diagram_1 : _get) {
                      _builder.append("<!-- ");
                      UUID uuid_1 = UUID.randomUUID();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        boolean _equals_1 = diagram_1.equals(test_1.getSource().replace(".model", ".png"));
                        if (_equals_1) {
                          _builder.append("           ");
                          _builder.append("<answer fraction=\"100\" format=\"html\">");
                          _builder.newLine();
                        } else {
                          _builder.append("           ");
                          _builder.append("<answer fraction=\"0\" format=\"html\">");
                          _builder.newLine();
                        }
                      }
                      _builder.append("           ");
                      _builder.append("<text><![CDATA[<p><img src=\"@@PLUGINFILE@@/exercise_");
                      _builder.append(uuid_1, "           ");
                      _builder.append(".png\" alt=\"\" width=\"40%\" height=\"40%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("           ");
                      _builder.append("<file name=\"exercise_");
                      _builder.append(uuid_1, "           ");
                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                      String _replace_5 = test_1.getSource().replace(".model", "");
                      String _plus_3 = ("diagrams/" + _replace_5);
                      String _plus_4 = (_plus_3 + "/");
                      String _plus_5 = (_plus_4 + diagram_1);
                      String _stringBase64_1 = this.getStringBase64(_plus_5);
                      _builder.append(_stringBase64_1, "           ");
                      _builder.append("</file>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("           ");
                      _builder.append("<feedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("           ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("           ");
                      _builder.append("</feedback>");
                      _builder.newLine();
                      _builder.append("           ");
                      _builder.append("</answer>");
                      _builder.newLine();
                    }
                  }
                  _builder.append("</question>");
                  _builder.newLine();
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceEmendation)) {
              {
                EList<Test> _tests_2 = ((MultiChoiceEmendation)exercise).getTests();
                for(final Test test_2 : _tests_2) {
                  _builder.append("            ");
                  _builder.append("<!--");
                  String diagram_2 = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    List<EduTestSuperGenerator.TestOption> _get_1 = this.options.get(exercise).get(test_2);
                    boolean _notEquals = (!Objects.equal(_get_1, null));
                    if (_notEquals) {
                      {
                        List<EduTestSuperGenerator.TestOption> _get_2 = this.options.get(exercise).get(test_2);
                        for(final EduTestSuperGenerator.TestOption opt : _get_2) {
                          {
                            int _size = opt.text.size();
                            boolean _greaterThan = (_size > 0);
                            if (_greaterThan) {
                              {
                                if ((opt.solution == true)) {
                                  _builder.append("<!--");
                                  _builder.append(diagram_2 = opt.path);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  {
                    boolean _equals_2 = diagram_2.equals("");
                    boolean _not = (!_equals_2);
                    if (_not) {
                      _builder.append("<question type=\"multichoice\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<name>");
                      _builder.newLine();
                      _builder.append("     ");
                      _builder.append("<text>Question ");
                      int _plusPlus_1 = i++;
                      _builder.append(_plusPlus_1, "     ");
                      _builder.append("</text>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("  ");
                      _builder.append("</name>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<questiontext format=\"html\">");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("<!-- ");
                      UUID uuid_2 = UUID.randomUUID();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.append("<text><![CDATA[<p>");
                      String _replace_6 = test_2.getQuestion().replace("\"", "\'");
                      _builder.append(_replace_6, "\t\t\t");
                      _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                      _builder.append(uuid_2, "\t\t\t");
                      _builder.append(".png\" alt=\"multiple choice\" width=\"40%\" height=\"40%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("<file name=\"exercise_");
                      _builder.append(uuid_2, "    ");
                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                      String _stringBase64_2 = this.getStringBase64(diagram_2);
                      _builder.append(_stringBase64_2, "    ");
                      _builder.append("</file>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("  ");
                      _builder.append("</questiontext>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<generalfeedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text></text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</generalfeedback>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<penalty>0.3333333</penalty>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<hidden>0</hidden>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<idnumber></idnumber>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<single>false</single>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<shuffleanswers>true</shuffleanswers>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<answernumbering>abc");
                      _builder.append("</answernumbering>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<correctfeedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>Respuesta correcta</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</correctfeedback>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<partiallycorrectfeedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>Respuesta parcialmente correcta.</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</partiallycorrectfeedback>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<incorrectfeedback format=\"html\">");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<text>Respuesta incorrecta.</text>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("</incorrectfeedback>");
                      _builder.newLine();
                      _builder.append("  ");
                      _builder.append("<shownumcorrect/>");
                      _builder.newLine();
                      _builder.append("  ");
                      int solutions = 0;
                      _builder.newLineIfNotEmpty();
                      {
                        List<EduTestSuperGenerator.TestOption> _get_3 = this.options.get(exercise).get(test_2);
                        boolean _notEquals_1 = (!Objects.equal(_get_3, null));
                        if (_notEquals_1) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_4 = this.options.get(exercise).get(test_2);
                            for(final EduTestSuperGenerator.TestOption opt_1 : _get_4) {
                              {
                                int _size_1 = opt_1.text.size();
                                boolean _greaterThan_1 = (_size_1 > 0);
                                if (_greaterThan_1) {
                                  {
                                    if ((opt_1.solution == true)) {
                                      _builder.append("  ");
                                      String _xblockexpression_1 = null;
                                      {
                                        solutions++;
                                        _xblockexpression_1 = "";
                                      }
                                      _builder.append(_xblockexpression_1, "  ");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        List<EduTestSuperGenerator.TestOption> _get_5 = this.options.get(exercise).get(test_2);
                        boolean _notEquals_2 = (!Objects.equal(_get_5, null));
                        if (_notEquals_2) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_6 = this.options.get(exercise).get(test_2);
                            for(final EduTestSuperGenerator.TestOption opt_2 : _get_6) {
                              {
                                int _size_2 = opt_2.text.size();
                                boolean _greaterThan_2 = (_size_2 > 0);
                                if (_greaterThan_2) {
                                  {
                                    if ((opt_2.solution == true)) {
                                      {
                                        if (((100 % solutions) == 0)) {
                                          _builder.append("  ");
                                          _builder.append("<answer fraction=\"");
                                          _builder.append((100 / solutions), "  ");
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        } else {
                                          _builder.append("  ");
                                          _builder.append("<!--");
                                          Locale _locale = new Locale("en", "UK");
                                          NumberFormat _numberInstance = NumberFormat.getNumberInstance(_locale);
                                          DecimalFormat formatter = ((DecimalFormat) _numberInstance);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("  ");
                                          String _xblockexpression_2 = null;
                                          {
                                            formatter.applyPattern("###.#####");
                                            _xblockexpression_2 = "";
                                          }
                                          _builder.append(_xblockexpression_2, "  ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("  ");
                                          _builder.append("<answer fraction=\"");
                                          String _format = formatter.format((100.0 / solutions));
                                          _builder.append(_format, "  ");
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    } else {
                                      _builder.append("  ");
                                      _builder.append("<answer fraction=\"0\" format=\"html\">");
                                      _builder.newLine();
                                    }
                                  }
                                  _builder.append("  ");
                                  _builder.append("<text><![CDATA[<p>");
                                  String _trim = opt_2.text.get(0).trim();
                                  _builder.append(_trim, "  ");
                                  _builder.append("<br></p>]]></text>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                      _builder.append("</question>");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MatchPairs)) {
              _builder.append("<question type=\"matching\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<name>");
              _builder.newLine();
              _builder.append("     ");
              _builder.append("<text>Question ");
              int _plusPlus_2 = i++;
              _builder.append(_plusPlus_2, "     ");
              _builder.append("</text>");
              _builder.newLineIfNotEmpty();
              _builder.append("  ");
              _builder.append("</name>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<questiontext format=\"html\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<text><![CDATA[<p>Match the diagram on the left with the correct option on the right.</p>]]></text>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("</questiontext>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<generalfeedback format=\"html\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<text></text>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("</generalfeedback>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<penalty>0.3333333</penalty>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<hidden>0</hidden>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<idnumber></idnumber>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<shuffleanswers>true</shuffleanswers>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<correctfeedback format=\"html\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<text>Respuesta correcta</text>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("</correctfeedback>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<partiallycorrectfeedback format=\"html\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<text>Respuesta parcialmente correcta.</text>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("</partiallycorrectfeedback>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<incorrectfeedback format=\"html\">");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<text>Respuesta incorrecta.</text>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("</incorrectfeedback>");
              _builder.newLine();
              _builder.append("  ");
              _builder.append("<shownumcorrect/>");
              _builder.newLine();
              {
                EList<Test> _tests_3 = ((MatchPairs)exercise).getTests();
                for(final Test test_3 : _tests_3) {
                  _builder.append("  ");
                  _builder.append("<!--");
                  String diagram_3 = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    if (((!Objects.equal(this.options.get(exercise).get(test_3), null)) && (this.options.get(exercise).get(test_3).size() > 0))) {
                      {
                        List<EduTestSuperGenerator.TestOption> _get_7 = this.options.get(exercise).get(test_3);
                        for(final EduTestSuperGenerator.TestOption opt_3 : _get_7) {
                          {
                            boolean _contains = opt_3.path.contains(((MatchPairs)exercise).getBlocks().get(0).getName());
                            if (_contains) {
                              _builder.append("  ");
                              _builder.append("<!--");
                              _builder.append(diagram_3 = opt_3.path, "  ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final AbstractMap.SimpleEntry<Resource, List<String>> entry : opt_3.reverse) {
                                  _builder.append("  ");
                                  _builder.append("<subquestion format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("  ");
                                  _builder.append("<!-- ");
                                  UUID uuid_3 = UUID.randomUUID();
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("  ");
                                  _builder.append("<!-- ");
                                  String question = test_3.getQuestion().replace("\"", "\'");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("  ");
                                  _builder.append("<!-- ");
                                  {
                                    boolean _isExpression = test_3.isExpression();
                                    boolean _equals_3 = (_isExpression == true);
                                    if (_equals_3) {
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("  ");
                                      _builder.append("  ");
                                      _builder.append("<!-- ");
                                      String _question = question;
                                      String _text = this.getText(entry.getKey().getURI().toFileString(), resource);
                                      String _plus_6 = question = (_question + _text);
                                      _builder.append(_plus_6, "    ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("  ");
                                      _builder.append("  ");
                                      _builder.append("<!-- ");
                                      System.out.println(entry.getKey().getURI().toFileString());
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("  ");
                                      _builder.append("  ");
                                      _builder.append("<!-- ");
                                    }
                                  }
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("\t\t\t");
                                  _builder.append("<text><![CDATA[<p>");
                                  _builder.append(question, "\t\t\t");
                                  _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                  _builder.append(uuid_3, "\t\t\t");
                                  _builder.append(".png\" alt=\"\" width=\"40%\" height=\"40%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("  ");
                                  _builder.append("<file name=\"exercise_");
                                  _builder.append(uuid_3, "    ");
                                  _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                  String _stringBase64_3 = this.getStringBase64(diagram_3);
                                  _builder.append(_stringBase64_3, "    ");
                                  _builder.append("</file>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("<answer>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text><![CDATA[<p>");
                                  String _trim_1 = entry.getValue().get(0).trim();
                                  _builder.append(_trim_1, "  ");
                                  _builder.append("<br></p>]]></text>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</subquestion>");
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("</question>");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("</quiz>");
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
